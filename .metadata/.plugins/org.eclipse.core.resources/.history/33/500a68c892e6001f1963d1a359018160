/*
 * OBD_Debug.c
 *
 *  Created on: Jan 21, 2025
 *      Author: rhett
 */

#include <stm32f7xx.h>
#include <stdio.h>
#include <string.h>
#include "OBD_Debug.h"
#include "OBD2.h"
#include "ui.h"
#include "lvgl.h"

static lv_obj_t* textarea;
static BusID busActive;

void debug_init(BusID id) {
	busActive = id;
	textarea = objects.obj32;
}

void debug_add_text(char* text) {
	if (lv_screen_active() != objects.obd2_debug) {
		return;
	}
	lv_textarea_add_text(textarea, text);
}

void debug_send_data(uint8_t* data, uint32_t size) {
	if (lv_screen_active() != objects.obd2_debug) {
		return;
	}
	char msg[DBG_MSG_MAX_SIZE] = "{";

	for (int i = 0; i < size; i++) {
		if (data[i] <= 0xF) {
			sprintf(msg + strlen(msg), "0x0%X", data[i]);
		} else {
			sprintf(msg + strlen(msg), "0x%X", data[i]);
		}
		if (i == size - 1) {
			strcat(msg, "}\n");
		} else {
			strcat(msg, ", ");
		}
	}
	debug_add_text(msg);
}

void add_bus_name_to_header(char* header) {
	char* name = "";

	switch (busActive) {
		case BUS_ID_KWP:
			name = "#00FFFF <KWP>#";
			break;
		case BUS_ID_9141:
			name = "#00FFFF <9141>";
			break;
		case BUS_ID_CAN:
			name = "#00FFFF <CAN>";
			break;
	}
	sprintf(header + strlen(header), "%s", name);
}

void debug_send_header(bool receiving, bool error) {
	lv_obj_t* label = lv_textarea_get_label(textarea);
	if ((strlen(lv_label_get_text(label)) > DBG_WINDOW_MAX_TEXT) && (lv_screen_active() == objects.obd2_debug)) {
		lv_label_cut_text(label, 0, 70);
		lv_textarea_set_text(textarea, lv_label_get_text(label));
	}
	char header[DBG_MSG_MAX_SIZE];

	if (!receiving) {
		sprintf(header, "#00FF00 \uf00c [DGAS]# ");
	} else {
		if (error) {
			sprintf(header, "#FF0000 \uf00d# #AA11F0 [ECU]# ");
		} else {
			sprintf(header, "#00FF00 \uf00c# #AA11F0 [ECU]# ");
		}
	}
	add_bus_name_to_header(header);
	debug_add_text(header);
	lv_label_set_recolor(lv_textarea_get_label(textarea), true);
}

void debug_send_message(uint8_t* data, uint32_t size, bool receiving) {
	debug_send_header(receiving, false);
	debug_send_data(data, size);
}

void debug_send_error(bool receiving, BusError error) {
	debug_send_header(receiving, true);

	switch(error) {
		case ERROR_TIMEOUT:
			debug_add_text("#FF0000 ERROR: NO RESPONSE#\n");
			break;
		case ERROR_KWP_FORMAT:
			debug_add_text("#FF0000 ERROR: FORMAT BYTE#\n");
			break;
	}
}
