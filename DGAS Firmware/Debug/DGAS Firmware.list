
DGAS Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007014  08007014  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800701c  0800701c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08007030  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007030  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019435  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003159  00000000  00000000  00039471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003889  00000000  00000000  0003edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e25  00000000  00000000  00042641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f87ce  00000000  00000000  0005c466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  00154c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006fd8 	.word	0x08006fd8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006fd8 	.word	0x08006fd8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <lcd_reset>:
	}
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
	return HAL_OK;
}

void lcd_reset(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <lcd_reset+0x28>)
 8000526:	f003 f85f 	bl	80035e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800052a:	200a      	movs	r0, #10
 800052c:	f002 f86e 	bl	800260c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <lcd_reset+0x28>)
 8000536:	f003 f857 	bl	80035e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f002 f866 	bl	800260c <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020400 	.word	0x40020400

08000548 <sendCommand>:

void sendCommand(uint8_t cmd) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	uint16_t send = cmd;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	b29b      	uxth	r3, r3
 8000556:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <sendCommand+0x48>)
 800055e:	f003 f843 	bl	80035e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f002 f852 	bl	800260c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 8000568:	f107 010e 	add.w	r1, r7, #14
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	2201      	movs	r2, #1
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <sendCommand+0x4c>)
 8000572:	f005 fc89 	bl	8005e88 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f002 f848 	bl	800260c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <sendCommand+0x48>)
 8000582:	f003 f831 	bl	80035e8 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020400 	.word	0x40020400
 8000594:	20000208 	.word	0x20000208

08000598 <sendData>:

void sendData(uint8_t data) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	uint16_t send = 1 << 8 | data;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <sendData+0x50>)
 80005b6:	f003 f817 	bl	80035e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f002 f826 	bl	800260c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 80005c0:	f107 010e 	add.w	r1, r7, #14
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <sendData+0x54>)
 80005ca:	f005 fc5d 	bl	8005e88 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f002 f81c 	bl	800260c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <sendData+0x50>)
 80005da:	f003 f805 	bl	80035e8 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020400 	.word	0x40020400
 80005ec:	20000208 	.word	0x20000208

080005f0 <lcd_init>:

HAL_StatusTypeDef lcd_init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	48fd      	ldr	r0, [pc, #1012]	; (80009f0 <lcd_init+0x400>)
 80005fa:	f002 fff5 	bl	80035e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	48fb      	ldr	r0, [pc, #1004]	; (80009f0 <lcd_init+0x400>)
 8000604:	f002 fff0 	bl	80035e8 <HAL_GPIO_WritePin>
	lcd_reset();
 8000608:	f7ff ff88 	bl	800051c <lcd_reset>
#if 1
sendCommand(0xFF);
 800060c:	20ff      	movs	r0, #255	; 0xff
 800060e:	f7ff ff9b 	bl	8000548 <sendCommand>
sendData(0x77);
 8000612:	2077      	movs	r0, #119	; 0x77
 8000614:	f7ff ffc0 	bl	8000598 <sendData>
sendData(0x01);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffbd 	bl	8000598 <sendData>
sendData(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffba 	bl	8000598 <sendData>
sendData(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffb7 	bl	8000598 <sendData>
sendData(0x10);
 800062a:	2010      	movs	r0, #16
 800062c:	f7ff ffb4 	bl	8000598 <sendData>

 sendCommand(0xC0);
 8000630:	20c0      	movs	r0, #192	; 0xc0
 8000632:	f7ff ff89 	bl	8000548 <sendCommand>
 sendData(0x3B);
 8000636:	203b      	movs	r0, #59	; 0x3b
 8000638:	f7ff ffae 	bl	8000598 <sendData>
 sendData(0x00);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ffab 	bl	8000598 <sendData>

 sendCommand(0xC1);
 8000642:	20c1      	movs	r0, #193	; 0xc1
 8000644:	f7ff ff80 	bl	8000548 <sendCommand>
 sendData(0x0B); //VBP
 8000648:	200b      	movs	r0, #11
 800064a:	f7ff ffa5 	bl	8000598 <sendData>
 sendData(0x02);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ffa2 	bl	8000598 <sendData>

 sendCommand(0xC2);
 8000654:	20c2      	movs	r0, #194	; 0xc2
 8000656:	f7ff ff77 	bl	8000548 <sendCommand>
 sendData(0x00);
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff9c 	bl	8000598 <sendData>
 sendData(0x02);
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff ff99 	bl	8000598 <sendData>

 sendCommand(0xCC);
 8000666:	20cc      	movs	r0, #204	; 0xcc
 8000668:	f7ff ff6e 	bl	8000548 <sendCommand>
 sendData(0x10);
 800066c:	2010      	movs	r0, #16
 800066e:	f7ff ff93 	bl	8000598 <sendData>

 sendCommand(0xCD);
 8000672:	20cd      	movs	r0, #205	; 0xcd
 8000674:	f7ff ff68 	bl	8000548 <sendCommand>
 sendData(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff8d 	bl	8000598 <sendData>

 sendCommand ( 0xB0); //Positive Voltage Gamma Control
 800067e:	20b0      	movs	r0, #176	; 0xb0
 8000680:	f7ff ff62 	bl	8000548 <sendCommand>
 sendData ( 0x02);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff87 	bl	8000598 <sendData>
 sendData ( 0x13);
 800068a:	2013      	movs	r0, #19
 800068c:	f7ff ff84 	bl	8000598 <sendData>
 sendData ( 0x1B);
 8000690:	201b      	movs	r0, #27
 8000692:	f7ff ff81 	bl	8000598 <sendData>
 sendData ( 0x0D);
 8000696:	200d      	movs	r0, #13
 8000698:	f7ff ff7e 	bl	8000598 <sendData>
 sendData ( 0x10);
 800069c:	2010      	movs	r0, #16
 800069e:	f7ff ff7b 	bl	8000598 <sendData>
 sendData ( 0x05);
 80006a2:	2005      	movs	r0, #5
 80006a4:	f7ff ff78 	bl	8000598 <sendData>
 sendData ( 0x08);
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff75 	bl	8000598 <sendData>
 sendData ( 0x07);
 80006ae:	2007      	movs	r0, #7
 80006b0:	f7ff ff72 	bl	8000598 <sendData>
 sendData ( 0x07);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff ff6f 	bl	8000598 <sendData>
 sendData ( 0x24);
 80006ba:	2024      	movs	r0, #36	; 0x24
 80006bc:	f7ff ff6c 	bl	8000598 <sendData>
 sendData ( 0x04);
 80006c0:	2004      	movs	r0, #4
 80006c2:	f7ff ff69 	bl	8000598 <sendData>
 sendData ( 0x11);
 80006c6:	2011      	movs	r0, #17
 80006c8:	f7ff ff66 	bl	8000598 <sendData>
 sendData ( 0x0E);
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff63 	bl	8000598 <sendData>
 sendData ( 0x2C);
 80006d2:	202c      	movs	r0, #44	; 0x2c
 80006d4:	f7ff ff60 	bl	8000598 <sendData>
 sendData ( 0x33);
 80006d8:	2033      	movs	r0, #51	; 0x33
 80006da:	f7ff ff5d 	bl	8000598 <sendData>
 sendData ( 0x1D);
 80006de:	201d      	movs	r0, #29
 80006e0:	f7ff ff5a 	bl	8000598 <sendData>

 sendCommand ( 0xB1); //Negative Voltage Gamma Control
 80006e4:	20b1      	movs	r0, #177	; 0xb1
 80006e6:	f7ff ff2f 	bl	8000548 <sendCommand>
 sendData ( 0x05);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff ff54 	bl	8000598 <sendData>
 sendData ( 0x13);
 80006f0:	2013      	movs	r0, #19
 80006f2:	f7ff ff51 	bl	8000598 <sendData>
 sendData ( 0x1B);
 80006f6:	201b      	movs	r0, #27
 80006f8:	f7ff ff4e 	bl	8000598 <sendData>
 sendData ( 0x0D);
 80006fc:	200d      	movs	r0, #13
 80006fe:	f7ff ff4b 	bl	8000598 <sendData>
 sendData ( 0x11);
 8000702:	2011      	movs	r0, #17
 8000704:	f7ff ff48 	bl	8000598 <sendData>
 sendData ( 0x05);
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff ff45 	bl	8000598 <sendData>
 sendData ( 0x08);
 800070e:	2008      	movs	r0, #8
 8000710:	f7ff ff42 	bl	8000598 <sendData>
 sendData ( 0x07);
 8000714:	2007      	movs	r0, #7
 8000716:	f7ff ff3f 	bl	8000598 <sendData>
 sendData ( 0x07);
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff ff3c 	bl	8000598 <sendData>
 sendData ( 0x24);
 8000720:	2024      	movs	r0, #36	; 0x24
 8000722:	f7ff ff39 	bl	8000598 <sendData>
 sendData ( 0x04);
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff36 	bl	8000598 <sendData>
 sendData ( 0x11);
 800072c:	2011      	movs	r0, #17
 800072e:	f7ff ff33 	bl	8000598 <sendData>
 sendData ( 0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff ff30 	bl	8000598 <sendData>
 sendData ( 0x2C);
 8000738:	202c      	movs	r0, #44	; 0x2c
 800073a:	f7ff ff2d 	bl	8000598 <sendData>
 sendData ( 0x33);
 800073e:	2033      	movs	r0, #51	; 0x33
 8000740:	f7ff ff2a 	bl	8000598 <sendData>
 sendData ( 0x1D);
 8000744:	201d      	movs	r0, #29
 8000746:	f7ff ff27 	bl	8000598 <sendData>

 sendCommand(0xFF);
 800074a:	20ff      	movs	r0, #255	; 0xff
 800074c:	f7ff fefc 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000750:	2077      	movs	r0, #119	; 0x77
 8000752:	f7ff ff21 	bl	8000598 <sendData>
 sendData(0x01);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff1e 	bl	8000598 <sendData>
 sendData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff1b 	bl	8000598 <sendData>
 sendData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff18 	bl	8000598 <sendData>
 sendData(0x11);
 8000768:	2011      	movs	r0, #17
 800076a:	f7ff ff15 	bl	8000598 <sendData>

 sendCommand(0xB0);
 800076e:	20b0      	movs	r0, #176	; 0xb0
 8000770:	f7ff feea 	bl	8000548 <sendCommand>
 sendData(0x5d);//5d
 8000774:	205d      	movs	r0, #93	; 0x5d
 8000776:	f7ff ff0f 	bl	8000598 <sendData>

 sendCommand(0xB1); //VCOM amplitude setting
 800077a:	20b1      	movs	r0, #177	; 0xb1
 800077c:	f7ff fee4 	bl	8000548 <sendCommand>
 sendData(0x43); //43
 8000780:	2043      	movs	r0, #67	; 0x43
 8000782:	f7ff ff09 	bl	8000598 <sendData>

 sendCommand(0xB2); //VGH Voltage setting
 8000786:	20b2      	movs	r0, #178	; 0xb2
 8000788:	f7ff fede 	bl	8000548 <sendCommand>
 sendData(0x81); //12V
 800078c:	2081      	movs	r0, #129	; 0x81
 800078e:	f7ff ff03 	bl	8000598 <sendData>

 sendCommand(0xB3);
 8000792:	20b3      	movs	r0, #179	; 0xb3
 8000794:	f7ff fed8 	bl	8000548 <sendCommand>
 sendData(0x80);
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	f7ff fefd 	bl	8000598 <sendData>

 sendCommand(0xB5); //VGL Voltage setting
 800079e:	20b5      	movs	r0, #181	; 0xb5
 80007a0:	f7ff fed2 	bl	8000548 <sendCommand>
 sendData(0x43); //-8.3V
 80007a4:	2043      	movs	r0, #67	; 0x43
 80007a6:	f7ff fef7 	bl	8000598 <sendData>

 sendCommand(0xB7);
 80007aa:	20b7      	movs	r0, #183	; 0xb7
 80007ac:	f7ff fecc 	bl	8000548 <sendCommand>
 sendData(0x85);
 80007b0:	2085      	movs	r0, #133	; 0x85
 80007b2:	f7ff fef1 	bl	8000598 <sendData>

 sendCommand(0xB8);
 80007b6:	20b8      	movs	r0, #184	; 0xb8
 80007b8:	f7ff fec6 	bl	8000548 <sendCommand>
 sendData(0x20);
 80007bc:	2020      	movs	r0, #32
 80007be:	f7ff feeb 	bl	8000598 <sendData>

 sendCommand(0xC1);
 80007c2:	20c1      	movs	r0, #193	; 0xc1
 80007c4:	f7ff fec0 	bl	8000548 <sendCommand>
 sendData(0x78);
 80007c8:	2078      	movs	r0, #120	; 0x78
 80007ca:	f7ff fee5 	bl	8000598 <sendData>

 sendCommand(0xC2);
 80007ce:	20c2      	movs	r0, #194	; 0xc2
 80007d0:	f7ff feba 	bl	8000548 <sendCommand>
 sendData(0x78);
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f7ff fedf 	bl	8000598 <sendData>

 sendCommand(0xD0);
 80007da:	20d0      	movs	r0, #208	; 0xd0
 80007dc:	f7ff feb4 	bl	8000548 <sendCommand>
 sendData(0x88);
 80007e0:	2088      	movs	r0, #136	; 0x88
 80007e2:	f7ff fed9 	bl	8000598 <sendData>

 sendCommand(0xE0);
 80007e6:	20e0      	movs	r0, #224	; 0xe0
 80007e8:	f7ff feae 	bl	8000548 <sendCommand>
 sendData(0x00);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fed3 	bl	8000598 <sendData>
 sendData(0x00);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fed0 	bl	8000598 <sendData>
 sendData(0x02);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fecd 	bl	8000598 <sendData>

 sendCommand(0xE1);
 80007fe:	20e1      	movs	r0, #225	; 0xe1
 8000800:	f7ff fea2 	bl	8000548 <sendCommand>
 sendData(0x03);
 8000804:	2003      	movs	r0, #3
 8000806:	f7ff fec7 	bl	8000598 <sendData>
 sendData(0xA0);
 800080a:	20a0      	movs	r0, #160	; 0xa0
 800080c:	f7ff fec4 	bl	8000598 <sendData>
 sendData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fec1 	bl	8000598 <sendData>
 sendData(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff febe 	bl	8000598 <sendData>
 sendData(0x04);
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff febb 	bl	8000598 <sendData>
 sendData(0xA0);
 8000822:	20a0      	movs	r0, #160	; 0xa0
 8000824:	f7ff feb8 	bl	8000598 <sendData>
 sendData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff feb5 	bl	8000598 <sendData>
 sendData(0x00);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff feb2 	bl	8000598 <sendData>
 sendData(0x00);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff feaf 	bl	8000598 <sendData>
 sendData(0x20);
 800083a:	2020      	movs	r0, #32
 800083c:	f7ff feac 	bl	8000598 <sendData>
 sendData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff fea9 	bl	8000598 <sendData>

 sendCommand(0xE2);
 8000846:	20e2      	movs	r0, #226	; 0xe2
 8000848:	f7ff fe7e 	bl	8000548 <sendCommand>
 sendData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fea3 	bl	8000598 <sendData>
 sendData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fea0 	bl	8000598 <sendData>
 sendData(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fe9d 	bl	8000598 <sendData>
 sendData(0x00);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fe9a 	bl	8000598 <sendData>
 sendData(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fe97 	bl	8000598 <sendData>
 sendData(0x00);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fe94 	bl	8000598 <sendData>
 sendData(0x00);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fe91 	bl	8000598 <sendData>
 sendData(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe8e 	bl	8000598 <sendData>
 sendData(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fe8b 	bl	8000598 <sendData>
 sendData(0x00);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fe88 	bl	8000598 <sendData>
 sendData(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fe85 	bl	8000598 <sendData>
 sendData(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fe82 	bl	8000598 <sendData>
 sendData(0x00);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fe7f 	bl	8000598 <sendData>

 sendCommand(0xE3);
 800089a:	20e3      	movs	r0, #227	; 0xe3
 800089c:	f7ff fe54 	bl	8000548 <sendCommand>
 sendData(0x00);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fe79 	bl	8000598 <sendData>
 sendData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe76 	bl	8000598 <sendData>
 sendData(0x11);
 80008ac:	2011      	movs	r0, #17
 80008ae:	f7ff fe73 	bl	8000598 <sendData>
 sendData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fe70 	bl	8000598 <sendData>

 sendCommand(0xE4);
 80008b8:	20e4      	movs	r0, #228	; 0xe4
 80008ba:	f7ff fe45 	bl	8000548 <sendCommand>
 sendData(0x22);
 80008be:	2022      	movs	r0, #34	; 0x22
 80008c0:	f7ff fe6a 	bl	8000598 <sendData>
 sendData(0x00);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe67 	bl	8000598 <sendData>

 sendCommand(0xE5);
 80008ca:	20e5      	movs	r0, #229	; 0xe5
 80008cc:	f7ff fe3c 	bl	8000548 <sendCommand>
 sendData(0x05);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f7ff fe61 	bl	8000598 <sendData>
 sendData(0xEC);
 80008d6:	20ec      	movs	r0, #236	; 0xec
 80008d8:	f7ff fe5e 	bl	8000598 <sendData>
 sendData(0xA0);
 80008dc:	20a0      	movs	r0, #160	; 0xa0
 80008de:	f7ff fe5b 	bl	8000598 <sendData>
 sendData(0xA0);
 80008e2:	20a0      	movs	r0, #160	; 0xa0
 80008e4:	f7ff fe58 	bl	8000598 <sendData>
 sendData(0x07);
 80008e8:	2007      	movs	r0, #7
 80008ea:	f7ff fe55 	bl	8000598 <sendData>
 sendData(0xEE);
 80008ee:	20ee      	movs	r0, #238	; 0xee
 80008f0:	f7ff fe52 	bl	8000598 <sendData>
 sendData(0xA0);
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	f7ff fe4f 	bl	8000598 <sendData>
 sendData(0xA0);
 80008fa:	20a0      	movs	r0, #160	; 0xa0
 80008fc:	f7ff fe4c 	bl	8000598 <sendData>
 sendData(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fe49 	bl	8000598 <sendData>
 sendData(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fe46 	bl	8000598 <sendData>
 sendData(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff fe43 	bl	8000598 <sendData>
 sendData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fe40 	bl	8000598 <sendData>
 sendData(0x00);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe3d 	bl	8000598 <sendData>
 sendData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fe3a 	bl	8000598 <sendData>
 sendData(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe37 	bl	8000598 <sendData>
 sendData(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe34 	bl	8000598 <sendData>

 sendCommand(0xE6);
 8000930:	20e6      	movs	r0, #230	; 0xe6
 8000932:	f7ff fe09 	bl	8000548 <sendCommand>
 sendData(0x00);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe2e 	bl	8000598 <sendData>
 sendData(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe2b 	bl	8000598 <sendData>
 sendData(0x11);
 8000942:	2011      	movs	r0, #17
 8000944:	f7ff fe28 	bl	8000598 <sendData>
 sendData(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fe25 	bl	8000598 <sendData>

 sendCommand(0xE7);
 800094e:	20e7      	movs	r0, #231	; 0xe7
 8000950:	f7ff fdfa 	bl	8000548 <sendCommand>
 sendData(0x22);
 8000954:	2022      	movs	r0, #34	; 0x22
 8000956:	f7ff fe1f 	bl	8000598 <sendData>
 sendData(0x00);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe1c 	bl	8000598 <sendData>

 sendCommand(0xE8);
 8000960:	20e8      	movs	r0, #232	; 0xe8
 8000962:	f7ff fdf1 	bl	8000548 <sendCommand>
 sendData(0x06);
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fe16 	bl	8000598 <sendData>
 sendData(0xED);
 800096c:	20ed      	movs	r0, #237	; 0xed
 800096e:	f7ff fe13 	bl	8000598 <sendData>
 sendData(0xA0);
 8000972:	20a0      	movs	r0, #160	; 0xa0
 8000974:	f7ff fe10 	bl	8000598 <sendData>
 sendData(0xA0);
 8000978:	20a0      	movs	r0, #160	; 0xa0
 800097a:	f7ff fe0d 	bl	8000598 <sendData>
 sendData(0x08);
 800097e:	2008      	movs	r0, #8
 8000980:	f7ff fe0a 	bl	8000598 <sendData>
 sendData(0xEF);
 8000984:	20ef      	movs	r0, #239	; 0xef
 8000986:	f7ff fe07 	bl	8000598 <sendData>
 sendData(0xA0);
 800098a:	20a0      	movs	r0, #160	; 0xa0
 800098c:	f7ff fe04 	bl	8000598 <sendData>
 sendData(0xA0);
 8000990:	20a0      	movs	r0, #160	; 0xa0
 8000992:	f7ff fe01 	bl	8000598 <sendData>
 sendData(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdfe 	bl	8000598 <sendData>
 sendData(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fdfb 	bl	8000598 <sendData>
 sendData(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdf8 	bl	8000598 <sendData>
 sendData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fdf5 	bl	8000598 <sendData>
 sendData(0x00);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fdf2 	bl	8000598 <sendData>
 sendData(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fdef 	bl	8000598 <sendData>
 sendData(0x00);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fdec 	bl	8000598 <sendData>
 sendData(0x00);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fde9 	bl	8000598 <sendData>

 sendCommand(0xEB);
 80009c6:	20eb      	movs	r0, #235	; 0xeb
 80009c8:	f7ff fdbe 	bl	8000548 <sendCommand>
 sendData(0x00);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fde3 	bl	8000598 <sendData>
 sendData(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fde0 	bl	8000598 <sendData>
 sendData(0x40);
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	f7ff fddd 	bl	8000598 <sendData>
 sendData(0x40);
 80009de:	2040      	movs	r0, #64	; 0x40
 80009e0:	f7ff fdda 	bl	8000598 <sendData>
 sendData(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fdd7 	bl	8000598 <sendData>
 sendData(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	e002      	b.n	80009f4 <lcd_init+0x404>
 80009ee:	bf00      	nop
 80009f0:	40020400 	.word	0x40020400
 80009f4:	f7ff fdd0 	bl	8000598 <sendData>
 sendData(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fdcd 	bl	8000598 <sendData>

 sendCommand(0xED);
 80009fe:	20ed      	movs	r0, #237	; 0xed
 8000a00:	f7ff fda2 	bl	8000548 <sendCommand>
 sendData(0xFF);
 8000a04:	20ff      	movs	r0, #255	; 0xff
 8000a06:	f7ff fdc7 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a0a:	20ff      	movs	r0, #255	; 0xff
 8000a0c:	f7ff fdc4 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	f7ff fdc1 	bl	8000598 <sendData>
 sendData(0xBA);
 8000a16:	20ba      	movs	r0, #186	; 0xba
 8000a18:	f7ff fdbe 	bl	8000598 <sendData>
 sendData(0x0A);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f7ff fdbb 	bl	8000598 <sendData>
 sendData(0xBF);
 8000a22:	20bf      	movs	r0, #191	; 0xbf
 8000a24:	f7ff fdb8 	bl	8000598 <sendData>
 sendData(0x45);
 8000a28:	2045      	movs	r0, #69	; 0x45
 8000a2a:	f7ff fdb5 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	f7ff fdb2 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	f7ff fdaf 	bl	8000598 <sendData>
 sendData(0x54);
 8000a3a:	2054      	movs	r0, #84	; 0x54
 8000a3c:	f7ff fdac 	bl	8000598 <sendData>
 sendData(0xFB);
 8000a40:	20fb      	movs	r0, #251	; 0xfb
 8000a42:	f7ff fda9 	bl	8000598 <sendData>
 sendData(0xA0);
 8000a46:	20a0      	movs	r0, #160	; 0xa0
 8000a48:	f7ff fda6 	bl	8000598 <sendData>
 sendData(0xAB);
 8000a4c:	20ab      	movs	r0, #171	; 0xab
 8000a4e:	f7ff fda3 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	f7ff fda0 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	f7ff fd9d 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	f7ff fd9a 	bl	8000598 <sendData>

 sendCommand(0xEF);
 8000a64:	20ef      	movs	r0, #239	; 0xef
 8000a66:	f7ff fd6f 	bl	8000548 <sendCommand>
 sendData(0x10);
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f7ff fd94 	bl	8000598 <sendData>
 sendData(0x0D);
 8000a70:	200d      	movs	r0, #13
 8000a72:	f7ff fd91 	bl	8000598 <sendData>
 sendData(0x04);
 8000a76:	2004      	movs	r0, #4
 8000a78:	f7ff fd8e 	bl	8000598 <sendData>
 sendData(0x08);
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	f7ff fd8b 	bl	8000598 <sendData>
 sendData(0x3F);
 8000a82:	203f      	movs	r0, #63	; 0x3f
 8000a84:	f7ff fd88 	bl	8000598 <sendData>
 sendData(0x1F);
 8000a88:	201f      	movs	r0, #31
 8000a8a:	f7ff fd85 	bl	8000598 <sendData>

 sendCommand(0xFF);
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	f7ff fd5a 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000a94:	2077      	movs	r0, #119	; 0x77
 8000a96:	f7ff fd7f 	bl	8000598 <sendData>
 sendData(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fd7c 	bl	8000598 <sendData>
 sendData(0x00);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fd79 	bl	8000598 <sendData>
 sendData(0x00);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fd76 	bl	8000598 <sendData>
 sendData(0x13);
 8000aac:	2013      	movs	r0, #19
 8000aae:	f7ff fd73 	bl	8000598 <sendData>

 sendCommand(0xEF);
 8000ab2:	20ef      	movs	r0, #239	; 0xef
 8000ab4:	f7ff fd48 	bl	8000548 <sendCommand>
 sendData(0x08);
 8000ab8:	2008      	movs	r0, #8
 8000aba:	f7ff fd6d 	bl	8000598 <sendData>

 sendCommand(0xFF);
 8000abe:	20ff      	movs	r0, #255	; 0xff
 8000ac0:	f7ff fd42 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000ac4:	2077      	movs	r0, #119	; 0x77
 8000ac6:	f7ff fd67 	bl	8000598 <sendData>
 sendData(0x01);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fd64 	bl	8000598 <sendData>
 sendData(0x00);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fd61 	bl	8000598 <sendData>
 sendData(0x00);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fd5e 	bl	8000598 <sendData>
 sendData(0x00);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fd5b 	bl	8000598 <sendData>
  sendCommand (0xD2);
WriteData (0x08);
#endif
/////////////////Bring up the internal test picture///////////////////////////////////
#endif
sendCommand(0x11);
 8000ae2:	2011      	movs	r0, #17
 8000ae4:	f7ff fd30 	bl	8000548 <sendCommand>

HAL_Delay(120);
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f001 fd8f 	bl	800260c <HAL_Delay>

sendCommand(0x29);
 8000aee:	2029      	movs	r0, #41	; 0x29
 8000af0:	f7ff fd2a 	bl	8000548 <sendCommand>

sendCommand(0x36);
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f7ff fd27 	bl	8000548 <sendCommand>
sendData(0x00);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fd4c 	bl	8000598 <sendData>

sendCommand(0x3A);
 8000b00:	203a      	movs	r0, #58	; 0x3a
 8000b02:	f7ff fd21 	bl	8000548 <sendCommand>
sendData(0x60);//0x60 18bit 0x50 16bit
 8000b06:	2060      	movs	r0, #96	; 0x60
 8000b08:	f7ff fd46 	bl	8000598 <sendData>
sendCommand(0x13);
 8000b0c:	2013      	movs	r0, #19
 8000b0e:	f7ff fd1b 	bl	8000548 <sendCommand>
//sendCommand(0x23);
	return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <fmc_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SDRAM_START_ADDR 0xC0000000
#define SDRAM_SIZE 0x200000

void fmc_init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
	  FMC_SDRAM_CommandTypeDef Command;
	  HAL_StatusTypeDef status;
	  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
	  /* Step 3: Configure a clock configuration enable command */
	   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
	   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000b22:	2310      	movs	r3, #16
 8000b24:	60bb      	str	r3, [r7, #8]
	   Command.AutoRefreshNumber      = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
	   Command.ModeRegisterDefinition = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	   status = HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b34:	4619      	mov	r1, r3
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <fmc_init+0x80>)
 8000b38:	f005 f89e 	bl	8005c78 <HAL_SDRAM_SendCommand>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	75fb      	strb	r3, [r7, #23]
	   HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000b40:	2001      	movs	r0, #1
 8000b42:	f001 fd63 	bl	800260c <HAL_Delay>
	   /* Step 5: Configure a PALL (precharge all) command */
	   Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000b46:	2302      	movs	r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b50:	4619      	mov	r1, r3
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <fmc_init+0x80>)
 8000b54:	f005 f890 	bl	8005c78 <HAL_SDRAM_SendCommand>
	   /* Step 6: Configure an Auto Refresh command */
	   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
	   Command.AutoRefreshNumber      = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <fmc_init+0x80>)
 8000b6a:	f005 f885 	bl	8005c78 <HAL_SDRAM_SendCommand>
	   /* Step 7: Program the external memory mode register */
	   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000b6e:	2304      	movs	r3, #4
 8000b70:	607b      	str	r3, [r7, #4]
	   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000b72:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b76:	613b      	str	r3, [r7, #16]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <fmc_init+0x80>)
 8000b82:	f005 f879 	bl	8005c78 <HAL_SDRAM_SendCommand>
	   /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	   /* Set the device refresh rate
	    * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
	            = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1105);
 8000b86:	f240 4151 	movw	r1, #1105	; 0x451
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <fmc_init+0x80>)
 8000b8c:	f005 f8a9 	bl	8005ce2 <HAL_SDRAM_ProgramRefreshRate>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002f4 	.word	0x200002f4

08000b9c <fmc_test>:

void fmc_test(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e007      	b.n	8000bb8 <fmc_test+0x1c>
		*(__IO uint8_t*) (SDRAM_START_ADDR + i) = 0x14;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000bae:	2214      	movs	r2, #20
 8000bb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000bbe:	dbf3      	blt.n	8000ba8 <fmc_test+0xc>
	}
	return;
 8000bc0:	bf00      	nop

}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f001 fcbe 	bl	8002552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f83b 	bl	8000c50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fb11 	bl	8001200 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bde:	f000 f8a3 	bl	8000d28 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000be2:	f000 f8f3 	bl	8000dcc <MX_CAN1_Init>
  MX_CAN2_Init();
 8000be6:	f000 f927 	bl	8000e38 <MX_CAN2_Init>
  MX_FMC_Init();
 8000bea:	f000 fab7 	bl	800115c <MX_FMC_Init>
  MX_I2C4_Init();
 8000bee:	f000 f959 	bl	8000ea4 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000bf2:	f000 fa19 	bl	8001028 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000bf6:	f000 fa43 	bl	8001080 <MX_SPI1_Init>
  MX_UART4_Init();
 8000bfa:	f000 fa7f 	bl	80010fc <MX_UART4_Init>
  MX_LTDC_Init();
 8000bfe:	f000 f991 	bl	8000f24 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c02:	f7ff fcf5 	bl	80005f0 <lcd_init>
  fmc_init();
 8000c06:	f7ff ff87 	bl	8000b18 <fmc_init>
  HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f001 fcfe 	bl	800260c <HAL_Delay>
  fmc_test();
 8000c10:	f7ff ffc4 	bl	8000b9c <fmc_test>
  char* test = "Test to mem";
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <main+0x80>)
 8000c16:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status;

  status = CSP_QUADSPI_Init();
 8000c18:	f000 fbba 	bl	8001390 <CSP_QUADSPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_Erase_Chip();
 8000c20:	f000 fbec 	bl	80013fc <CSP_QSPI_Erase_Chip>
 8000c24:	4603      	mov	r3, r0
 8000c26:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_WriteMemory((uint8_t*) test, 0x00130, strlen(test));
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff faed 	bl	8000208 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 fd8c 	bl	8001754 <CSP_QSPI_WriteMemory>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_EnableMemoryMappedMode();
 8000c40:	f000 fe1c 	bl	800187c <CSP_QSPI_EnableMemoryMappedMode>
 8000c44:	4603      	mov	r3, r0
 8000c46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x7c>
 8000c4a:	bf00      	nop
 8000c4c:	08006ff0 	.word	0x08006ff0

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f006 f9b2 	bl	8006fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cbc:	23d8      	movs	r3, #216	; 0xd8
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fee7 	bl	8004aa0 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 fb28 	bl	800132c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cdc:	f003 f93c 	bl	8003f58 <HAL_PWREx_EnableOverDrive>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce6:	f000 fb21 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2107      	movs	r1, #7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 f96d 	bl	8004fe8 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d14:	f000 fb0a 	bl	800132c <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3750      	adds	r7, #80	; 0x50
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <MX_ADC1_Init+0x9c>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0xa0>)
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d8a:	f001 fc63 	bl	8002654 <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 faca 	bl	800132c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000daa:	f001 fc97 	bl	80026dc <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000db4:	f000 faba 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000028 	.word	0x20000028
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	0f000001 	.word	0x0f000001

08000dcc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <MX_CAN1_Init+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000e1c:	f001 feae 	bl	8002b7c <HAL_CAN_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e26:	f000 fa81 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000070 	.word	0x20000070
 8000e34:	40006400 	.word	0x40006400

08000e38 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <MX_CAN2_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e44:	2210      	movs	r2, #16
 8000e46:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_CAN2_Init+0x64>)
 8000e88:	f001 fe78 	bl	8002b7c <HAL_CAN_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000e92:	f000 fa4b 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000098 	.word	0x20000098
 8000ea0:	40006800 	.word	0x40006800

08000ea4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_I2C4_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_I2C4_Init+0x7c>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ee0:	f002 fb9c 	bl	800361c <HAL_I2C_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000eea:	f000 fa1f 	bl	800132c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000ef2:	f002 fc2f 	bl	8003754 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000efc:	f000 fa16 	bl	800132c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_I2C4_Init+0x74>)
 8000f04:	f002 fc71 	bl	80037ea <HAL_I2CEx_ConfigDigitalFilter>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 fa0d 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000c0 	.word	0x200000c0
 8000f1c:	40006000 	.word	0x40006000
 8000f20:	20404768 	.word	0x20404768

08000f24 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2234      	movs	r2, #52	; 0x34
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 f849 	bl	8006fc8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f38:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <MX_LTDC_Init+0x100>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f56:	2207      	movs	r2, #7
 8000f58:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f62:	220e      	movs	r2, #14
 8000f64:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 14;
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f68:	220e      	movs	r2, #14
 8000f6a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 494;
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f6e:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 494;
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f76:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 500;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 500;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_LTDC_Init+0xfc>)
 8000fa6:	f002 fc6d 	bl	8003884 <HAL_LTDC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fb0:	f000 f9bc 	bl	800132c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000fb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fbc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fc6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xc0000000;
 8000fde:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000fe4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000fea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000ff0:	23ff      	movs	r3, #255	; 0xff
 8000ff2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000ffc:	23ff      	movs	r3, #255	; 0xff
 8000ffe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_LTDC_Init+0xfc>)
 800100a:	f002 fdcd 	bl	8003ba8 <HAL_LTDC_ConfigLayer>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001014:	f000 f98a 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3738      	adds	r7, #56	; 0x38
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000114 	.word	0x20000114
 8001024:	40016800 	.word	0x40016800

08001028 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_QUADSPI_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_QUADSPI_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 16-1;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001034:	220f      	movs	r2, #15
 8001036:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_QUADSPI_Init+0x50>)
 800103a:	2204      	movs	r2, #4
 800103c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001046:	2219      	movs	r2, #25
 8001048:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_QUADSPI_Init+0x50>)
 800104c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001050:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_QUADSPI_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_QUADSPI_Init+0x50>)
 8001066:	f002 ffc7 	bl	8003ff8 <HAL_QSPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f95c 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001bc 	.word	0x200001bc
 800107c:	a0001000 	.word	0xa0001000

08001080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_SPI1_Init+0x74>)
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <MX_SPI1_Init+0x78>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_SPI1_Init+0x74>)
 800108c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_SPI1_Init+0x74>)
 8001094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001098:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_SPI1_Init+0x74>)
 800109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010b8:	2230      	movs	r2, #48	; 0x30
 80010ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010dc:	2208      	movs	r2, #8
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_SPI1_Init+0x74>)
 80010e2:	f004 fe26 	bl	8005d32 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 f91e 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000208 	.word	0x20000208
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_UART4_Init+0x58>)
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <MX_UART4_Init+0x5c>)
 8001104:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 10400;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_UART4_Init+0x58>)
 8001108:	f642 02a0 	movw	r2, #10400	; 0x28a0
 800110c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_UART4_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_UART4_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_UART4_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_UART4_Init+0x58>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_UART4_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_UART4_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_UART4_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_UART4_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_UART4_Init+0x58>)
 8001140:	f005 f9a0 	bl	8006484 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800114a:	f000 f8ef 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000026c 	.word	0x2000026c
 8001158:	40004c00 	.word	0x40004c00

0800115c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_FMC_Init+0x9c>)
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <MX_FMC_Init+0xa0>)
 8001178:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_FMC_Init+0x9c>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_FMC_Init+0x9c>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_FMC_Init+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_FMC_Init+0x9c>)
 800118e:	2210      	movs	r2, #16
 8001190:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_FMC_Init+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_FMC_Init+0x9c>)
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_FMC_Init+0x9c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_FMC_Init+0x9c>)
 80011a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80011ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_FMC_Init+0x9c>)
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_FMC_Init+0x9c>)
 80011b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80011c6:	2306      	movs	r3, #6
 80011c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80011ca:	2309      	movs	r3, #9
 80011cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 80011ce:	2305      	movs	r3, #5
 80011d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_FMC_Init+0x9c>)
 80011e0:	f004 fd16 	bl	8005c10 <HAL_SDRAM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80011ea:	f000 f89f 	bl	800132c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002f4 	.word	0x200002f4
 80011fc:	a0000140 	.word	0xa0000140

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <MX_GPIO_Init+0x120>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a41      	ldr	r2, [pc, #260]	; (8001320 <MX_GPIO_Init+0x120>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_GPIO_Init+0x120>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <MX_GPIO_Init+0x120>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a3b      	ldr	r2, [pc, #236]	; (8001320 <MX_GPIO_Init+0x120>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <MX_GPIO_Init+0x120>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <MX_GPIO_Init+0x120>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <MX_GPIO_Init+0x120>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_GPIO_Init+0x120>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_GPIO_Init+0x120>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <MX_GPIO_Init+0x120>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_GPIO_Init+0x120>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_GPIO_Init+0x120>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <MX_GPIO_Init+0x120>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <MX_GPIO_Init+0x120>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_GPIO_Init+0x120>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_GPIO_Init+0x120>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_GPIO_Init+0x120>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_GPIO_Init+0x120>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <MX_GPIO_Init+0x120>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_GPIO_Init+0x120>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_GPIO_Init+0x120>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <MX_GPIO_Init+0x120>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_GPIO_Init+0x120>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_NRST_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2190      	movs	r1, #144	; 0x90
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_GPIO_Init+0x124>)
 80012dc:	f002 f984 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOST_SENSE_Pin */
  GPIO_InitStruct.Pin = HOST_SENSE_Pin;
 80012e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HOST_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_GPIO_Init+0x128>)
 80012f6:	f001 febf 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_NRST_Pin;
 80012fa:	2390      	movs	r3, #144	; 0x90
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_GPIO_Init+0x124>)
 8001312:	f001 feb1 	bl	8003078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001316:	bf00      	nop
 8001318:	3738      	adds	r7, #56	; 0x38
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400
 8001328:	40020c00 	.word	0x40020c00

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <MX_QUADSPI_Init>:


/* USER CODE BEGIN 1 */

static void MX_QUADSPI_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_QUADSPI_Init+0x50>)
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <MX_QUADSPI_Init+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4-1;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001344:	2203      	movs	r2, #3
 8001346:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_QUADSPI_Init+0x50>)
 800134a:	2204      	movs	r2, #4
 800134c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001350:	2210      	movs	r2, #16
 8001352:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001356:	2219      	movs	r2, #25
 8001358:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_QUADSPI_Init+0x50>)
 800135c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001360:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_QUADSPI_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_QUADSPI_Init+0x50>)
 8001376:	f002 fe3f 	bl	8003ff8 <HAL_QSPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001380:	f7ff ffd4 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200001bc 	.word	0x200001bc
 800138c:	a0001000 	.word	0xa0001000

08001390 <CSP_QUADSPI_Init>:


/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <CSP_QUADSPI_Init+0x64>)
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <CSP_QUADSPI_Init+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 800139a:	4816      	ldr	r0, [pc, #88]	; (80013f4 <CSP_QUADSPI_Init+0x64>)
 800139c:	f002 fea8 	bl	80040f0 <HAL_QSPI_DeInit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e021      	b.n	80013ee <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 80013aa:	f7ff ffc5 	bl	8001338 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 80013ae:	f000 fa99 	bl	80018e4 <QSPI_ResetChip>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e018      	b.n	80013ee <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f001 f925 	bl	800260c <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80013c2:	f000 f857 	bl	8001474 <QSPI_AutoPollingMemReady>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e00e      	b.n	80013ee <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 80013d0:	f000 f88e 	bl	80014f0 <QSPI_WriteEnable>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 80013de:	f000 f8d7 	bl	8001590 <QSPI_Configuration>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001bc 	.word	0x200001bc
 80013f8:	a0001000 	.word	0xa0001000

080013fc <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;


	if (QSPI_WriteEnable() != HAL_OK) {
 8001402:	f000 f875 	bl	80014f0 <QSPI_WriteEnable>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e02b      	b.n	8001468 <CSP_QSPI_Erase_Chip+0x6c>
	}


	/* Erasing Sequence --------------------------------- */
	sCommand.Instruction = CHIP_ERASE_CMD;
 8001410:	23c7      	movs	r3, #199	; 0xc7
 8001412:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]


	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001440:	463b      	mov	r3, r7
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4619      	mov	r1, r3
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <CSP_QSPI_Erase_Chip+0x74>)
 800144a:	f002 fe75 	bl	8004138 <HAL_QSPI_Command>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <CSP_QSPI_Erase_Chip+0x5c>
			!= HAL_OK) {
		return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e007      	b.n	8001468 <CSP_QSPI_Erase_Chip+0x6c>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001458:	f000 f80c 	bl	8001474 <QSPI_AutoPollingMemReady>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <CSP_QSPI_Erase_Chip+0x6a>
				return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <CSP_QSPI_Erase_Chip+0x6c>
			}

	return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001bc 	.word	0x200001bc

08001474 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001480:	2305      	movs	r3, #5
 8001482:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressSize = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a4:	2300      	movs	r3, #0
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a8:	2300      	movs	r3, #0
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 80014b0:	2301      	movs	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80014bc:	2310      	movs	r3, #16
 80014be:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80014c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c4:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80014c6:	463a      	mov	r2, r7
 80014c8:	f107 0118 	add.w	r1, r7, #24
 80014cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <QSPI_AutoPollingMemReady+0x78>)
 80014d2:	f002 ffc8 	bl	8004466 <HAL_QSPI_AutoPolling>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <QSPI_AutoPollingMemReady+0x6c>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <QSPI_AutoPollingMemReady+0x6e>
	}

	return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3750      	adds	r7, #80	; 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001bc 	.word	0x200001bc

080014f0 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80014fc:	2306      	movs	r3, #6
 80014fe:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001514:	2300      	movs	r3, #0
 8001516:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001518:	2300      	movs	r3, #0
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4619      	mov	r1, r3
 8001526:	4819      	ldr	r0, [pc, #100]	; (800158c <QSPI_WriteEnable+0x9c>)
 8001528:	f002 fe06 	bl	8004138 <HAL_QSPI_Command>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e026      	b.n	8001584 <QSPI_WriteEnable+0x94>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001536:	2302      	movs	r3, #2
 8001538:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 800153a:	2302      	movs	r3, #2
 800153c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001546:	2310      	movs	r3, #16
 8001548:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800154a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154e:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001550:	2305      	movs	r3, #5
 8001552:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressSize = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001568:	463a      	mov	r2, r7
 800156a:	f107 0118 	add.w	r1, r7, #24
 800156e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <QSPI_WriteEnable+0x9c>)
 8001574:	f002 ff77 	bl	8004466 <HAL_QSPI_AutoPolling>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <QSPI_WriteEnable+0x92>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <QSPI_WriteEnable+0x94>
	}

	return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3750      	adds	r7, #80	; 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001bc 	.word	0x200001bc

08001590 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 80015a0:	2305      	movs	r3, #5
 80015a2:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80015a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 80015aa:	23c0      	movs	r3, #192	; 0xc0
 80015ac:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80015b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4619      	mov	r1, r3
 80015da:	4843      	ldr	r0, [pc, #268]	; (80016e8 <QSPI_Configuration+0x158>)
 80015dc:	f002 fdac 	bl	8004138 <HAL_QSPI_Command>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <QSPI_Configuration+0x5a>
			!= HAL_OK) {
		return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07a      	b.n	80016e0 <QSPI_Configuration+0x150>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4619      	mov	r1, r3
 80015f2:	483d      	ldr	r0, [pc, #244]	; (80016e8 <QSPI_Configuration+0x158>)
 80015f4:	f002 fe95 	bl	8004322 <HAL_QSPI_Receive>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <QSPI_Configuration+0x72>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06e      	b.n	80016e0 <QSPI_Configuration+0x150>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001606:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 8001608:	2315      	movs	r3, #21
 800160a:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001626:	2300      	movs	r3, #0
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4619      	mov	r1, r3
 8001638:	482b      	ldr	r0, [pc, #172]	; (80016e8 <QSPI_Configuration+0x158>)
 800163a:	f002 fd7d 	bl	8004138 <HAL_QSPI_Command>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <QSPI_Configuration+0xb8>
			!= HAL_OK) {
		return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04b      	b.n	80016e0 <QSPI_Configuration+0x150>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	3301      	adds	r3, #1
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4619      	mov	r1, r3
 8001652:	4825      	ldr	r0, [pc, #148]	; (80016e8 <QSPI_Configuration+0x158>)
 8001654:	f002 fe65 	bl	8004322 <HAL_QSPI_Receive>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <QSPI_Configuration+0xd2>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e03e      	b.n	80016e0 <QSPI_Configuration+0x150>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	b2db      	uxtb	r3, r3
 800166a:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001672:	b2db      	uxtb	r3, r3
 8001674:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167a:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800168e:	2300      	movs	r3, #0
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 8001692:	2301      	movs	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800169a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <QSPI_Configuration+0x158>)
 80016b4:	f002 fd40 	bl	8004138 <HAL_QSPI_Command>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <QSPI_Configuration+0x132>
			!= HAL_OK) {
		return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <QSPI_Configuration+0x150>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <QSPI_Configuration+0x158>)
 80016cc:	f002 fd92 	bl	80041f4 <HAL_QSPI_Transmit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <QSPI_Configuration+0x14e>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80016d6:	f7ff fe29 	bl	800132c <Error_Handler>
		return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <QSPI_Configuration+0x150>
	}
	return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3740      	adds	r7, #64	; 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200001bc 	.word	0x200001bc

080016ec <CSP_QSPI_EmptyBuf>:
	}

	return HAL_OK;
}

static uint8_t CSP_QSPI_EmptyBuf(uint32_t page) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCommand;

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80016f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f8:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001702:	2300      	movs	r3, #0
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001706:	2300      	movs	r3, #0
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = PROG_EXEC;
 800170a:	2310      	movs	r3, #16
 800170c:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800170e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize = QSPI_ADDRESS_16_BITS;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	617b      	str	r3, [r7, #20]
	sCommand.Address = page;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]
	sCommand.DataMode = QSPI_DATA_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DummyCycles = 8;
 8001726:	2308      	movs	r3, #8
 8001728:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4619      	mov	r1, r3
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <CSP_QSPI_EmptyBuf+0x64>)
 8001736:	f002 fcff 	bl	8004138 <HAL_QSPI_Command>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <CSP_QSPI_EmptyBuf+0x58>
				!= HAL_OK) {
		return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <CSP_QSPI_EmptyBuf+0x5a>
	}
	return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3740      	adds	r7, #64	; 0x40
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001bc 	.word	0x200001bc

08001754 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
 8001764:	e003      	b.n	800176e <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8001766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001768:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800176c:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 800176e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d9f7      	bls.n	8001766 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8001776:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 800177e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d901      	bls.n	800178a <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_16_BITS;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80017aa:	2300      	movs	r3, #0
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 80017b2:	2332      	movs	r3, #50	; 0x32
 80017b4:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80017b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 80017bc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 80017ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d0:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 80017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e047      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 80017e0:	f7ff fe86 	bl	80014f0 <QSPI_WriteEnable>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e040      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4619      	mov	r1, r3
 80017f8:	481f      	ldr	r0, [pc, #124]	; (8001878 <CSP_QSPI_WriteMemory+0x124>)
 80017fa:	f002 fc9d 	bl	8004138 <HAL_QSPI_Command>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e033      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <CSP_QSPI_WriteMemory+0x124>)
 8001810:	f002 fcf0 	bl	80041f4 <HAL_QSPI_Transmit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e028      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}

		if (CSP_QSPI_EmptyBuf(current_addr) != HAL_OK) {
 800181e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001820:	f7ff ff64 	bl	80016ec <CSP_QSPI_EmptyBuf>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <CSP_QSPI_WriteMemory+0xda>
			return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e020      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}
		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800182e:	f7ff fe21 	bl	8001474 <QSPI_AutoPollingMemReady>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <CSP_QSPI_WriteMemory+0xe8>
			return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e019      	b.n	8001870 <CSP_QSPI_WriteMemory+0x11c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 800183c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	4413      	add	r3, r2
 8001842:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 800184c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800184e:	f503 7300 	add.w	r3, r3, #512	; 0x200
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8001852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001854:	429a      	cmp	r2, r3
 8001856:	d203      	bcs.n	8001860 <CSP_QSPI_WriteMemory+0x10c>
 8001858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800185a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	e001      	b.n	8001864 <CSP_QSPI_WriteMemory+0x110>
 8001860:	f44f 7300 	mov.w	r3, #512	; 0x200
		current_size =
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 8001866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186a:	429a      	cmp	r2, r3
 800186c:	d9af      	bls.n	80017ce <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 800186e:	2300      	movs	r3, #0

}
 8001870:	4618      	mov	r0, r3
 8001872:	3758      	adds	r7, #88	; 0x58
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200001bc 	.word	0x200001bc

0800187c <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_16_BITS;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001896:	2300      	movs	r3, #0
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800189a:	2300      	movs	r3, #0
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800189e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
 80018a4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 80018b2:	236b      	movs	r3, #107	; 0x6b
 80018b4:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 80018b6:	2308      	movs	r3, #8
 80018b8:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 80018be:	463a      	mov	r2, r7
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 80018c8:	f002 fe44 	bl	8004554 <HAL_QSPI_MemoryMapped>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3740      	adds	r7, #64	; 0x40
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200001bc 	.word	0x200001bc

080018e4 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b090      	sub	sp, #64	; 0x40
 80018e8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80018f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001906:	2300      	movs	r3, #0
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800190a:	2366      	movs	r3, #102	; 0x66
 800190c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4619      	mov	r1, r3
 8001926:	486f      	ldr	r0, [pc, #444]	; (8001ae4 <QSPI_ResetChip+0x200>)
 8001928:	f002 fc06 	bl	8004138 <HAL_QSPI_Command>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0d2      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001936:	2300      	movs	r3, #0
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193a:	e003      	b.n	8001944 <QSPI_ResetChip+0x60>
		__NOP();
 800193c:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	3301      	adds	r3, #1
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001946:	2b2e      	cmp	r3, #46	; 0x2e
 8001948:	d9f8      	bls.n	800193c <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001954:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001962:	2300      	movs	r3, #0
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8001966:	2399      	movs	r3, #153	; 0x99
 8001968:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4619      	mov	r1, r3
 8001982:	4858      	ldr	r0, [pc, #352]	; (8001ae4 <QSPI_ResetChip+0x200>)
 8001984:	f002 fbd8 	bl	8004138 <HAL_QSPI_Command>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0a4      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8001992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001996:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 80019ae:	2366      	movs	r3, #102	; 0x66
 80019b0:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4619      	mov	r1, r3
 80019ca:	4846      	ldr	r0, [pc, #280]	; (8001ae4 <QSPI_ResetChip+0x200>)
 80019cc:	f002 fbb4 	bl	8004138 <HAL_QSPI_Command>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <QSPI_ResetChip+0xf6>
			!= HAL_OK) {
		return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e080      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019de:	e003      	b.n	80019e8 <QSPI_ResetChip+0x104>
		__NOP();
 80019e0:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80019e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e4:	3301      	adds	r3, #1
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ea:	2b2e      	cmp	r3, #46	; 0x2e
 80019ec:	d9f8      	bls.n	80019e0 <QSPI_ResetChip+0xfc>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 80019ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8001a0a:	2399      	movs	r3, #153	; 0x99
 8001a0c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4619      	mov	r1, r3
 8001a26:	482f      	ldr	r0, [pc, #188]	; (8001ae4 <QSPI_ResetChip+0x200>)
 8001a28:	f002 fb86 	bl	8004138 <HAL_QSPI_Command>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <QSPI_ResetChip+0x152>
			!= HAL_OK) {
		return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e052      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3a:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8001a52:	2366      	movs	r3, #102	; 0x66
 8001a54:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <QSPI_ResetChip+0x200>)
 8001a70:	f002 fb62 	bl	8004138 <HAL_QSPI_Command>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <QSPI_ResetChip+0x19a>
			!= HAL_OK) {
		return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e02e      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a82:	e003      	b.n	8001a8c <QSPI_ResetChip+0x1a8>
		__NOP();
 8001a84:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001a90:	d9f8      	bls.n	8001a84 <QSPI_ResetChip+0x1a0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a96:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8001aae:	2399      	movs	r3, #153	; 0x99
 8001ab0:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <QSPI_ResetChip+0x200>)
 8001acc:	f002 fb34 	bl	8004138 <HAL_QSPI_Command>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <QSPI_ResetChip+0x1f6>
			!= HAL_OK) {
		return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <QSPI_ResetChip+0x1f8>
	}

	return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3740      	adds	r7, #64	; 0x40
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200001bc 	.word	0x200001bc

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_MspInit+0x44>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_MspInit+0x44>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_MspInit+0x44>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_MspInit+0x44>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_ADC_MspInit+0x74>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d123      	bne.n	8001b9a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_ADC_MspInit+0x78>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8001b82:	2304      	movs	r3, #4
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_ADC_MspInit+0x7c>)
 8001b96:	f001 fa6f 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_CAN_MspInit+0x118>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d132      	bne.n	8001c38 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10b      	bne.n	8001bfc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c26:	2309      	movs	r3, #9
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4828      	ldr	r0, [pc, #160]	; (8001cd4 <HAL_CAN_MspInit+0x124>)
 8001c32:	f001 fa21 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c36:	e042      	b.n	8001cbe <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_CAN_MspInit+0x128>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13d      	bne.n	8001cbe <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_CAN_MspInit+0x11c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10b      	bne.n	8001c84 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_CAN_MspInit+0x120>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001cae:	2309      	movs	r3, #9
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <HAL_CAN_MspInit+0x12c>)
 8001cba:	f001 f9dd 	bl	8003078 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	20000328 	.word	0x20000328
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40006800 	.word	0x40006800
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0aa      	sub	sp, #168	; 0xa8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2284      	movs	r2, #132	; 0x84
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 f961 	bl	8006fc8 <memset>
  if(hi2c->Instance==I2C4)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13d      	bne.n	8001d8c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fb85 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001d2c:	f7ff fafe 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d62:	2304      	movs	r3, #4
 8001d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480b      	ldr	r0, [pc, #44]	; (8001d9c <HAL_I2C_MspInit+0xbc>)
 8001d70:	f001 f982 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	37a8      	adds	r7, #168	; 0xa8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40006000 	.word	0x40006000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020c00 	.word	0x40020c00

08001da0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0b0      	sub	sp, #192	; 0xc0
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbc:	2284      	movs	r2, #132	; 0x84
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 f901 	bl	8006fc8 <memset>
  if(hltdc->Instance==LTDC)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a98      	ldr	r2, [pc, #608]	; (800202c <HAL_LTDC_MspInit+0x28c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f040 8128 	bne.w	8002022 <HAL_LTDC_MspInit+0x282>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001dd6:	2332      	movs	r3, #50	; 0x32
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001dde:	2302      	movs	r3, #2
 8001de0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001de2:	2300      	movs	r3, #0
 8001de4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fb1c 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001dfe:	f7ff fa95 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a8a      	ldr	r2, [pc, #552]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a84      	ldr	r2, [pc, #528]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e20:	f043 0320 	orr.w	r3, r3, #32
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a7e      	ldr	r2, [pc, #504]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e7a:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_LTDC_MspInit+0x290>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec4:	230e      	movs	r3, #14
 8001ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4858      	ldr	r0, [pc, #352]	; (8002034 <HAL_LTDC_MspInit+0x294>)
 8001ed2:	f001 f8d1 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001ed6:	23c1      	movs	r3, #193	; 0xc1
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eee:	230e      	movs	r3, #14
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ef8:	4619      	mov	r1, r3
 8001efa:	484f      	ldr	r0, [pc, #316]	; (8002038 <HAL_LTDC_MspInit+0x298>)
 8001efc:	f001 f8bc 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001f00:	237a      	movs	r3, #122	; 0x7a
 8001f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f18:	230e      	movs	r3, #14
 8001f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f22:	4619      	mov	r1, r3
 8001f24:	4845      	ldr	r0, [pc, #276]	; (800203c <HAL_LTDC_MspInit+0x29c>)
 8001f26:	f001 f8a7 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f42:	2309      	movs	r3, #9
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <HAL_LTDC_MspInit+0x2a0>)
 8001f50:	f001 f892 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001f54:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f6e:	230e      	movs	r3, #14
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4831      	ldr	r0, [pc, #196]	; (8002040 <HAL_LTDC_MspInit+0x2a0>)
 8001f7c:	f001 f87c 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001f80:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f9a:	230e      	movs	r3, #14
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4827      	ldr	r0, [pc, #156]	; (8002044 <HAL_LTDC_MspInit+0x2a4>)
 8001fa8:	f001 f866 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001fac:	2348      	movs	r3, #72	; 0x48
 8001fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fce:	4619      	mov	r1, r3
 8001fd0:	481d      	ldr	r0, [pc, #116]	; (8002048 <HAL_LTDC_MspInit+0x2a8>)
 8001fd2:	f001 f851 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001fd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ff0:	2309      	movs	r3, #9
 8001ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <HAL_LTDC_MspInit+0x2a4>)
 8001ffe:	f001 f83b 	bl	8003078 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2058      	movs	r0, #88	; 0x58
 8002008:	f000 ff8f 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800200c:	2058      	movs	r0, #88	; 0x58
 800200e:	f000 ffa8 	bl	8002f62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2059      	movs	r0, #89	; 0x59
 8002018:	f000 ff87 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800201c:	2059      	movs	r0, #89	; 0x59
 800201e:	f000 ffa0 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	37c0      	adds	r7, #192	; 0xc0
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40016800 	.word	0x40016800
 8002030:	40023800 	.word	0x40023800
 8002034:	40021400 	.word	0x40021400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40021800 	.word	0x40021800
 8002048:	40020c00 	.word	0x40020c00

0800204c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_QSPI_MspInit+0x130>)
 800206a:	4293      	cmp	r3, r2
 800206c:	f040 8081 	bne.w	8002172 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6393      	str	r3, [r2, #56]	; 0x38
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a0:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a36      	ldr	r2, [pc, #216]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4a30      	ldr	r2, [pc, #192]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	6313      	str	r3, [r2, #48]	; 0x30
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_QSPI_MspInit+0x134>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020d0:	2304      	movs	r3, #4
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020e0:	2309      	movs	r3, #9
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_QSPI_MspInit+0x138>)
 80020ec:	f000 ffc4 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f0:	2340      	movs	r3, #64	; 0x40
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002100:	2309      	movs	r3, #9
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	481f      	ldr	r0, [pc, #124]	; (8002188 <HAL_QSPI_MspInit+0x13c>)
 800210c:	f000 ffb4 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002122:	230a      	movs	r3, #10
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	4816      	ldr	r0, [pc, #88]	; (8002188 <HAL_QSPI_MspInit+0x13c>)
 800212e:	f000 ffa3 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002132:	2304      	movs	r3, #4
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002142:	2309      	movs	r3, #9
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <HAL_QSPI_MspInit+0x140>)
 800214e:	f000 ff93 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002152:	2340      	movs	r3, #64	; 0x40
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002162:	230a      	movs	r3, #10
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <HAL_QSPI_MspInit+0x140>)
 800216e:	f000 ff83 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3730      	adds	r7, #48	; 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	a0001000 	.word	0xa0001000
 8002180:	40023800 	.word	0x40023800
 8002184:	40021000 	.word	0x40021000
 8002188:	40021400 	.word	0x40021400
 800218c:	40020400 	.word	0x40020400

08002190 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_QSPI_MspDeInit+0x40>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d112      	bne.n	80021c8 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_QSPI_MspDeInit+0x44>)
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_QSPI_MspDeInit+0x44>)
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80021ae:	2104      	movs	r1, #4
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <HAL_QSPI_MspDeInit+0x48>)
 80021b2:	f001 f90d 	bl	80033d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9);
 80021b6:	f44f 7150 	mov.w	r1, #832	; 0x340
 80021ba:	4808      	ldr	r0, [pc, #32]	; (80021dc <HAL_QSPI_MspDeInit+0x4c>)
 80021bc:	f001 f908 	bl	80033d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 80021c0:	2144      	movs	r1, #68	; 0x44
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <HAL_QSPI_MspDeInit+0x50>)
 80021c4:	f001 f904 	bl	80033d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	a0001000 	.word	0xa0001000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40020400 	.word	0x40020400

080021e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_SPI_MspInit+0x7c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d127      	bne.n	8002256 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_SPI_MspInit+0x80>)
 800220c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_SPI_MspInit+0x80>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002236:	2328      	movs	r3, #40	; 0x28
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002246:	2305      	movs	r3, #5
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_SPI_MspInit+0x84>)
 8002252:	f000 ff11 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40013000 	.word	0x40013000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020400 	.word	0x40020400

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0aa      	sub	sp, #168	; 0xa8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	2284      	movs	r2, #132	; 0x84
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f004 fe9b 	bl	8006fc8 <memset>
  if(huart->Instance==UART4)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_UART_MspInit+0xb4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d13c      	bne.n	8002316 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800229c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 f8c0 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022b6:	f7ff f839 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_UART_MspInit+0xb8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002304:	2308      	movs	r3, #8
 8002306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_UART_MspInit+0xbc>)
 8002312:	f000 feb1 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	37a8      	adds	r7, #168	; 0xa8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004c00 	.word	0x40004c00
 8002324:	40023800 	.word	0x40023800
 8002328:	40020800 	.word	0x40020800

0800232c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002340:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_FMC_MspInit+0x100>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d16d      	bne.n	8002424 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_FMC_MspInit+0x100>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_FMC_MspInit+0x104>)
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_FMC_MspInit+0x104>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6393      	str	r3, [r2, #56]	; 0x38
 800235a:	4b35      	ldr	r3, [pc, #212]	; (8002430 <HAL_FMC_MspInit+0x104>)
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002366:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800236a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002378:	230c      	movs	r3, #12
 800237a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	482c      	ldr	r0, [pc, #176]	; (8002434 <HAL_FMC_MspInit+0x108>)
 8002382:	f000 fe79 	bl	8003078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002386:	230c      	movs	r3, #12
 8002388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4826      	ldr	r0, [pc, #152]	; (8002438 <HAL_FMC_MspInit+0x10c>)
 80023a0:	f000 fe6a 	bl	8003078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023b4:	230c      	movs	r3, #12
 80023b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	481f      	ldr	r0, [pc, #124]	; (800243c <HAL_FMC_MspInit+0x110>)
 80023be:	f000 fe5b 	bl	8003078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80023c2:	f248 1311 	movw	r3, #33041	; 0x8111
 80023c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023d4:	230c      	movs	r3, #12
 80023d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4818      	ldr	r0, [pc, #96]	; (8002440 <HAL_FMC_MspInit+0x114>)
 80023de:	f000 fe4b 	bl	8003078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023f4:	230c      	movs	r3, #12
 80023f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4811      	ldr	r0, [pc, #68]	; (8002444 <HAL_FMC_MspInit+0x118>)
 80023fe:	f000 fe3b 	bl	8003078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002402:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002406:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002414:	230c      	movs	r3, #12
 8002416:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	4619      	mov	r1, r3
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <HAL_FMC_MspInit+0x11c>)
 800241e:	f000 fe2b 	bl	8003078 <HAL_GPIO_Init>
 8002422:	e000      	b.n	8002426 <HAL_FMC_MspInit+0xfa>
    return;
 8002424:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000032c 	.word	0x2000032c
 8002430:	40023800 	.word	0x40023800
 8002434:	40021400 	.word	0x40021400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020000 	.word	0x40020000
 8002440:	40021800 	.word	0x40021800
 8002444:	40021000 	.word	0x40021000
 8002448:	40020c00 	.word	0x40020c00

0800244c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002454:	f7ff ff6a 	bl	800232c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ac:	f000 f88e 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <LTDC_IRQHandler+0x10>)
 80024ba:	f001 fab3 	bl	8003a24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000114 	.word	0x20000114

080024c8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <LTDC_ER_IRQHandler+0x10>)
 80024ce:	f001 faa9 	bl	8003a24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000114 	.word	0x20000114

080024dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <SystemInit+0x20>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <SystemInit+0x20>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002504:	f7ff ffea 	bl	80024dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800252e:	f004 fd27 	bl	8006f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7fe fb4b 	bl	8000bcc <main>
  bx  lr    
 8002536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002540:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002544:	08007024 	.word	0x08007024
  ldr r2, =_sbss
 8002548:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800254c:	20000334 	.word	0x20000334

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>

08002552 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002556:	2003      	movs	r0, #3
 8002558:	f000 fcdc 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255c:	200f      	movs	r0, #15
 800255e:	f000 f805 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002562:	f7ff fac1 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fcf7 	bl	8002f7e <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 fcbf 	bl	8002f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000330 	.word	0x20000330

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000330 	.word	0x20000330

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e031      	b.n	80026ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fa5c 	bl	8001b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_ADC_Init+0x84>)
 8002698:	4013      	ands	r3, r2
 800269a:	f043 0202 	orr.w	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f970 	bl	8002988 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
 80026be:	e001      	b.n	80026c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	ffffeefd 	.word	0xffffeefd

080026dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e136      	b.n	8002966 <HAL_ADC_ConfigChannel+0x28a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d93a      	bls.n	800277e <HAL_ADC_ConfigChannel+0xa2>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002710:	d035      	beq.n	800277e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	3b1e      	subs	r3, #30
 8002728:	2207      	movs	r2, #7
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a8d      	ldr	r2, [pc, #564]	; (8002974 <HAL_ADC_ConfigChannel+0x298>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10a      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68d9      	ldr	r1, [r3, #12]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	e035      	b.n	80027c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	4603      	mov	r3, r0
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4403      	add	r3, r0
 8002770:	3b1e      	subs	r3, #30
 8002772:	409a      	lsls	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277c:	e022      	b.n	80027c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6919      	ldr	r1, [r3, #16]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4403      	add	r3, r0
 80027ba:	409a      	lsls	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d824      	bhi.n	8002816 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3b05      	subs	r3, #5
 80027de:	221f      	movs	r2, #31
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43da      	mvns	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	400a      	ands	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b05      	subs	r3, #5
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
 8002814:	e04c      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d824      	bhi.n	8002868 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	3b23      	subs	r3, #35	; 0x23
 8002830:	221f      	movs	r2, #31
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	400a      	ands	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	3b23      	subs	r3, #35	; 0x23
 800285a:	fa00 f203 	lsl.w	r2, r0, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
 8002866:	e023      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	3b41      	subs	r3, #65	; 0x41
 800287a:	221f      	movs	r2, #31
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	3b41      	subs	r3, #65	; 0x41
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_ADC_ConfigChannel+0x29c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10a      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1f4>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a2c      	ldr	r2, [pc, #176]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_ADC_ConfigChannel+0x29c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10f      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x21e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b12      	cmp	r3, #18
 80028e0:	d10b      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a22      	ldr	r2, [pc, #136]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 80028f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_ADC_ConfigChannel+0x29c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d12b      	bne.n	800295c <HAL_ADC_ConfigChannel+0x280>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_ADC_ConfigChannel+0x298>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x23a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b11      	cmp	r3, #17
 8002914:	d122      	bne.n	800295c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 800291c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002920:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_ADC_ConfigChannel+0x2a0>)
 8002928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800292c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_ADC_ConfigChannel+0x298>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_ADC_ConfigChannel+0x2a4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_ADC_ConfigChannel+0x2a8>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9a      	lsrs	r2, r3, #18
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800294e:	e002      	b.n	8002956 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3b01      	subs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f9      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	10000012 	.word	0x10000012
 8002978:	40012000 	.word	0x40012000
 800297c:	40012300 	.word	0x40012300
 8002980:	20000000 	.word	0x20000000
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002990:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <ADC_Init+0x1ec>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a77      	ldr	r2, [pc, #476]	; (8002b74 <ADC_Init+0x1ec>)
 8002996:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800299a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800299c:	4b75      	ldr	r3, [pc, #468]	; (8002b74 <ADC_Init+0x1ec>)
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4973      	ldr	r1, [pc, #460]	; (8002b74 <ADC_Init+0x1ec>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <ADC_Init+0x1f0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e00f      	b.n	8002a82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0202 	bic.w	r2, r2, #2
 8002a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	005a      	lsls	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	3b01      	subs	r3, #1
 8002adc:	035a      	lsls	r2, r3, #13
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	e007      	b.n	8002af8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	051a      	lsls	r2, r3, #20
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3a:	025a      	lsls	r2, r3, #9
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	029a      	lsls	r2, r3, #10
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40012300 	.word	0x40012300
 8002b78:	0f000001 	.word	0x0f000001

08002b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0ed      	b.n	8002d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff f808 	bl	8001bb0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7ff fd20 	bl	80025f4 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bb6:	e012      	b.n	8002bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bb8:	f7ff fd1c 	bl	80025f4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b0a      	cmp	r3, #10
 8002bc4:	d90b      	bls.n	8002bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0c5      	b.n	8002d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0e5      	beq.n	8002bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0202 	bic.w	r2, r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7ff fcfa 	bl	80025f4 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c02:	e012      	b.n	8002c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff fcf6 	bl	80025f4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90b      	bls.n	8002c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e09f      	b.n	8002d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7e1b      	ldrb	r3, [r3, #24]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d108      	bne.n	8002c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e007      	b.n	8002c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7e5b      	ldrb	r3, [r3, #25]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e007      	b.n	8002c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7e9b      	ldrb	r3, [r3, #26]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d108      	bne.n	8002ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e007      	b.n	8002cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0220 	bic.w	r2, r2, #32
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7edb      	ldrb	r3, [r3, #27]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0210 	bic.w	r2, r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e007      	b.n	8002ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0210 	orr.w	r2, r2, #16
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7f1b      	ldrb	r3, [r3, #28]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0208 	orr.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e007      	b.n	8002d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0208 	bic.w	r2, r2, #8
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7f5b      	ldrb	r3, [r3, #29]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0204 	orr.w	r2, r2, #4
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	ea42 0103 	orr.w	r1, r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <__NVIC_SetPriorityGrouping+0x40>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <__NVIC_SetPriorityGrouping+0x40>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60d3      	str	r3, [r2, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00
 8002db8:	05fa0000 	.word	0x05fa0000

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff29 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff3e 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff8e 	bl	8002e68 <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5d 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ffa2 	bl	8002ed0 <SysTick_Config>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7ff fb26 	bl	80025f4 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d008      	beq.n	8002fc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e052      	b.n	800306e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0216 	bic.w	r2, r2, #22
 8002fd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <HAL_DMA_Abort+0x62>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0208 	bic.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003018:	e013      	b.n	8003042 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800301a:	f7ff faeb 	bl	80025f4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b05      	cmp	r3, #5
 8003026:	d90c      	bls.n	8003042 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e015      	b.n	800306e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e4      	bne.n	800301a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	223f      	movs	r2, #63	; 0x3f
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e175      	b.n	8003384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8164 	bne.w	800337e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_GPIO_Init+0x56>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80be 	beq.w	800337e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_GPIO_Init+0x324>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a65      	ldr	r2, [pc, #404]	; (800339c <HAL_GPIO_Init+0x324>)
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <HAL_GPIO_Init+0x324>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800321a:	4a61      	ldr	r2, [pc, #388]	; (80033a0 <HAL_GPIO_Init+0x328>)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	220f      	movs	r2, #15
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_GPIO_Init+0x32c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d037      	beq.n	80032b6 <HAL_GPIO_Init+0x23e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_GPIO_Init+0x330>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_GPIO_Init+0x23a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_GPIO_Init+0x334>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02b      	beq.n	80032ae <HAL_GPIO_Init+0x236>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <HAL_GPIO_Init+0x338>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d025      	beq.n	80032aa <HAL_GPIO_Init+0x232>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <HAL_GPIO_Init+0x33c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <HAL_GPIO_Init+0x22e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a53      	ldr	r2, [pc, #332]	; (80033b8 <HAL_GPIO_Init+0x340>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d019      	beq.n	80032a2 <HAL_GPIO_Init+0x22a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_GPIO_Init+0x344>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_GPIO_Init+0x226>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <HAL_GPIO_Init+0x348>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00d      	beq.n	800329a <HAL_GPIO_Init+0x222>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a50      	ldr	r2, [pc, #320]	; (80033c4 <HAL_GPIO_Init+0x34c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <HAL_GPIO_Init+0x21e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4f      	ldr	r2, [pc, #316]	; (80033c8 <HAL_GPIO_Init+0x350>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_GPIO_Init+0x21a>
 800328e:	2309      	movs	r3, #9
 8003290:	e012      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 8003292:	230a      	movs	r3, #10
 8003294:	e010      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 8003296:	2308      	movs	r3, #8
 8003298:	e00e      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 800329a:	2307      	movs	r3, #7
 800329c:	e00c      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 800329e:	2306      	movs	r3, #6
 80032a0:	e00a      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032a2:	2305      	movs	r3, #5
 80032a4:	e008      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x240>
 80032b6:	2300      	movs	r3, #0
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032c8:	4935      	ldr	r1, [pc, #212]	; (80033a0 <HAL_GPIO_Init+0x328>)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_GPIO_Init+0x354>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <HAL_GPIO_Init+0x354>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_GPIO_Init+0x354>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <HAL_GPIO_Init+0x354>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_GPIO_Init+0x354>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_GPIO_Init+0x354>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_GPIO_Init+0x354>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_GPIO_Init+0x354>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3301      	adds	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	f67f ae86 	bls.w	8003098 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40013800 	.word	0x40013800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020c00 	.word	0x40020c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40021400 	.word	0x40021400
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40021c00 	.word	0x40021c00
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40022400 	.word	0x40022400
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e0d9      	b.n	80035a0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	f040 80c9 	bne.w	800359a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003408:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_GPIO_DeInit+0x1e8>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a63      	ldr	r2, [pc, #396]	; (80035bc <HAL_GPIO_DeInit+0x1ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d037      	beq.n	80034a2 <HAL_GPIO_DeInit+0xd2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a62      	ldr	r2, [pc, #392]	; (80035c0 <HAL_GPIO_DeInit+0x1f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <HAL_GPIO_DeInit+0xce>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a61      	ldr	r2, [pc, #388]	; (80035c4 <HAL_GPIO_DeInit+0x1f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02b      	beq.n	800349a <HAL_GPIO_DeInit+0xca>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a60      	ldr	r2, [pc, #384]	; (80035c8 <HAL_GPIO_DeInit+0x1f8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d025      	beq.n	8003496 <HAL_GPIO_DeInit+0xc6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a5f      	ldr	r2, [pc, #380]	; (80035cc <HAL_GPIO_DeInit+0x1fc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <HAL_GPIO_DeInit+0xc2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_GPIO_DeInit+0x200>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_DeInit+0xbe>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_GPIO_DeInit+0x204>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_GPIO_DeInit+0xba>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_GPIO_DeInit+0x208>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_GPIO_DeInit+0xb6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_GPIO_DeInit+0x20c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_DeInit+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_GPIO_DeInit+0x210>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_GPIO_DeInit+0xae>
 800347a:	2309      	movs	r3, #9
 800347c:	e012      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 800347e:	230a      	movs	r3, #10
 8003480:	e010      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 8003482:	2308      	movs	r3, #8
 8003484:	e00e      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 8003486:	2307      	movs	r3, #7
 8003488:	e00c      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 800348a:	2306      	movs	r3, #6
 800348c:	e00a      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 800348e:	2305      	movs	r3, #5
 8003490:	e008      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 8003492:	2304      	movs	r3, #4
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 8003496:	2303      	movs	r3, #3
 8003498:	e004      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 800349a:	2302      	movs	r3, #2
 800349c:	e002      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_GPIO_DeInit+0xd4>
 80034a2:	2300      	movs	r3, #0
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	f002 0203 	and.w	r2, r2, #3
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	4093      	lsls	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d132      	bne.n	800351a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	4949      	ldr	r1, [pc, #292]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034be:	4013      	ands	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034c2:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	4946      	ldr	r1, [pc, #280]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	4942      	ldr	r1, [pc, #264]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034da:	4013      	ands	r3, r2
 80034dc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034de:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	493f      	ldr	r1, [pc, #252]	; (80035e4 <HAL_GPIO_DeInit+0x214>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80034fc:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <HAL_GPIO_DeInit+0x1e8>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	43da      	mvns	r2, r3
 800350c:	482a      	ldr	r0, [pc, #168]	; (80035b8 <HAL_GPIO_DeInit+0x1e8>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	400a      	ands	r2, r1
 8003514:	3302      	adds	r3, #2
 8003516:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2103      	movs	r1, #3
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	08d2      	lsrs	r2, r2, #3
 8003550:	4019      	ands	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2103      	movs	r1, #3
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	2101      	movs	r1, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2103      	movs	r1, #3
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	401a      	ands	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3301      	adds	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	f67f af22 	bls.w	80033ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40013800 	.word	0x40013800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40020400 	.word	0x40020400
 80035c4:	40020800 	.word	0x40020800
 80035c8:	40020c00 	.word	0x40020c00
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40021400 	.word	0x40021400
 80035d4:	40021800 	.word	0x40021800
 80035d8:	40021c00 	.word	0x40021c00
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40022400 	.word	0x40022400
 80035e4:	40013c00 	.word	0x40013c00

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003604:	e003      	b.n	800360e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	041a      	lsls	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	619a      	str	r2, [r3, #24]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08b      	b.n	8003746 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe fb4c 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800366c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	e006      	b.n	80036a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d108      	bne.n	80036be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e007      	b.n	80036ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_I2C_Init+0x134>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	02008000 	.word	0x02008000

08003754 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d138      	bne.n	80037dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003774:	2302      	movs	r3, #2
 8003776:	e032      	b.n	80037de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d139      	bne.n	8003874 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800380a:	2302      	movs	r3, #2
 800380c:	e033      	b.n	8003876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2224      	movs	r2, #36	; 0x24
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800383c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0bf      	b.n	8003a16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe fa78 	bl	8001da0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80038c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_LTDC_Init+0x19c>)
 80038f8:	400b      	ands	r3, r1
 80038fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6899      	ldr	r1, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_LTDC_Init+0x19c>)
 8003926:	400b      	ands	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68d9      	ldr	r1, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_LTDC_Init+0x19c>)
 8003954:	400b      	ands	r3, r1
 8003956:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6919      	ldr	r1, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6959      	ldr	r1, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_LTDC_Init+0x19c>)
 8003982:	400b      	ands	r3, r1
 8003984:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6959      	ldr	r1, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0206 	orr.w	r2, r2, #6
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	f000f800 	.word	0xf000f800

08003a24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d023      	beq.n	8003a8e <HAL_LTDC_IRQHandler+0x6a>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01e      	beq.n	8003a8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2204      	movs	r2, #4
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f86f 	bl	8003b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d023      	beq.n	8003ae0 <HAL_LTDC_IRQHandler+0xbc>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01e      	beq.n	8003ae0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0202 	bic.w	r2, r2, #2
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ac0:	f043 0202 	orr.w	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2204      	movs	r2, #4
 8003ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f846 	bl	8003b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01b      	beq.n	8003b22 <HAL_LTDC_IRQHandler+0xfe>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d016      	beq.n	8003b22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f82f 	bl	8003b80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_LTDC_IRQHandler+0x140>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0208 	bic.w	r2, r2, #8
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f818 	bl	8003b94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_LTDC_ConfigLayer+0x1a>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e02c      	b.n	8003c1c <HAL_LTDC_ConfigLayer+0x74>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2134      	movs	r1, #52	; 0x34
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4614      	mov	r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f811 	bl	8003c24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bdb0      	pop	{r4, r5, r7, pc}

08003c24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	4413      	add	r3, r2
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	4413      	add	r3, r2
 8003c52:	3384      	adds	r3, #132	; 0x84
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	01d2      	lsls	r2, r2, #7
 8003c60:	440a      	add	r2, r1
 8003c62:	3284      	adds	r2, #132	; 0x84
 8003c64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003c68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	440b      	add	r3, r1
 8003c8a:	3384      	adds	r3, #132	; 0x84
 8003c8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca2:	4413      	add	r3, r2
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	01db      	lsls	r3, r3, #7
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3384      	adds	r3, #132	; 0x84
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	01d2      	lsls	r2, r2, #7
 8003cc2:	440a      	add	r2, r1
 8003cc4:	3284      	adds	r2, #132	; 0x84
 8003cc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003cca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cda:	4413      	add	r3, r2
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	01db      	lsls	r3, r3, #7
 8003ce8:	440b      	add	r3, r1
 8003cea:	3384      	adds	r3, #132	; 0x84
 8003cec:	4619      	mov	r1, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	01db      	lsls	r3, r3, #7
 8003cfe:	4413      	add	r3, r2
 8003d00:	3384      	adds	r3, #132	; 0x84
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	01d2      	lsls	r2, r2, #7
 8003d0e:	440a      	add	r2, r1
 8003d10:	3284      	adds	r2, #132	; 0x84
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	01db      	lsls	r3, r3, #7
 8003d22:	4413      	add	r3, r2
 8003d24:	3384      	adds	r3, #132	; 0x84
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	01db      	lsls	r3, r3, #7
 8003d54:	4413      	add	r3, r2
 8003d56:	3384      	adds	r3, #132	; 0x84
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	01db      	lsls	r3, r3, #7
 8003d64:	4413      	add	r3, r2
 8003d66:	3384      	adds	r3, #132	; 0x84
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d74:	461a      	mov	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	440b      	add	r3, r1
 8003d8a:	3384      	adds	r3, #132	; 0x84
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	01db      	lsls	r3, r3, #7
 8003d9e:	4413      	add	r3, r2
 8003da0:	3384      	adds	r3, #132	; 0x84
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	4611      	mov	r1, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	01d2      	lsls	r2, r2, #7
 8003dae:	440a      	add	r2, r1
 8003db0:	3284      	adds	r2, #132	; 0x84
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	01db      	lsls	r3, r3, #7
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3384      	adds	r3, #132	; 0x84
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	01db      	lsls	r3, r3, #7
 8003dd8:	4413      	add	r3, r2
 8003dda:	3384      	adds	r3, #132	; 0x84
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	440b      	add	r3, r1
 8003dea:	3384      	adds	r3, #132	; 0x84
 8003dec:	4619      	mov	r1, r3
 8003dee:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <LTDC_SetConfig+0x32c>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	68f9      	ldr	r1, [r7, #12]
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	4608      	mov	r0, r1
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	01c9      	lsls	r1, r1, #7
 8003e06:	4401      	add	r1, r0
 8003e08:	3184      	adds	r1, #132	; 0x84
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	4413      	add	r3, r2
 8003e1a:	3384      	adds	r3, #132	; 0x84
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	3384      	adds	r3, #132	; 0x84
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3384      	adds	r3, #132	; 0x84
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003e50:	2304      	movs	r3, #4
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	e01b      	b.n	8003e8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d102      	bne.n	8003e64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e014      	b.n	8003e8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d00b      	beq.n	8003e84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d007      	beq.n	8003e84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d003      	beq.n	8003e84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d102      	bne.n	8003e8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e001      	b.n	8003e8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	4413      	add	r3, r2
 8003e9a:	3384      	adds	r3, #132	; 0x84
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	01d2      	lsls	r2, r2, #7
 8003ea8:	440a      	add	r2, r1
 8003eaa:	3284      	adds	r2, #132	; 0x84
 8003eac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1acb      	subs	r3, r1, r3
 8003ec8:	69f9      	ldr	r1, [r7, #28]
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ed0:	68f9      	ldr	r1, [r7, #12]
 8003ed2:	6809      	ldr	r1, [r1, #0]
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	01c9      	lsls	r1, r1, #7
 8003eda:	4401      	add	r1, r0
 8003edc:	3184      	adds	r1, #132	; 0x84
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	01db      	lsls	r3, r3, #7
 8003eec:	4413      	add	r3, r2
 8003eee:	3384      	adds	r3, #132	; 0x84
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	440b      	add	r3, r1
 8003efe:	3384      	adds	r3, #132	; 0x84
 8003f00:	4619      	mov	r1, r3
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <LTDC_SetConfig+0x330>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	01db      	lsls	r3, r3, #7
 8003f12:	4413      	add	r3, r2
 8003f14:	3384      	adds	r3, #132	; 0x84
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	4413      	add	r3, r2
 8003f2a:	3384      	adds	r3, #132	; 0x84
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	4611      	mov	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	01d2      	lsls	r2, r2, #7
 8003f38:	440a      	add	r2, r1
 8003f3a:	3284      	adds	r2, #132	; 0x84
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6013      	str	r3, [r2, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3724      	adds	r7, #36	; 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	fffff8f8 	.word	0xfffff8f8
 8003f54:	fffff800 	.word	0xfffff800

08003f58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f86:	f7fe fb35 	bl	80025f4 <HAL_GetTick>
 8003f8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f8c:	e009      	b.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f8e:	f7fe fb31 	bl	80025f4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9c:	d901      	bls.n	8003fa2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e022      	b.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d1ee      	bne.n	8003f8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fbc:	f7fe fb1a 	bl	80025f4 <HAL_GetTick>
 8003fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fc2:	e009      	b.n	8003fd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fc4:	f7fe fb16 	bl	80025f4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd2:	d901      	bls.n	8003fd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e007      	b.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe4:	d1ee      	bne.n	8003fc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7fe faf8 	bl	80025f4 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e067      	b.n	80040e0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe f811 	bl	800204c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800402a:	f241 3188 	movw	r1, #5000	; 0x1388
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fb6b 	bl	800470a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	021a      	lsls	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	2120      	movs	r1, #32
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fb63 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d135      	bne.n	80040d6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_QSPI_Init+0xf0>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6852      	ldr	r2, [r2, #4]
 8004078:	0611      	lsls	r1, r2, #24
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	4311      	orrs	r1, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	69d2      	ldr	r2, [r2, #28]
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6a12      	ldr	r2, [r2, #32]
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_QSPI_Init+0xf4>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6912      	ldr	r2, [r2, #16]
 80040a2:	0411      	lsls	r1, r2, #16
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6952      	ldr	r2, [r2, #20]
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6992      	ldr	r2, [r2, #24]
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80040de:	7afb      	ldrb	r3, [r7, #11]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00ffff2f 	.word	0x00ffff2f
 80040ec:	ffe0f8fe 	.word	0xffe0f8fe

080040f0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e016      	b.n	8004130 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fe f83c 	bl	8002190 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7fe fa56 	bl	80025f4 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_QSPI_Command+0x22>
 8004156:	2302      	movs	r3, #2
 8004158:	e048      	b.n	80041ec <HAL_QSPI_Command+0xb4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d137      	bne.n	80041de <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2200      	movs	r2, #0
 8004184:	2120      	movs	r1, #32
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 facd 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d125      	bne.n	80041e2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004196:	2200      	movs	r2, #0
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fafa 	bl	8004794 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d115      	bne.n	80041d4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2201      	movs	r2, #1
 80041b0:	2102      	movs	r1, #2
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fab7 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2202      	movs	r2, #2
 80041c8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d2:	e006      	b.n	80041e2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041dc:	e001      	b.n	80041e2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7fe f9f6 	bl	80025f4 <HAL_GetTick>
 8004208:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3320      	adds	r3, #32
 8004210:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_QSPI_Transmit+0x2e>
 800421e:	2302      	movs	r3, #2
 8004220:	e07b      	b.n	800431a <HAL_QSPI_Transmit+0x126>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d16a      	bne.n	800430c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d05b      	beq.n	80042fa <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2212      	movs	r2, #18
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004276:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004278:	e01b      	b.n	80042b2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2201      	movs	r2, #1
 8004282:	2104      	movs	r1, #4
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa4e 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1df      	bne.n	800427a <HAL_QSPI_Transmit+0x86>
 80042ba:	e000      	b.n	80042be <HAL_QSPI_Transmit+0xca>
          break;
 80042bc:	bf00      	nop
      }

      if (status == HAL_OK)
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d115      	bne.n	80042f0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2201      	movs	r2, #1
 80042cc:	2102      	movs	r1, #2
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa29 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2202      	movs	r2, #2
 80042e4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f996 	bl	8004618 <HAL_QSPI_Abort>
 80042ec:	4603      	mov	r3, r0
 80042ee:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f8:	e00a      	b.n	8004310 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f043 0208 	orr.w	r2, r3, #8
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e001      	b.n	8004310 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800430c:	2302      	movs	r3, #2
 800430e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004318:	7ffb      	ldrb	r3, [r7, #31]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b08a      	sub	sp, #40	; 0x28
 8004326:	af02      	add	r7, sp, #8
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004332:	f7fe f95f 	bl	80025f4 <HAL_GetTick>
 8004336:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3320      	adds	r3, #32
 8004346:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_QSPI_Receive+0x36>
 8004354:	2302      	movs	r3, #2
 8004356:	e082      	b.n	800445e <HAL_QSPI_Receive+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d171      	bne.n	8004450 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d062      	beq.n	800443e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2222      	movs	r2, #34	; 0x22
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043b0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80043ba:	e01c      	b.n	80043f6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2201      	movs	r2, #1
 80043c4:	2106      	movs	r1, #6
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f9ad 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	1e5a      	subs	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1de      	bne.n	80043bc <HAL_QSPI_Receive+0x9a>
 80043fe:	e000      	b.n	8004402 <HAL_QSPI_Receive+0xe0>
          break;
 8004400:	bf00      	nop
      }

      if (status == HAL_OK)
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2201      	movs	r2, #1
 8004410:	2102      	movs	r1, #2
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f987 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2202      	movs	r2, #2
 8004428:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f8f4 	bl	8004618 <HAL_QSPI_Abort>
 8004430:	4603      	mov	r3, r0
 8004432:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800443c:	e00a      	b.n	8004454 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0208 	orr.w	r2, r3, #8
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e001      	b.n	8004454 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800445c:	7ffb      	ldrb	r3, [r7, #31]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b088      	sub	sp, #32
 800446a:	af02      	add	r7, sp, #8
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7fe f8be 	bl	80025f4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_QSPI_AutoPolling+0x24>
 8004486:	2302      	movs	r3, #2
 8004488:	e060      	b.n	800454c <HAL_QSPI_AutoPolling+0xe6>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d14f      	bne.n	800453e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2242      	movs	r2, #66	; 0x42
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2120      	movs	r1, #32
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f935 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d13d      	bne.n	8004542 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044fc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f941 	bl	8004794 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2201      	movs	r2, #1
 800451a:	2108      	movs	r1, #8
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f902 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2208      	movs	r2, #8
 8004532:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800453c:	e001      	b.n	8004542 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004560:	f7fe f848 	bl	80025f4 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_QSPI_MemoryMapped+0x22>
 8004572:	2302      	movs	r3, #2
 8004574:	e04c      	b.n	8004610 <HAL_QSPI_MemoryMapped+0xbc>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13b      	bne.n	8004602 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2282      	movs	r2, #130	; 0x82
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2120      	movs	r1, #32
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f8be 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d128      	bne.n	8004606 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 0108 	bic.w	r1, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d110      	bne.n	80045f4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2210      	movs	r2, #16
 80045e2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80045f2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80045f4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f8ca 	bl	8004794 <QSPI_Config>
 8004600:	e001      	b.n	8004606 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004602:	2302      	movs	r3, #2
 8004604:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004624:	f7fd ffe6 	bl	80025f4 <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d062      	beq.n	8004700 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fc96 	bl	8002f96 <HAL_DMA_Abort>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d034      	beq.n	80046f8 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0202 	orr.w	r2, r2, #2
 800469c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2201      	movs	r2, #1
 80046a8:	2102      	movs	r1, #2
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f83b 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2202      	movs	r2, #2
 80046c0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2120      	movs	r1, #32
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f829 	bl	8004726 <QSPI_WaitFlagStateUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d110      	bne.n	8004700 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80046ec:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f6:	e003      	b.n	8004700 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	649a      	str	r2, [r3, #72]	; 0x48
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004736:	e01a      	b.n	800476e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d016      	beq.n	800476e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fd ff58 	bl	80025f4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2204      	movs	r2, #4
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e00e      	b.n	800478c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf14      	ite	ne
 800477c:	2301      	movne	r3, #1
 800477e:	2300      	moveq	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	429a      	cmp	r2, r3
 8004788:	d1d6      	bne.n	8004738 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <QSPI_Config+0x28>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047ae:	d005      	beq.n	80047bc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3a01      	subs	r2, #1
 80047ba:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80b9 	beq.w	8004938 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d05f      	beq.n	800488e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d031      	beq.n	8004844 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	049b      	lsls	r3, r3, #18
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	431a      	orrs	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	431a      	orrs	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	431a      	orrs	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	430a      	orrs	r2, r1
 800482c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004834:	f000 812e 	beq.w	8004a94 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004842:	e127      	b.n	8004a94 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	431a      	orrs	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	431a      	orrs	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	049b      	lsls	r3, r3, #18
 8004860:	431a      	orrs	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	431a      	orrs	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	431a      	orrs	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	431a      	orrs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	431a      	orrs	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	ea42 0103 	orr.w	r1, r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	430a      	orrs	r2, r1
 800488a:	615a      	str	r2, [r3, #20]
}
 800488c:	e102      	b.n	8004a94 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d02e      	beq.n	80048f4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	431a      	orrs	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	049b      	lsls	r3, r3, #18
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	431a      	orrs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	430a      	orrs	r2, r1
 80048dc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048e4:	f000 80d6 	beq.w	8004a94 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	6852      	ldr	r2, [r2, #4]
 80048f0:	619a      	str	r2, [r3, #24]
}
 80048f2:	e0cf      	b.n	8004a94 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	431a      	orrs	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	049b      	lsls	r3, r3, #18
 8004910:	431a      	orrs	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	431a      	orrs	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	431a      	orrs	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	ea42 0103 	orr.w	r1, r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	430a      	orrs	r2, r1
 8004934:	615a      	str	r2, [r3, #20]
}
 8004936:	e0ad      	b.n	8004a94 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d058      	beq.n	80049f2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02d      	beq.n	80049ae <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	431a      	orrs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	431a      	orrs	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	049b      	lsls	r3, r3, #18
 800496e:	431a      	orrs	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	431a      	orrs	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	431a      	orrs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	430a      	orrs	r2, r1
 8004998:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049a0:	d078      	beq.n	8004a94 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	619a      	str	r2, [r3, #24]
}
 80049ac:	e072      	b.n	8004a94 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	431a      	orrs	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	049b      	lsls	r3, r3, #18
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	431a      	orrs	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	615a      	str	r2, [r3, #20]
}
 80049f0:	e050      	b.n	8004a94 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02a      	beq.n	8004a50 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	049b      	lsls	r3, r3, #18
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a42:	d027      	beq.n	8004a94 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	e021      	b.n	8004a94 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	049b      	lsls	r3, r3, #18
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	615a      	str	r2, [r3, #20]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e291      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8087 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00c      	beq.n	8004aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad0:	4b93      	ldr	r3, [pc, #588]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
 8004adc:	4b90      	ldr	r3, [pc, #576]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x130>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d168      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e26b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7a>
 8004b0c:	4b84      	ldr	r3, [pc, #528]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a83      	ldr	r2, [pc, #524]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x9c>
 8004b22:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7e      	ldr	r2, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7b      	ldr	r2, [pc, #492]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0xc0>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a72      	ldr	r2, [pc, #456]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b60:	4b6f      	ldr	r3, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6b      	ldr	r2, [pc, #428]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd fd38 	bl	80025f4 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fd34 	bl	80025f4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e21f      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe8>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fd24 	bl	80025f4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd fd20 	bl	80025f4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e20b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x110>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d069      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1df      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e040      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d023      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd fcd6 	bl	80025f4 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fd fcd2 	bl	80025f4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1bd      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
 8004c7e:	e018      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fcb2 	bl	80025f4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd fcae 	bl	80025f4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e199      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d038      	beq.n	8004d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d019      	beq.n	8004cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fc8f 	bl	80025f4 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fd fc8b 	bl	80025f4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e176      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x23a>
 8004cf8:	e01a      	b.n	8004d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fd fc75 	bl	80025f4 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fd fc71 	bl	80025f4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d903      	bls.n	8004d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e15c      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
 8004d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	4b91      	ldr	r3, [pc, #580]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a4 	beq.w	8004e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a87      	ldr	r2, [pc, #540]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b82      	ldr	r3, [pc, #520]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d72:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7e:	f7fd fc39 	bl	80025f4 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fd fc35 	bl	80025f4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	; 0x64
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e120      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d98:	4b75      	ldr	r3, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x31a>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	e02d      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x33c>
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x35e>
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5a      	ldr	r2, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fbe9 	bl	80025f4 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fd fbe5 	bl	80025f4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0ce      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x386>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fbd3 	bl	80025f4 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fd fbcf 	bl	80025f4 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a4 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d06b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d149      	bne.n	8004f38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fba0 	bl	80025f4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd fb9c 	bl	80025f4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e087      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fb70 	bl	80025f4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fb6c 	bl	80025f4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e057      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x478>
 8004f36:	e04f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd fb56 	bl	80025f4 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd fb52 	bl	80025f4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e03d      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4ac>
 8004f6a:	e035      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x544>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d0      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 020f 	bic.w	r2, r3, #15
 8005016:	4965      	ldr	r1, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d040      	beq.n	800510c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d115      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e073      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4936      	ldr	r1, [pc, #216]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fd fa8a 	bl	80025f4 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fd fa86 	bl	80025f4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d210      	bcs.n	800513c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1cc>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1d4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd f9e6 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08006ffc 	.word	0x08006ffc
 80051b8:	20000000 	.word	0x20000000
 80051bc:	20000004 	.word	0x20000004

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b094      	sub	sp, #80	; 0x50
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
 80051cc:	2300      	movs	r3, #0
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	2300      	movs	r3, #0
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b79      	ldr	r3, [pc, #484]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80e1 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e0db      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f8:	e0db      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b72      	ldr	r3, [pc, #456]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fe:	e0d8      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d063      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	2200      	movs	r2, #0
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
 800522e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	0159      	lsls	r1, r3, #5
 8005240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005244:	0150      	lsls	r0, r2, #5
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4621      	mov	r1, r4
 800524c:	1a51      	subs	r1, r2, r1
 800524e:	6139      	str	r1, [r7, #16]
 8005250:	4629      	mov	r1, r5
 8005252:	eb63 0301 	sbc.w	r3, r3, r1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005264:	4659      	mov	r1, fp
 8005266:	018b      	lsls	r3, r1, #6
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526e:	4651      	mov	r1, sl
 8005270:	018a      	lsls	r2, r1, #6
 8005272:	4651      	mov	r1, sl
 8005274:	ebb2 0801 	subs.w	r8, r2, r1
 8005278:	4659      	mov	r1, fp
 800527a:	eb63 0901 	sbc.w	r9, r3, r1
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800528a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005292:	4690      	mov	r8, r2
 8005294:	4699      	mov	r9, r3
 8005296:	4623      	mov	r3, r4
 8005298:	eb18 0303 	adds.w	r3, r8, r3
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	462b      	mov	r3, r5
 80052a0:	eb49 0303 	adc.w	r3, r9, r3
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052b2:	4629      	mov	r1, r5
 80052b4:	028b      	lsls	r3, r1, #10
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052bc:	4621      	mov	r1, r4
 80052be:	028a      	lsls	r2, r1, #10
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d0:	f7fa ffa2 	bl	8000218 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	e058      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	2200      	movs	r2, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	4611      	mov	r1, r2
 80052ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	0159      	lsls	r1, r3, #5
 8005306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530a:	0150      	lsls	r0, r2, #5
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4641      	mov	r1, r8
 8005312:	ebb2 0a01 	subs.w	sl, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb63 0b01 	sbc.w	fp, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800532c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005330:	ebb2 040a 	subs.w	r4, r2, sl
 8005334:	eb63 050b 	sbc.w	r5, r3, fp
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	00eb      	lsls	r3, r5, #3
 8005342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005346:	00e2      	lsls	r2, r4, #3
 8005348:	4614      	mov	r4, r2
 800534a:	461d      	mov	r5, r3
 800534c:	4643      	mov	r3, r8
 800534e:	18e3      	adds	r3, r4, r3
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	464b      	mov	r3, r9
 8005354:	eb45 0303 	adc.w	r3, r5, r3
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005366:	4629      	mov	r1, r5
 8005368:	028b      	lsls	r3, r1, #10
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005370:	4621      	mov	r1, r4
 8005372:	028a      	lsls	r2, r1, #10
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537a:	2200      	movs	r2, #0
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	61fa      	str	r2, [r7, #28]
 8005380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005384:	f7fa ff48 	bl	8000218 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80053a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3750      	adds	r7, #80	; 0x50
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	00f42400 	.word	0x00f42400

080053c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000000 	.word	0x20000000

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	0800700c 	.word	0x0800700c

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800540c:	f7ff ffdc 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0b5b      	lsrs	r3, r3, #13
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	0800700c 	.word	0x0800700c

08005430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005458:	4b69      	ldr	r3, [pc, #420]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a68      	ldr	r2, [pc, #416]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005462:	6093      	str	r3, [r2, #8]
 8005464:	4b66      	ldr	r3, [pc, #408]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	4964      	ldr	r1, [pc, #400]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800547a:	2301      	movs	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d017      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800548a:	4b5d      	ldr	r3, [pc, #372]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	4959      	ldr	r1, [pc, #356]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a8:	d101      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054c6:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	494a      	ldr	r1, [pc, #296]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 808b 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b3a      	ldr	r3, [pc, #232]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	4a39      	ldr	r2, [pc, #228]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6413      	str	r3, [r2, #64]	; 0x40
 8005520:	4b37      	ldr	r3, [pc, #220]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800552c:	4b35      	ldr	r3, [pc, #212]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a34      	ldr	r2, [pc, #208]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fd f85c 	bl	80025f4 <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005540:	f7fd f858 	bl	80025f4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e357      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005552:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800555e:	4b28      	ldr	r3, [pc, #160]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d035      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d02e      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800557c:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	4a1d      	ldr	r2, [pc, #116]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005590:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	4a1a      	ldr	r2, [pc, #104]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055a4:	4b16      	ldr	r3, [pc, #88]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d114      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fd f820 	bl	80025f4 <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	e00a      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7fd f81c 	bl	80025f4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e319      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ee      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d111      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055f6:	400b      	ands	r3, r1
 80055f8:	4901      	ldr	r1, [pc, #4]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
 80055fe:	e00b      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005600:	40023800 	.word	0x40023800
 8005604:	40007000 	.word	0x40007000
 8005608:	0ffffcff 	.word	0x0ffffcff
 800560c:	4baa      	ldr	r3, [pc, #680]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4aa9      	ldr	r2, [pc, #676]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005616:	6093      	str	r3, [r2, #8]
 8005618:	4ba7      	ldr	r3, [pc, #668]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	49a4      	ldr	r1, [pc, #656]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005626:	4313      	orrs	r3, r2
 8005628:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005636:	4ba0      	ldr	r3, [pc, #640]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800563c:	4a9e      	ldr	r2, [pc, #632]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005642:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005646:	4b9c      	ldr	r3, [pc, #624]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005648:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	4999      	ldr	r1, [pc, #612]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005664:	4b94      	ldr	r3, [pc, #592]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005672:	4991      	ldr	r1, [pc, #580]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005686:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005694:	4988      	ldr	r1, [pc, #544]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056a8:	4b83      	ldr	r3, [pc, #524]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b6:	4980      	ldr	r1, [pc, #512]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ca:	4b7b      	ldr	r3, [pc, #492]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4977      	ldr	r1, [pc, #476]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ec:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f023 0203 	bic.w	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	496f      	ldr	r1, [pc, #444]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800570e:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f023 020c 	bic.w	r2, r3, #12
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571c:	4966      	ldr	r1, [pc, #408]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005730:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	495e      	ldr	r1, [pc, #376]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005752:	4b59      	ldr	r3, [pc, #356]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	4955      	ldr	r1, [pc, #340]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005774:	4b50      	ldr	r3, [pc, #320]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	494d      	ldr	r1, [pc, #308]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005796:	4b48      	ldr	r3, [pc, #288]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	4944      	ldr	r1, [pc, #272]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057b8:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	493c      	ldr	r1, [pc, #240]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057da:	4b37      	ldr	r3, [pc, #220]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e8:	4933      	ldr	r1, [pc, #204]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057fc:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580a:	492b      	ldr	r1, [pc, #172]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d011      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800581e:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005824:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582c:	4922      	ldr	r1, [pc, #136]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583c:	d101      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800583e:	2301      	movs	r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800584e:	2301      	movs	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586c:	4912      	ldr	r1, [pc, #72]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005890:	4909      	ldr	r1, [pc, #36]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d006      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80d9 	beq.w	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058ac:	4b02      	ldr	r3, [pc, #8]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a01      	ldr	r2, [pc, #4]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80058b8:	40023800 	.word	0x40023800
 80058bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058be:	f7fc fe99 	bl	80025f4 <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058c6:	f7fc fe95 	bl	80025f4 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b64      	cmp	r3, #100	; 0x64
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e194      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d8:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f0      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d021      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11d      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058f8:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005906:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590c:	0e1b      	lsrs	r3, r3, #24
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	019a      	lsls	r2, r3, #6
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	431a      	orrs	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	061b      	lsls	r3, r3, #24
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	071b      	lsls	r3, r3, #28
 800592c:	4957      	ldr	r1, [pc, #348]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02e      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595e:	d129      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005960:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005974:	0f1b      	lsrs	r3, r3, #28
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	019a      	lsls	r2, r3, #6
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	071b      	lsls	r3, r3, #28
 8005994:	493d      	ldr	r1, [pc, #244]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800599c:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a2:	f023 021f 	bic.w	r2, r3, #31
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4937      	ldr	r1, [pc, #220]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	0e1b      	lsrs	r3, r3, #24
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059ce:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d4:	0f1b      	lsrs	r3, r3, #28
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	019a      	lsls	r2, r3, #6
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	431a      	orrs	r2, r3
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	431a      	orrs	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	071b      	lsls	r3, r3, #28
 80059f4:	4925      	ldr	r1, [pc, #148]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	019a      	lsls	r2, r3, #6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	071b      	lsls	r3, r3, #28
 8005a24:	4919      	ldr	r1, [pc, #100]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a38:	f7fc fddc 	bl	80025f4 <HAL_GetTick>
 8005a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a40:	f7fc fdd8 	bl	80025f4 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	; 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0d7      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 80cd 	bne.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a72:	f7fc fdbf 	bl	80025f4 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a78:	e00a      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a7a:	f7fc fdbb 	bl	80025f4 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b64      	cmp	r3, #100	; 0x64
 8005a86:	d903      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0ba      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a90:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a9c:	d0ed      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d02e      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d12a      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ac6:	4b51      	ldr	r3, [pc, #324]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad4:	4b4d      	ldr	r3, [pc, #308]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	0f1b      	lsrs	r3, r3, #28
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	019a      	lsls	r2, r3, #6
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	071b      	lsls	r3, r3, #28
 8005afa:	4944      	ldr	r1, [pc, #272]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b02:	4b42      	ldr	r3, [pc, #264]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	3b01      	subs	r3, #1
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	493d      	ldr	r1, [pc, #244]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d022      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b30:	d11d      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b32:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b40:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	0f1b      	lsrs	r3, r3, #28
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	019a      	lsls	r2, r3, #6
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	071b      	lsls	r3, r3, #28
 8005b66:	4929      	ldr	r1, [pc, #164]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d028      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	019a      	lsls	r2, r3, #6
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	071b      	lsls	r3, r3, #28
 8005bae:	4917      	ldr	r1, [pc, #92]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4911      	ldr	r1, [pc, #68]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd8:	f7fc fd0c 	bl	80025f4 <HAL_GetTick>
 8005bdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be0:	f7fc fd08 	bl	80025f4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e007      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfe:	d1ef      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e025      	b.n	8005c70 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fc fc07 	bl	800244c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f001 f893 	bl	8006d7c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	f001 f8e7 	bl	8006e34 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c8a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d101      	bne.n	8005c96 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e021      	b.n	8005cda <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SDRAM_SendCommand+0x2a>
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d118      	bne.n	8005cd4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f928 	bl	8006f08 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d104      	bne.n	8005cca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005cc8:	e006      	b.n	8005cd8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005cd2:	e001      	b.n	8005cd8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d101      	bne.n	8005cfc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e016      	b.n	8005d2a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10f      	bne.n	8005d28 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f91a 	bl	8006f50 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e09d      	b.n	8005e80 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d54:	d009      	beq.n	8005d6a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	61da      	str	r2, [r3, #28]
 8005d5c:	e005      	b.n	8005d6a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fc fa2d 	bl	80021e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005daa:	d902      	bls.n	8005db2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dc0:	d007      	beq.n	8005dd2 <HAL_SPI_Init+0xa0>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dca:	d002      	beq.n	8005dd2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	ea42 0103 	orr.w	r1, r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f003 0204 	and.w	r2, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e4e:	ea42 0103 	orr.w	r1, r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Transmit+0x22>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e15f      	b.n	800616a <HAL_SPI_Transmit+0x2e2>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb2:	f7fc fb9f 	bl	80025f4 <HAL_GetTick>
 8005eb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ecc:	e148      	b.n	8006160 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x52>
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ede:	e13f      	b.n	8006160 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2a:	d10f      	bne.n	8005f4c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d007      	beq.n	8005f6a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f72:	d94f      	bls.n	8006014 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_Transmit+0xfa>
 8005f7c:	8afb      	ldrh	r3, [r7, #22]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d142      	bne.n	8006008 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fa6:	e02f      	b.n	8006008 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d112      	bne.n	8005fdc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fda:	e015      	b.n	8006008 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fdc:	f7fc fb0a 	bl	80025f4 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d803      	bhi.n	8005ff4 <HAL_SPI_Transmit+0x16c>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d102      	bne.n	8005ffa <HAL_SPI_Transmit+0x172>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006006:	e0ab      	b.n	8006160 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ca      	bne.n	8005fa8 <HAL_SPI_Transmit+0x120>
 8006012:	e080      	b.n	8006116 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_Transmit+0x19a>
 800601c:	8afb      	ldrh	r3, [r7, #22]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d174      	bne.n	800610c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d912      	bls.n	8006052 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	881a      	ldrh	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	1c9a      	adds	r2, r3, #2
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b02      	subs	r3, #2
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006050:	e05c      	b.n	800610c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006078:	e048      	b.n	800610c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b02      	cmp	r3, #2
 8006086:	d12b      	bne.n	80060e0 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d912      	bls.n	80060b8 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	881a      	ldrh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b02      	subs	r3, #2
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b6:	e029      	b.n	800610c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060de:	e015      	b.n	800610c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e0:	f7fc fa88 	bl	80025f4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d803      	bhi.n	80060f8 <HAL_SPI_Transmit+0x270>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <HAL_SPI_Transmit+0x276>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800610a:	e029      	b.n	8006160 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1b1      	bne.n	800607a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f948 	bl	80063b0 <SPI_EndRxTxTransaction>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e003      	b.n	8006160 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006168:	7ffb      	ldrb	r3, [r7, #31]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006184:	f7fc fa36 	bl	80025f4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4413      	add	r3, r2
 8006192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006194:	f7fc fa2e 	bl	80025f4 <HAL_GetTick>
 8006198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800619a:	4b39      	ldr	r3, [pc, #228]	; (8006280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	015b      	lsls	r3, r3, #5
 80061a0:	0d1b      	lsrs	r3, r3, #20
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061aa:	e054      	b.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d050      	beq.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b4:	f7fc fa1e 	bl	80025f4 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d902      	bls.n	80061ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d13d      	bne.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061e2:	d111      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ec:	d004      	beq.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	d107      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006210:	d10f      	bne.n	8006232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e017      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	3b01      	subs	r3, #1
 8006254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d19b      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000000 	.word	0x20000000

08006284 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006296:	f7fc f9ad 	bl	80025f4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062a6:	f7fc f9a5 	bl	80025f4 <HAL_GetTick>
 80062aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062b4:	4b3d      	ldr	r3, [pc, #244]	; (80063ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00da      	lsls	r2, r3, #3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	0d1b      	lsrs	r3, r3, #20
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062cc:	e060      	b.n	8006390 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062d4:	d107      	bne.n	80062e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d050      	beq.n	8006390 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062ee:	f7fc f981 	bl	80025f4 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d902      	bls.n	8006304 <SPI_WaitFifoStateUntilTimeout+0x80>
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d13d      	bne.n	8006380 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006312:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800631c:	d111      	bne.n	8006342 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006326:	d004      	beq.n	8006332 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006330:	d107      	bne.n	8006342 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634a:	d10f      	bne.n	800636c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800636a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e010      	b.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	3b01      	subs	r3, #1
 800638e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d196      	bne.n	80062ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3728      	adds	r7, #40	; 0x28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000000 	.word	0x20000000

080063b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff ff5b 	bl	8006284 <SPI_WaitFifoStateUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d8:	f043 0220 	orr.w	r2, r3, #32
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e046      	b.n	8006472 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063e4:	4b25      	ldr	r3, [pc, #148]	; (800647c <SPI_EndRxTxTransaction+0xcc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a25      	ldr	r2, [pc, #148]	; (8006480 <SPI_EndRxTxTransaction+0xd0>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	0d5b      	lsrs	r3, r3, #21
 80063f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d112      	bne.n	800642a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff feb0 	bl	8006174 <SPI_WaitFlagStateUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e023      	b.n	8006472 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3b01      	subs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d0f2      	beq.n	800642a <SPI_EndRxTxTransaction+0x7a>
 8006444:	e000      	b.n	8006448 <SPI_EndRxTxTransaction+0x98>
        break;
 8006446:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff ff15 	bl	8006284 <SPI_WaitFifoStateUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e000      	b.n	8006472 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000000 	.word	0x20000000
 8006480:	165e9f81 	.word	0x165e9f81

08006484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e040      	b.n	8006518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fee0 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2224      	movs	r2, #36	; 0x24
 80064b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa8c 	bl	80069e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f825 	bl	8006520 <UART_SetConfig>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e01b      	b.n	8006518 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fb0b 	bl	8006b2c <UART_CheckIdleState>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4ba6      	ldr	r3, [pc, #664]	; (80067e4 <UART_SetConfig+0x2c4>)
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6979      	ldr	r1, [r7, #20]
 8006554:	430b      	orrs	r3, r1
 8006556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a94      	ldr	r2, [pc, #592]	; (80067e8 <UART_SetConfig+0x2c8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d120      	bne.n	80065de <UART_SetConfig+0xbe>
 800659c:	4b93      	ldr	r3, [pc, #588]	; (80067ec <UART_SetConfig+0x2cc>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d816      	bhi.n	80065d8 <UART_SetConfig+0xb8>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0x90>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065c7 	.word	0x080065c7
 80065bc:	080065d3 	.word	0x080065d3
 80065c0:	2301      	movs	r3, #1
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e150      	b.n	8006868 <UART_SetConfig+0x348>
 80065c6:	2302      	movs	r3, #2
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e14d      	b.n	8006868 <UART_SetConfig+0x348>
 80065cc:	2304      	movs	r3, #4
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e14a      	b.n	8006868 <UART_SetConfig+0x348>
 80065d2:	2308      	movs	r3, #8
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e147      	b.n	8006868 <UART_SetConfig+0x348>
 80065d8:	2310      	movs	r3, #16
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e144      	b.n	8006868 <UART_SetConfig+0x348>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a83      	ldr	r2, [pc, #524]	; (80067f0 <UART_SetConfig+0x2d0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d132      	bne.n	800664e <UART_SetConfig+0x12e>
 80065e8:	4b80      	ldr	r3, [pc, #512]	; (80067ec <UART_SetConfig+0x2cc>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b0c      	cmp	r3, #12
 80065f4:	d828      	bhi.n	8006648 <UART_SetConfig+0x128>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0xdc>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	0800663d 	.word	0x0800663d
 8006610:	08006649 	.word	0x08006649
 8006614:	08006649 	.word	0x08006649
 8006618:	08006649 	.word	0x08006649
 800661c:	08006637 	.word	0x08006637
 8006620:	08006649 	.word	0x08006649
 8006624:	08006649 	.word	0x08006649
 8006628:	08006649 	.word	0x08006649
 800662c:	08006643 	.word	0x08006643
 8006630:	2300      	movs	r3, #0
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e118      	b.n	8006868 <UART_SetConfig+0x348>
 8006636:	2302      	movs	r3, #2
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e115      	b.n	8006868 <UART_SetConfig+0x348>
 800663c:	2304      	movs	r3, #4
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e112      	b.n	8006868 <UART_SetConfig+0x348>
 8006642:	2308      	movs	r3, #8
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e10f      	b.n	8006868 <UART_SetConfig+0x348>
 8006648:	2310      	movs	r3, #16
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e10c      	b.n	8006868 <UART_SetConfig+0x348>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a68      	ldr	r2, [pc, #416]	; (80067f4 <UART_SetConfig+0x2d4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d120      	bne.n	800669a <UART_SetConfig+0x17a>
 8006658:	4b64      	ldr	r3, [pc, #400]	; (80067ec <UART_SetConfig+0x2cc>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006662:	2b30      	cmp	r3, #48	; 0x30
 8006664:	d013      	beq.n	800668e <UART_SetConfig+0x16e>
 8006666:	2b30      	cmp	r3, #48	; 0x30
 8006668:	d814      	bhi.n	8006694 <UART_SetConfig+0x174>
 800666a:	2b20      	cmp	r3, #32
 800666c:	d009      	beq.n	8006682 <UART_SetConfig+0x162>
 800666e:	2b20      	cmp	r3, #32
 8006670:	d810      	bhi.n	8006694 <UART_SetConfig+0x174>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <UART_SetConfig+0x15c>
 8006676:	2b10      	cmp	r3, #16
 8006678:	d006      	beq.n	8006688 <UART_SetConfig+0x168>
 800667a:	e00b      	b.n	8006694 <UART_SetConfig+0x174>
 800667c:	2300      	movs	r3, #0
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e0f2      	b.n	8006868 <UART_SetConfig+0x348>
 8006682:	2302      	movs	r3, #2
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e0ef      	b.n	8006868 <UART_SetConfig+0x348>
 8006688:	2304      	movs	r3, #4
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e0ec      	b.n	8006868 <UART_SetConfig+0x348>
 800668e:	2308      	movs	r3, #8
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e0e9      	b.n	8006868 <UART_SetConfig+0x348>
 8006694:	2310      	movs	r3, #16
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e0e6      	b.n	8006868 <UART_SetConfig+0x348>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a56      	ldr	r2, [pc, #344]	; (80067f8 <UART_SetConfig+0x2d8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d120      	bne.n	80066e6 <UART_SetConfig+0x1c6>
 80066a4:	4b51      	ldr	r3, [pc, #324]	; (80067ec <UART_SetConfig+0x2cc>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ae:	2bc0      	cmp	r3, #192	; 0xc0
 80066b0:	d013      	beq.n	80066da <UART_SetConfig+0x1ba>
 80066b2:	2bc0      	cmp	r3, #192	; 0xc0
 80066b4:	d814      	bhi.n	80066e0 <UART_SetConfig+0x1c0>
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d009      	beq.n	80066ce <UART_SetConfig+0x1ae>
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d810      	bhi.n	80066e0 <UART_SetConfig+0x1c0>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <UART_SetConfig+0x1a8>
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d006      	beq.n	80066d4 <UART_SetConfig+0x1b4>
 80066c6:	e00b      	b.n	80066e0 <UART_SetConfig+0x1c0>
 80066c8:	2300      	movs	r3, #0
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e0cc      	b.n	8006868 <UART_SetConfig+0x348>
 80066ce:	2302      	movs	r3, #2
 80066d0:	77fb      	strb	r3, [r7, #31]
 80066d2:	e0c9      	b.n	8006868 <UART_SetConfig+0x348>
 80066d4:	2304      	movs	r3, #4
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e0c6      	b.n	8006868 <UART_SetConfig+0x348>
 80066da:	2308      	movs	r3, #8
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e0c3      	b.n	8006868 <UART_SetConfig+0x348>
 80066e0:	2310      	movs	r3, #16
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e0c0      	b.n	8006868 <UART_SetConfig+0x348>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a44      	ldr	r2, [pc, #272]	; (80067fc <UART_SetConfig+0x2dc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d125      	bne.n	800673c <UART_SetConfig+0x21c>
 80066f0:	4b3e      	ldr	r3, [pc, #248]	; (80067ec <UART_SetConfig+0x2cc>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066fe:	d017      	beq.n	8006730 <UART_SetConfig+0x210>
 8006700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006704:	d817      	bhi.n	8006736 <UART_SetConfig+0x216>
 8006706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800670a:	d00b      	beq.n	8006724 <UART_SetConfig+0x204>
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d811      	bhi.n	8006736 <UART_SetConfig+0x216>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <UART_SetConfig+0x1fe>
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d006      	beq.n	800672a <UART_SetConfig+0x20a>
 800671c:	e00b      	b.n	8006736 <UART_SetConfig+0x216>
 800671e:	2300      	movs	r3, #0
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e0a1      	b.n	8006868 <UART_SetConfig+0x348>
 8006724:	2302      	movs	r3, #2
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e09e      	b.n	8006868 <UART_SetConfig+0x348>
 800672a:	2304      	movs	r3, #4
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e09b      	b.n	8006868 <UART_SetConfig+0x348>
 8006730:	2308      	movs	r3, #8
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e098      	b.n	8006868 <UART_SetConfig+0x348>
 8006736:	2310      	movs	r3, #16
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e095      	b.n	8006868 <UART_SetConfig+0x348>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <UART_SetConfig+0x2e0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d125      	bne.n	8006792 <UART_SetConfig+0x272>
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <UART_SetConfig+0x2cc>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006754:	d017      	beq.n	8006786 <UART_SetConfig+0x266>
 8006756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675a:	d817      	bhi.n	800678c <UART_SetConfig+0x26c>
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006760:	d00b      	beq.n	800677a <UART_SetConfig+0x25a>
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006766:	d811      	bhi.n	800678c <UART_SetConfig+0x26c>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <UART_SetConfig+0x254>
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x260>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x26c>
 8006774:	2301      	movs	r3, #1
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e076      	b.n	8006868 <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e073      	b.n	8006868 <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e070      	b.n	8006868 <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e06d      	b.n	8006868 <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e06a      	b.n	8006868 <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1b      	ldr	r2, [pc, #108]	; (8006804 <UART_SetConfig+0x2e4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d138      	bne.n	800680e <UART_SetConfig+0x2ee>
 800679c:	4b13      	ldr	r3, [pc, #76]	; (80067ec <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067aa:	d017      	beq.n	80067dc <UART_SetConfig+0x2bc>
 80067ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067b0:	d82a      	bhi.n	8006808 <UART_SetConfig+0x2e8>
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d00b      	beq.n	80067d0 <UART_SetConfig+0x2b0>
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d824      	bhi.n	8006808 <UART_SetConfig+0x2e8>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <UART_SetConfig+0x2aa>
 80067c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c6:	d006      	beq.n	80067d6 <UART_SetConfig+0x2b6>
 80067c8:	e01e      	b.n	8006808 <UART_SetConfig+0x2e8>
 80067ca:	2300      	movs	r3, #0
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e04b      	b.n	8006868 <UART_SetConfig+0x348>
 80067d0:	2302      	movs	r3, #2
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e048      	b.n	8006868 <UART_SetConfig+0x348>
 80067d6:	2304      	movs	r3, #4
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e045      	b.n	8006868 <UART_SetConfig+0x348>
 80067dc:	2308      	movs	r3, #8
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e042      	b.n	8006868 <UART_SetConfig+0x348>
 80067e2:	bf00      	nop
 80067e4:	efff69f3 	.word	0xefff69f3
 80067e8:	40011000 	.word	0x40011000
 80067ec:	40023800 	.word	0x40023800
 80067f0:	40004400 	.word	0x40004400
 80067f4:	40004800 	.word	0x40004800
 80067f8:	40004c00 	.word	0x40004c00
 80067fc:	40005000 	.word	0x40005000
 8006800:	40011400 	.word	0x40011400
 8006804:	40007800 	.word	0x40007800
 8006808:	2310      	movs	r3, #16
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e02c      	b.n	8006868 <UART_SetConfig+0x348>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a72      	ldr	r2, [pc, #456]	; (80069dc <UART_SetConfig+0x4bc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d125      	bne.n	8006864 <UART_SetConfig+0x344>
 8006818:	4b71      	ldr	r3, [pc, #452]	; (80069e0 <UART_SetConfig+0x4c0>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006826:	d017      	beq.n	8006858 <UART_SetConfig+0x338>
 8006828:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800682c:	d817      	bhi.n	800685e <UART_SetConfig+0x33e>
 800682e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006832:	d00b      	beq.n	800684c <UART_SetConfig+0x32c>
 8006834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006838:	d811      	bhi.n	800685e <UART_SetConfig+0x33e>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <UART_SetConfig+0x326>
 800683e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006842:	d006      	beq.n	8006852 <UART_SetConfig+0x332>
 8006844:	e00b      	b.n	800685e <UART_SetConfig+0x33e>
 8006846:	2300      	movs	r3, #0
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e00d      	b.n	8006868 <UART_SetConfig+0x348>
 800684c:	2302      	movs	r3, #2
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e00a      	b.n	8006868 <UART_SetConfig+0x348>
 8006852:	2304      	movs	r3, #4
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e007      	b.n	8006868 <UART_SetConfig+0x348>
 8006858:	2308      	movs	r3, #8
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e004      	b.n	8006868 <UART_SetConfig+0x348>
 800685e:	2310      	movs	r3, #16
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e001      	b.n	8006868 <UART_SetConfig+0x348>
 8006864:	2310      	movs	r3, #16
 8006866:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006870:	d15b      	bne.n	800692a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006872:	7ffb      	ldrb	r3, [r7, #31]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d828      	bhi.n	80068ca <UART_SetConfig+0x3aa>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x360>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe fd9c 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 80068a8:	61b8      	str	r0, [r7, #24]
        break;
 80068aa:	e013      	b.n	80068d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fe fdac 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 80068b0:	61b8      	str	r0, [r7, #24]
        break;
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <UART_SetConfig+0x4c4>)
 80068b6:	61bb      	str	r3, [r7, #24]
        break;
 80068b8:	e00c      	b.n	80068d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fe fc81 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 80068be:	61b8      	str	r0, [r7, #24]
        break;
 80068c0:	e008      	b.n	80068d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e004      	b.n	80068d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77bb      	strb	r3, [r7, #30]
        break;
 80068d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d074      	beq.n	80069c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	005a      	lsls	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	d916      	bls.n	8006924 <UART_SetConfig+0x404>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fc:	d212      	bcs.n	8006924 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f023 030f 	bic.w	r3, r3, #15
 8006906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	b29a      	uxth	r2, r3
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	4313      	orrs	r3, r2
 8006918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	89fa      	ldrh	r2, [r7, #14]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	e04f      	b.n	80069c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	77bb      	strb	r3, [r7, #30]
 8006928:	e04c      	b.n	80069c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800692a:	7ffb      	ldrb	r3, [r7, #31]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d828      	bhi.n	8006982 <UART_SetConfig+0x462>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x418>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006965 	.word	0x08006965
 8006940:	0800696d 	.word	0x0800696d
 8006944:	08006983 	.word	0x08006983
 8006948:	08006973 	.word	0x08006973
 800694c:	08006983 	.word	0x08006983
 8006950:	08006983 	.word	0x08006983
 8006954:	08006983 	.word	0x08006983
 8006958:	0800697b 	.word	0x0800697b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fe fd40 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8006960:	61b8      	str	r0, [r7, #24]
        break;
 8006962:	e013      	b.n	800698c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006964:	f7fe fd50 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8006968:	61b8      	str	r0, [r7, #24]
        break;
 800696a:	e00f      	b.n	800698c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <UART_SetConfig+0x4c4>)
 800696e:	61bb      	str	r3, [r7, #24]
        break;
 8006970:	e00c      	b.n	800698c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006972:	f7fe fc25 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8006976:	61b8      	str	r0, [r7, #24]
        break;
 8006978:	e008      	b.n	800698c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697e:	61bb      	str	r3, [r7, #24]
        break;
 8006980:	e004      	b.n	800698c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	77bb      	strb	r3, [r7, #30]
        break;
 800698a:	bf00      	nop
    }

    if (pclk != 0U)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	085a      	lsrs	r2, r3, #1
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	441a      	add	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d909      	bls.n	80069c0 <UART_SetConfig+0x4a0>
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d205      	bcs.n	80069c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	e001      	b.n	80069c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80069d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40007c00 	.word	0x40007c00
 80069e0:	40023800 	.word	0x40023800
 80069e4:	00f42400 	.word	0x00f42400

080069e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01a      	beq.n	8006afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae6:	d10a      	bne.n	8006afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	; 0x30
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b3c:	f7fb fd5a 	bl	80025f4 <HAL_GetTick>
 8006b40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d12e      	bne.n	8006bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f83b 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d021      	beq.n	8006bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	69b9      	ldr	r1, [r7, #24]
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	617b      	str	r3, [r7, #20]
   return(result);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e011      	b.n	8006bd2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bea:	e04f      	b.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d04b      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf4:	f7fb fcfe 	bl	80025f4 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e04e      	b.n	8006cac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d037      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d034      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d031      	beq.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d110      	bne.n	8006c58 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f838 	bl	8006cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2208      	movs	r2, #8
 8006c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e029      	b.n	8006cac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c66:	d111      	bne.n	8006c8c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f81e 	bl	8006cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e00f      	b.n	8006cac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2301      	moveq	r3, #1
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d0a0      	beq.n	8006bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b095      	sub	sp, #84	; 0x54
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cda:	643b      	str	r3, [r7, #64]	; 0x40
 8006cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d118      	bne.n	8006d5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 0310 	bic.w	r3, r3, #16
 8006d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	613b      	str	r3, [r7, #16]
   return(result);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d70:	bf00      	nop
 8006d72:	3754      	adds	r7, #84	; 0x54
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d121      	bne.n	8006dd2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <FMC_SDRAM_Init+0xb4>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	6851      	ldr	r1, [r2, #4]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	4311      	orrs	r1, r2
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	68d2      	ldr	r2, [r2, #12]
 8006da4:	4311      	orrs	r1, r2
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	6912      	ldr	r2, [r2, #16]
 8006daa:	4311      	orrs	r1, r2
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	6952      	ldr	r2, [r2, #20]
 8006db0:	4311      	orrs	r1, r2
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	6992      	ldr	r2, [r2, #24]
 8006db6:	4311      	orrs	r1, r2
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	69d2      	ldr	r2, [r2, #28]
 8006dbc:	4311      	orrs	r1, r2
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	6a12      	ldr	r2, [r2, #32]
 8006dc2:	4311      	orrs	r1, r2
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e026      	b.n	8006e20 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	69d9      	ldr	r1, [r3, #28]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	4319      	orrs	r1, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	430b      	orrs	r3, r1
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <FMC_SDRAM_Init+0xb4>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	6851      	ldr	r1, [r2, #4]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	6892      	ldr	r2, [r2, #8]
 8006e00:	4311      	orrs	r1, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	68d2      	ldr	r2, [r2, #12]
 8006e06:	4311      	orrs	r1, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	6912      	ldr	r2, [r2, #16]
 8006e0c:	4311      	orrs	r1, r2
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	6952      	ldr	r2, [r2, #20]
 8006e12:	4311      	orrs	r1, r2
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	6992      	ldr	r2, [r2, #24]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	ffff8000 	.word	0xffff8000

08006e34 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d128      	bne.n	8006e98 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	1e59      	subs	r1, r3, #1
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	4319      	orrs	r1, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	4319      	orrs	r1, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	031b      	lsls	r3, r3, #12
 8006e70:	4319      	orrs	r1, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	4319      	orrs	r1, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	051b      	lsls	r3, r3, #20
 8006e84:	4319      	orrs	r1, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	061b      	lsls	r3, r3, #24
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	431a      	orrs	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	609a      	str	r2, [r3, #8]
 8006e96:	e02d      	b.n	8006ef4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <FMC_SDRAM_Timing_Init+0xd0>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	68d2      	ldr	r2, [r2, #12]
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	0311      	lsls	r1, r2, #12
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	6952      	ldr	r2, [r2, #20]
 8006eac:	3a01      	subs	r2, #1
 8006eae:	0512      	lsls	r2, r2, #20
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	1e59      	subs	r1, r3, #1
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4319      	orrs	r1, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	4319      	orrs	r1, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	4319      	orrs	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	430b      	orrs	r3, r1
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	ff0f0fff 	.word	0xff0f0fff

08006f08 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <FMC_SDRAM_SendCommand+0x44>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	6811      	ldr	r1, [r2, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	6852      	ldr	r2, [r2, #4]
 8006f24:	4311      	orrs	r1, r2
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	6892      	ldr	r2, [r2, #8]
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	0152      	lsls	r2, r2, #5
 8006f2e:	4311      	orrs	r1, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	68d2      	ldr	r2, [r2, #12]
 8006f34:	0252      	lsls	r2, r2, #9
 8006f36:	430a      	orrs	r2, r1
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	ffc00000 	.word	0xffc00000

08006f50 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695a      	ldr	r2, [r3, #20]
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	0052      	lsls	r2, r2, #1
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	ffffc001 	.word	0xffffc001

08006f80 <__libc_init_array>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4d0d      	ldr	r5, [pc, #52]	; (8006fb8 <__libc_init_array+0x38>)
 8006f84:	4c0d      	ldr	r4, [pc, #52]	; (8006fbc <__libc_init_array+0x3c>)
 8006f86:	1b64      	subs	r4, r4, r5
 8006f88:	10a4      	asrs	r4, r4, #2
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	d109      	bne.n	8006fa4 <__libc_init_array+0x24>
 8006f90:	4d0b      	ldr	r5, [pc, #44]	; (8006fc0 <__libc_init_array+0x40>)
 8006f92:	4c0c      	ldr	r4, [pc, #48]	; (8006fc4 <__libc_init_array+0x44>)
 8006f94:	f000 f820 	bl	8006fd8 <_init>
 8006f98:	1b64      	subs	r4, r4, r5
 8006f9a:	10a4      	asrs	r4, r4, #2
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	d105      	bne.n	8006fae <__libc_init_array+0x2e>
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa8:	4798      	blx	r3
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7ee      	b.n	8006f8c <__libc_init_array+0xc>
 8006fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb2:	4798      	blx	r3
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	e7f2      	b.n	8006f9e <__libc_init_array+0x1e>
 8006fb8:	0800701c 	.word	0x0800701c
 8006fbc:	0800701c 	.word	0x0800701c
 8006fc0:	0800701c 	.word	0x0800701c
 8006fc4:	08007020 	.word	0x08007020

08006fc8 <memset>:
 8006fc8:	4402      	add	r2, r0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d100      	bne.n	8006fd2 <memset+0xa>
 8006fd0:	4770      	bx	lr
 8006fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd6:	e7f9      	b.n	8006fcc <memset+0x4>

08006fd8 <_init>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_fini>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr
