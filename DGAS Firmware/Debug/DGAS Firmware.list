
DGAS Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a48  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08005c44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005c44  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f67  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccd  00000000  00000000  00037fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003328  00000000  00000000  0003d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018105  00000000  00000000  000405a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f81c7  00000000  00000000  000586a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015086c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  001508bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005bf8 	.word	0x08005bf8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005bf8 	.word	0x08005bf8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <lcd_reset>:
	}
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
	return HAL_OK;
}

void lcd_reset(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <lcd_reset+0x28>)
 8000516:	f002 fb09 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800051a:	200a      	movs	r0, #10
 800051c:	f001 fc94 	bl	8001e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <lcd_reset+0x28>)
 8000526:	f002 fb01 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800052a:	200a      	movs	r0, #10
 800052c:	f001 fc8c 	bl	8001e48 <HAL_Delay>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020400 	.word	0x40020400

08000538 <sendCommand>:

void sendCommand(uint8_t cmd) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	uint16_t send = cmd;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	b29b      	uxth	r3, r3
 8000546:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <sendCommand+0x48>)
 800054e:	f002 faed 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fc78 	bl	8001e48 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 8000558:	f107 010e 	add.w	r1, r7, #14
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	2201      	movs	r2, #1
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <sendCommand+0x4c>)
 8000562:	f004 faa1 	bl	8004aa8 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f001 fc6e 	bl	8001e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <sendCommand+0x48>)
 8000572:	f002 fadb 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020400 	.word	0x40020400
 8000584:	20000208 	.word	0x20000208

08000588 <sendData>:

void sendData(uint8_t data) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint16_t send = 1 << 8 | data;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	b21b      	sxth	r3, r3
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	b21b      	sxth	r3, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <sendData+0x50>)
 80005a6:	f002 fac1 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fc4c 	bl	8001e48 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 80005b0:	f107 010e 	add.w	r1, r7, #14
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	2201      	movs	r2, #1
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <sendData+0x54>)
 80005ba:	f004 fa75 	bl	8004aa8 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 fc42 	bl	8001e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <sendData+0x50>)
 80005ca:	f002 faaf 	bl	8002b2c <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020400 	.word	0x40020400
 80005dc:	20000208 	.word	0x20000208

080005e0 <lcd_init>:

HAL_StatusTypeDef lcd_init(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	48fd      	ldr	r0, [pc, #1012]	; (80009e0 <lcd_init+0x400>)
 80005ea:	f002 fa9f 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	48fb      	ldr	r0, [pc, #1004]	; (80009e0 <lcd_init+0x400>)
 80005f4:	f002 fa9a 	bl	8002b2c <HAL_GPIO_WritePin>
	lcd_reset();
 80005f8:	f7ff ff88 	bl	800050c <lcd_reset>
#if 1
sendCommand(0xFF);
 80005fc:	20ff      	movs	r0, #255	; 0xff
 80005fe:	f7ff ff9b 	bl	8000538 <sendCommand>
sendData(0x77);
 8000602:	2077      	movs	r0, #119	; 0x77
 8000604:	f7ff ffc0 	bl	8000588 <sendData>
sendData(0x01);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff ffbd 	bl	8000588 <sendData>
sendData(0x00);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ffba 	bl	8000588 <sendData>
sendData(0x00);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffb7 	bl	8000588 <sendData>
sendData(0x10);
 800061a:	2010      	movs	r0, #16
 800061c:	f7ff ffb4 	bl	8000588 <sendData>

 sendCommand(0xC0);
 8000620:	20c0      	movs	r0, #192	; 0xc0
 8000622:	f7ff ff89 	bl	8000538 <sendCommand>
 sendData(0x3B);
 8000626:	203b      	movs	r0, #59	; 0x3b
 8000628:	f7ff ffae 	bl	8000588 <sendData>
 sendData(0x00);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ffab 	bl	8000588 <sendData>

 sendCommand(0xC1);
 8000632:	20c1      	movs	r0, #193	; 0xc1
 8000634:	f7ff ff80 	bl	8000538 <sendCommand>
 sendData(0x0B); //VBP
 8000638:	200b      	movs	r0, #11
 800063a:	f7ff ffa5 	bl	8000588 <sendData>
 sendData(0x02);
 800063e:	2002      	movs	r0, #2
 8000640:	f7ff ffa2 	bl	8000588 <sendData>

 sendCommand(0xC2);
 8000644:	20c2      	movs	r0, #194	; 0xc2
 8000646:	f7ff ff77 	bl	8000538 <sendCommand>
 sendData(0x00);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff9c 	bl	8000588 <sendData>
 sendData(0x02);
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff ff99 	bl	8000588 <sendData>

 sendCommand(0xCC);
 8000656:	20cc      	movs	r0, #204	; 0xcc
 8000658:	f7ff ff6e 	bl	8000538 <sendCommand>
 sendData(0x10);
 800065c:	2010      	movs	r0, #16
 800065e:	f7ff ff93 	bl	8000588 <sendData>

 sendCommand(0xCD);
 8000662:	20cd      	movs	r0, #205	; 0xcd
 8000664:	f7ff ff68 	bl	8000538 <sendCommand>
 sendData(0x08);
 8000668:	2008      	movs	r0, #8
 800066a:	f7ff ff8d 	bl	8000588 <sendData>

 sendCommand ( 0xB0); //Positive Voltage Gamma Control
 800066e:	20b0      	movs	r0, #176	; 0xb0
 8000670:	f7ff ff62 	bl	8000538 <sendCommand>
 sendData ( 0x02);
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff ff87 	bl	8000588 <sendData>
 sendData ( 0x13);
 800067a:	2013      	movs	r0, #19
 800067c:	f7ff ff84 	bl	8000588 <sendData>
 sendData ( 0x1B);
 8000680:	201b      	movs	r0, #27
 8000682:	f7ff ff81 	bl	8000588 <sendData>
 sendData ( 0x0D);
 8000686:	200d      	movs	r0, #13
 8000688:	f7ff ff7e 	bl	8000588 <sendData>
 sendData ( 0x10);
 800068c:	2010      	movs	r0, #16
 800068e:	f7ff ff7b 	bl	8000588 <sendData>
 sendData ( 0x05);
 8000692:	2005      	movs	r0, #5
 8000694:	f7ff ff78 	bl	8000588 <sendData>
 sendData ( 0x08);
 8000698:	2008      	movs	r0, #8
 800069a:	f7ff ff75 	bl	8000588 <sendData>
 sendData ( 0x07);
 800069e:	2007      	movs	r0, #7
 80006a0:	f7ff ff72 	bl	8000588 <sendData>
 sendData ( 0x07);
 80006a4:	2007      	movs	r0, #7
 80006a6:	f7ff ff6f 	bl	8000588 <sendData>
 sendData ( 0x24);
 80006aa:	2024      	movs	r0, #36	; 0x24
 80006ac:	f7ff ff6c 	bl	8000588 <sendData>
 sendData ( 0x04);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f7ff ff69 	bl	8000588 <sendData>
 sendData ( 0x11);
 80006b6:	2011      	movs	r0, #17
 80006b8:	f7ff ff66 	bl	8000588 <sendData>
 sendData ( 0x0E);
 80006bc:	200e      	movs	r0, #14
 80006be:	f7ff ff63 	bl	8000588 <sendData>
 sendData ( 0x2C);
 80006c2:	202c      	movs	r0, #44	; 0x2c
 80006c4:	f7ff ff60 	bl	8000588 <sendData>
 sendData ( 0x33);
 80006c8:	2033      	movs	r0, #51	; 0x33
 80006ca:	f7ff ff5d 	bl	8000588 <sendData>
 sendData ( 0x1D);
 80006ce:	201d      	movs	r0, #29
 80006d0:	f7ff ff5a 	bl	8000588 <sendData>

 sendCommand ( 0xB1); //Negative Voltage Gamma Control
 80006d4:	20b1      	movs	r0, #177	; 0xb1
 80006d6:	f7ff ff2f 	bl	8000538 <sendCommand>
 sendData ( 0x05);
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff54 	bl	8000588 <sendData>
 sendData ( 0x13);
 80006e0:	2013      	movs	r0, #19
 80006e2:	f7ff ff51 	bl	8000588 <sendData>
 sendData ( 0x1B);
 80006e6:	201b      	movs	r0, #27
 80006e8:	f7ff ff4e 	bl	8000588 <sendData>
 sendData ( 0x0D);
 80006ec:	200d      	movs	r0, #13
 80006ee:	f7ff ff4b 	bl	8000588 <sendData>
 sendData ( 0x11);
 80006f2:	2011      	movs	r0, #17
 80006f4:	f7ff ff48 	bl	8000588 <sendData>
 sendData ( 0x05);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f7ff ff45 	bl	8000588 <sendData>
 sendData ( 0x08);
 80006fe:	2008      	movs	r0, #8
 8000700:	f7ff ff42 	bl	8000588 <sendData>
 sendData ( 0x07);
 8000704:	2007      	movs	r0, #7
 8000706:	f7ff ff3f 	bl	8000588 <sendData>
 sendData ( 0x07);
 800070a:	2007      	movs	r0, #7
 800070c:	f7ff ff3c 	bl	8000588 <sendData>
 sendData ( 0x24);
 8000710:	2024      	movs	r0, #36	; 0x24
 8000712:	f7ff ff39 	bl	8000588 <sendData>
 sendData ( 0x04);
 8000716:	2004      	movs	r0, #4
 8000718:	f7ff ff36 	bl	8000588 <sendData>
 sendData ( 0x11);
 800071c:	2011      	movs	r0, #17
 800071e:	f7ff ff33 	bl	8000588 <sendData>
 sendData ( 0x0E);
 8000722:	200e      	movs	r0, #14
 8000724:	f7ff ff30 	bl	8000588 <sendData>
 sendData ( 0x2C);
 8000728:	202c      	movs	r0, #44	; 0x2c
 800072a:	f7ff ff2d 	bl	8000588 <sendData>
 sendData ( 0x33);
 800072e:	2033      	movs	r0, #51	; 0x33
 8000730:	f7ff ff2a 	bl	8000588 <sendData>
 sendData ( 0x1D);
 8000734:	201d      	movs	r0, #29
 8000736:	f7ff ff27 	bl	8000588 <sendData>

 sendCommand(0xFF);
 800073a:	20ff      	movs	r0, #255	; 0xff
 800073c:	f7ff fefc 	bl	8000538 <sendCommand>
 sendData(0x77);
 8000740:	2077      	movs	r0, #119	; 0x77
 8000742:	f7ff ff21 	bl	8000588 <sendData>
 sendData(0x01);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff1e 	bl	8000588 <sendData>
 sendData(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff1b 	bl	8000588 <sendData>
 sendData(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff18 	bl	8000588 <sendData>
 sendData(0x11);
 8000758:	2011      	movs	r0, #17
 800075a:	f7ff ff15 	bl	8000588 <sendData>

 sendCommand(0xB0);
 800075e:	20b0      	movs	r0, #176	; 0xb0
 8000760:	f7ff feea 	bl	8000538 <sendCommand>
 sendData(0x5d);//5d
 8000764:	205d      	movs	r0, #93	; 0x5d
 8000766:	f7ff ff0f 	bl	8000588 <sendData>

 sendCommand(0xB1); //VCOM amplitude setting
 800076a:	20b1      	movs	r0, #177	; 0xb1
 800076c:	f7ff fee4 	bl	8000538 <sendCommand>
 sendData(0x43); //43
 8000770:	2043      	movs	r0, #67	; 0x43
 8000772:	f7ff ff09 	bl	8000588 <sendData>

 sendCommand(0xB2); //VGH Voltage setting
 8000776:	20b2      	movs	r0, #178	; 0xb2
 8000778:	f7ff fede 	bl	8000538 <sendCommand>
 sendData(0x81); //12V
 800077c:	2081      	movs	r0, #129	; 0x81
 800077e:	f7ff ff03 	bl	8000588 <sendData>

 sendCommand(0xB3);
 8000782:	20b3      	movs	r0, #179	; 0xb3
 8000784:	f7ff fed8 	bl	8000538 <sendCommand>
 sendData(0x80);
 8000788:	2080      	movs	r0, #128	; 0x80
 800078a:	f7ff fefd 	bl	8000588 <sendData>

 sendCommand(0xB5); //VGL Voltage setting
 800078e:	20b5      	movs	r0, #181	; 0xb5
 8000790:	f7ff fed2 	bl	8000538 <sendCommand>
 sendData(0x43); //-8.3V
 8000794:	2043      	movs	r0, #67	; 0x43
 8000796:	f7ff fef7 	bl	8000588 <sendData>

 sendCommand(0xB7);
 800079a:	20b7      	movs	r0, #183	; 0xb7
 800079c:	f7ff fecc 	bl	8000538 <sendCommand>
 sendData(0x85);
 80007a0:	2085      	movs	r0, #133	; 0x85
 80007a2:	f7ff fef1 	bl	8000588 <sendData>

 sendCommand(0xB8);
 80007a6:	20b8      	movs	r0, #184	; 0xb8
 80007a8:	f7ff fec6 	bl	8000538 <sendCommand>
 sendData(0x20);
 80007ac:	2020      	movs	r0, #32
 80007ae:	f7ff feeb 	bl	8000588 <sendData>

 sendCommand(0xC1);
 80007b2:	20c1      	movs	r0, #193	; 0xc1
 80007b4:	f7ff fec0 	bl	8000538 <sendCommand>
 sendData(0x78);
 80007b8:	2078      	movs	r0, #120	; 0x78
 80007ba:	f7ff fee5 	bl	8000588 <sendData>

 sendCommand(0xC2);
 80007be:	20c2      	movs	r0, #194	; 0xc2
 80007c0:	f7ff feba 	bl	8000538 <sendCommand>
 sendData(0x78);
 80007c4:	2078      	movs	r0, #120	; 0x78
 80007c6:	f7ff fedf 	bl	8000588 <sendData>

 sendCommand(0xD0);
 80007ca:	20d0      	movs	r0, #208	; 0xd0
 80007cc:	f7ff feb4 	bl	8000538 <sendCommand>
 sendData(0x88);
 80007d0:	2088      	movs	r0, #136	; 0x88
 80007d2:	f7ff fed9 	bl	8000588 <sendData>

 sendCommand(0xE0);
 80007d6:	20e0      	movs	r0, #224	; 0xe0
 80007d8:	f7ff feae 	bl	8000538 <sendCommand>
 sendData(0x00);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fed3 	bl	8000588 <sendData>
 sendData(0x00);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fed0 	bl	8000588 <sendData>
 sendData(0x02);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff fecd 	bl	8000588 <sendData>

 sendCommand(0xE1);
 80007ee:	20e1      	movs	r0, #225	; 0xe1
 80007f0:	f7ff fea2 	bl	8000538 <sendCommand>
 sendData(0x03);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f7ff fec7 	bl	8000588 <sendData>
 sendData(0xA0);
 80007fa:	20a0      	movs	r0, #160	; 0xa0
 80007fc:	f7ff fec4 	bl	8000588 <sendData>
 sendData(0x00);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fec1 	bl	8000588 <sendData>
 sendData(0x00);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff febe 	bl	8000588 <sendData>
 sendData(0x04);
 800080c:	2004      	movs	r0, #4
 800080e:	f7ff febb 	bl	8000588 <sendData>
 sendData(0xA0);
 8000812:	20a0      	movs	r0, #160	; 0xa0
 8000814:	f7ff feb8 	bl	8000588 <sendData>
 sendData(0x00);
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff feb5 	bl	8000588 <sendData>
 sendData(0x00);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff feb2 	bl	8000588 <sendData>
 sendData(0x00);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff feaf 	bl	8000588 <sendData>
 sendData(0x20);
 800082a:	2020      	movs	r0, #32
 800082c:	f7ff feac 	bl	8000588 <sendData>
 sendData(0x20);
 8000830:	2020      	movs	r0, #32
 8000832:	f7ff fea9 	bl	8000588 <sendData>

 sendCommand(0xE2);
 8000836:	20e2      	movs	r0, #226	; 0xe2
 8000838:	f7ff fe7e 	bl	8000538 <sendCommand>
 sendData(0x00);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fea3 	bl	8000588 <sendData>
 sendData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fea0 	bl	8000588 <sendData>
 sendData(0x00);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fe9d 	bl	8000588 <sendData>
 sendData(0x00);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe9a 	bl	8000588 <sendData>
 sendData(0x00);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe97 	bl	8000588 <sendData>
 sendData(0x00);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe94 	bl	8000588 <sendData>
 sendData(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe91 	bl	8000588 <sendData>
 sendData(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fe8e 	bl	8000588 <sendData>
 sendData(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fe8b 	bl	8000588 <sendData>
 sendData(0x00);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fe88 	bl	8000588 <sendData>
 sendData(0x00);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fe85 	bl	8000588 <sendData>
 sendData(0x00);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe82 	bl	8000588 <sendData>
 sendData(0x00);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fe7f 	bl	8000588 <sendData>

 sendCommand(0xE3);
 800088a:	20e3      	movs	r0, #227	; 0xe3
 800088c:	f7ff fe54 	bl	8000538 <sendCommand>
 sendData(0x00);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fe79 	bl	8000588 <sendData>
 sendData(0x00);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fe76 	bl	8000588 <sendData>
 sendData(0x11);
 800089c:	2011      	movs	r0, #17
 800089e:	f7ff fe73 	bl	8000588 <sendData>
 sendData(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fe70 	bl	8000588 <sendData>

 sendCommand(0xE4);
 80008a8:	20e4      	movs	r0, #228	; 0xe4
 80008aa:	f7ff fe45 	bl	8000538 <sendCommand>
 sendData(0x22);
 80008ae:	2022      	movs	r0, #34	; 0x22
 80008b0:	f7ff fe6a 	bl	8000588 <sendData>
 sendData(0x00);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe67 	bl	8000588 <sendData>

 sendCommand(0xE5);
 80008ba:	20e5      	movs	r0, #229	; 0xe5
 80008bc:	f7ff fe3c 	bl	8000538 <sendCommand>
 sendData(0x05);
 80008c0:	2005      	movs	r0, #5
 80008c2:	f7ff fe61 	bl	8000588 <sendData>
 sendData(0xEC);
 80008c6:	20ec      	movs	r0, #236	; 0xec
 80008c8:	f7ff fe5e 	bl	8000588 <sendData>
 sendData(0xA0);
 80008cc:	20a0      	movs	r0, #160	; 0xa0
 80008ce:	f7ff fe5b 	bl	8000588 <sendData>
 sendData(0xA0);
 80008d2:	20a0      	movs	r0, #160	; 0xa0
 80008d4:	f7ff fe58 	bl	8000588 <sendData>
 sendData(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe55 	bl	8000588 <sendData>
 sendData(0xEE);
 80008de:	20ee      	movs	r0, #238	; 0xee
 80008e0:	f7ff fe52 	bl	8000588 <sendData>
 sendData(0xA0);
 80008e4:	20a0      	movs	r0, #160	; 0xa0
 80008e6:	f7ff fe4f 	bl	8000588 <sendData>
 sendData(0xA0);
 80008ea:	20a0      	movs	r0, #160	; 0xa0
 80008ec:	f7ff fe4c 	bl	8000588 <sendData>
 sendData(0x00);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fe49 	bl	8000588 <sendData>
 sendData(0x00);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fe46 	bl	8000588 <sendData>
 sendData(0x00);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe43 	bl	8000588 <sendData>
 sendData(0x00);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fe40 	bl	8000588 <sendData>
 sendData(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fe3d 	bl	8000588 <sendData>
 sendData(0x00);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fe3a 	bl	8000588 <sendData>
 sendData(0x00);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fe37 	bl	8000588 <sendData>
 sendData(0x00);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fe34 	bl	8000588 <sendData>

 sendCommand(0xE6);
 8000920:	20e6      	movs	r0, #230	; 0xe6
 8000922:	f7ff fe09 	bl	8000538 <sendCommand>
 sendData(0x00);
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fe2e 	bl	8000588 <sendData>
 sendData(0x00);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fe2b 	bl	8000588 <sendData>
 sendData(0x11);
 8000932:	2011      	movs	r0, #17
 8000934:	f7ff fe28 	bl	8000588 <sendData>
 sendData(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fe25 	bl	8000588 <sendData>

 sendCommand(0xE7);
 800093e:	20e7      	movs	r0, #231	; 0xe7
 8000940:	f7ff fdfa 	bl	8000538 <sendCommand>
 sendData(0x22);
 8000944:	2022      	movs	r0, #34	; 0x22
 8000946:	f7ff fe1f 	bl	8000588 <sendData>
 sendData(0x00);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fe1c 	bl	8000588 <sendData>

 sendCommand(0xE8);
 8000950:	20e8      	movs	r0, #232	; 0xe8
 8000952:	f7ff fdf1 	bl	8000538 <sendCommand>
 sendData(0x06);
 8000956:	2006      	movs	r0, #6
 8000958:	f7ff fe16 	bl	8000588 <sendData>
 sendData(0xED);
 800095c:	20ed      	movs	r0, #237	; 0xed
 800095e:	f7ff fe13 	bl	8000588 <sendData>
 sendData(0xA0);
 8000962:	20a0      	movs	r0, #160	; 0xa0
 8000964:	f7ff fe10 	bl	8000588 <sendData>
 sendData(0xA0);
 8000968:	20a0      	movs	r0, #160	; 0xa0
 800096a:	f7ff fe0d 	bl	8000588 <sendData>
 sendData(0x08);
 800096e:	2008      	movs	r0, #8
 8000970:	f7ff fe0a 	bl	8000588 <sendData>
 sendData(0xEF);
 8000974:	20ef      	movs	r0, #239	; 0xef
 8000976:	f7ff fe07 	bl	8000588 <sendData>
 sendData(0xA0);
 800097a:	20a0      	movs	r0, #160	; 0xa0
 800097c:	f7ff fe04 	bl	8000588 <sendData>
 sendData(0xA0);
 8000980:	20a0      	movs	r0, #160	; 0xa0
 8000982:	f7ff fe01 	bl	8000588 <sendData>
 sendData(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fdfe 	bl	8000588 <sendData>
 sendData(0x00);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fdfb 	bl	8000588 <sendData>
 sendData(0x00);
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff fdf8 	bl	8000588 <sendData>
 sendData(0x00);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fdf5 	bl	8000588 <sendData>
 sendData(0x00);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fdf2 	bl	8000588 <sendData>
 sendData(0x00);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fdef 	bl	8000588 <sendData>
 sendData(0x00);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fdec 	bl	8000588 <sendData>
 sendData(0x00);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fde9 	bl	8000588 <sendData>

 sendCommand(0xEB);
 80009b6:	20eb      	movs	r0, #235	; 0xeb
 80009b8:	f7ff fdbe 	bl	8000538 <sendCommand>
 sendData(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fde3 	bl	8000588 <sendData>
 sendData(0x00);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fde0 	bl	8000588 <sendData>
 sendData(0x40);
 80009c8:	2040      	movs	r0, #64	; 0x40
 80009ca:	f7ff fddd 	bl	8000588 <sendData>
 sendData(0x40);
 80009ce:	2040      	movs	r0, #64	; 0x40
 80009d0:	f7ff fdda 	bl	8000588 <sendData>
 sendData(0x00);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fdd7 	bl	8000588 <sendData>
 sendData(0x00);
 80009da:	2000      	movs	r0, #0
 80009dc:	e002      	b.n	80009e4 <lcd_init+0x404>
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400
 80009e4:	f7ff fdd0 	bl	8000588 <sendData>
 sendData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fdcd 	bl	8000588 <sendData>

 sendCommand(0xED);
 80009ee:	20ed      	movs	r0, #237	; 0xed
 80009f0:	f7ff fda2 	bl	8000538 <sendCommand>
 sendData(0xFF);
 80009f4:	20ff      	movs	r0, #255	; 0xff
 80009f6:	f7ff fdc7 	bl	8000588 <sendData>
 sendData(0xFF);
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	f7ff fdc4 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a00:	20ff      	movs	r0, #255	; 0xff
 8000a02:	f7ff fdc1 	bl	8000588 <sendData>
 sendData(0xBA);
 8000a06:	20ba      	movs	r0, #186	; 0xba
 8000a08:	f7ff fdbe 	bl	8000588 <sendData>
 sendData(0x0A);
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f7ff fdbb 	bl	8000588 <sendData>
 sendData(0xBF);
 8000a12:	20bf      	movs	r0, #191	; 0xbf
 8000a14:	f7ff fdb8 	bl	8000588 <sendData>
 sendData(0x45);
 8000a18:	2045      	movs	r0, #69	; 0x45
 8000a1a:	f7ff fdb5 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	f7ff fdb2 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a24:	20ff      	movs	r0, #255	; 0xff
 8000a26:	f7ff fdaf 	bl	8000588 <sendData>
 sendData(0x54);
 8000a2a:	2054      	movs	r0, #84	; 0x54
 8000a2c:	f7ff fdac 	bl	8000588 <sendData>
 sendData(0xFB);
 8000a30:	20fb      	movs	r0, #251	; 0xfb
 8000a32:	f7ff fda9 	bl	8000588 <sendData>
 sendData(0xA0);
 8000a36:	20a0      	movs	r0, #160	; 0xa0
 8000a38:	f7ff fda6 	bl	8000588 <sendData>
 sendData(0xAB);
 8000a3c:	20ab      	movs	r0, #171	; 0xab
 8000a3e:	f7ff fda3 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	f7ff fda0 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	f7ff fd9d 	bl	8000588 <sendData>
 sendData(0xFF);
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	f7ff fd9a 	bl	8000588 <sendData>

 sendCommand(0xEF);
 8000a54:	20ef      	movs	r0, #239	; 0xef
 8000a56:	f7ff fd6f 	bl	8000538 <sendCommand>
 sendData(0x10);
 8000a5a:	2010      	movs	r0, #16
 8000a5c:	f7ff fd94 	bl	8000588 <sendData>
 sendData(0x0D);
 8000a60:	200d      	movs	r0, #13
 8000a62:	f7ff fd91 	bl	8000588 <sendData>
 sendData(0x04);
 8000a66:	2004      	movs	r0, #4
 8000a68:	f7ff fd8e 	bl	8000588 <sendData>
 sendData(0x08);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff fd8b 	bl	8000588 <sendData>
 sendData(0x3F);
 8000a72:	203f      	movs	r0, #63	; 0x3f
 8000a74:	f7ff fd88 	bl	8000588 <sendData>
 sendData(0x1F);
 8000a78:	201f      	movs	r0, #31
 8000a7a:	f7ff fd85 	bl	8000588 <sendData>

 sendCommand(0xFF);
 8000a7e:	20ff      	movs	r0, #255	; 0xff
 8000a80:	f7ff fd5a 	bl	8000538 <sendCommand>
 sendData(0x77);
 8000a84:	2077      	movs	r0, #119	; 0x77
 8000a86:	f7ff fd7f 	bl	8000588 <sendData>
 sendData(0x01);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fd7c 	bl	8000588 <sendData>
 sendData(0x00);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fd79 	bl	8000588 <sendData>
 sendData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fd76 	bl	8000588 <sendData>
 sendData(0x13);
 8000a9c:	2013      	movs	r0, #19
 8000a9e:	f7ff fd73 	bl	8000588 <sendData>

 sendCommand(0xEF);
 8000aa2:	20ef      	movs	r0, #239	; 0xef
 8000aa4:	f7ff fd48 	bl	8000538 <sendCommand>
 sendData(0x08);
 8000aa8:	2008      	movs	r0, #8
 8000aaa:	f7ff fd6d 	bl	8000588 <sendData>

 sendCommand(0xFF);
 8000aae:	20ff      	movs	r0, #255	; 0xff
 8000ab0:	f7ff fd42 	bl	8000538 <sendCommand>
 sendData(0x77);
 8000ab4:	2077      	movs	r0, #119	; 0x77
 8000ab6:	f7ff fd67 	bl	8000588 <sendData>
 sendData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fd64 	bl	8000588 <sendData>
 sendData(0x00);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fd61 	bl	8000588 <sendData>
 sendData(0x00);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fd5e 	bl	8000588 <sendData>
 sendData(0x00);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fd5b 	bl	8000588 <sendData>
  sendCommand (0xD2);
WriteData (0x08);
#endif
/////////////////Bring up the internal test picture///////////////////////////////////
#endif
sendCommand(0x11);
 8000ad2:	2011      	movs	r0, #17
 8000ad4:	f7ff fd30 	bl	8000538 <sendCommand>

HAL_Delay(120);
 8000ad8:	2078      	movs	r0, #120	; 0x78
 8000ada:	f001 f9b5 	bl	8001e48 <HAL_Delay>

sendCommand(0x29);
 8000ade:	2029      	movs	r0, #41	; 0x29
 8000ae0:	f7ff fd2a 	bl	8000538 <sendCommand>

sendCommand(0x36);
 8000ae4:	2036      	movs	r0, #54	; 0x36
 8000ae6:	f7ff fd27 	bl	8000538 <sendCommand>
sendData(0x00);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fd4c 	bl	8000588 <sendData>

sendCommand(0x3A);
 8000af0:	203a      	movs	r0, #58	; 0x3a
 8000af2:	f7ff fd21 	bl	8000538 <sendCommand>
sendData(0x60);//0x60 18bit 0x50 16bit
 8000af6:	2060      	movs	r0, #96	; 0x60
 8000af8:	f7ff fd46 	bl	8000588 <sendData>
sendCommand(0x13);
 8000afc:	2013      	movs	r0, #19
 8000afe:	f7ff fd1b 	bl	8000538 <sendCommand>
//sendCommand(0x23);
	return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <fmc_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SDRAM_START_ADDR 0xC0000000
#define SDRAM_SIZE 0x200000

void fmc_init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	  FMC_SDRAM_CommandTypeDef Command;
	  HAL_StatusTypeDef status;
	  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
	  /* Step 3: Configure a clock configuration enable command */
	   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
	   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000b12:	2310      	movs	r3, #16
 8000b14:	60bb      	str	r3, [r7, #8]
	   Command.AutoRefreshNumber      = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
	   Command.ModeRegisterDefinition = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
	   status = HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <fmc_init+0x80>)
 8000b28:	f003 feb6 	bl	8004898 <HAL_SDRAM_SendCommand>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	75fb      	strb	r3, [r7, #23]
	   HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 f989 	bl	8001e48 <HAL_Delay>
	   /* Step 5: Configure a PALL (precharge all) command */
	   Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000b36:	2302      	movs	r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b40:	4619      	mov	r1, r3
 8000b42:	4811      	ldr	r0, [pc, #68]	; (8000b88 <fmc_init+0x80>)
 8000b44:	f003 fea8 	bl	8004898 <HAL_SDRAM_SendCommand>
	   /* Step 6: Configure an Auto Refresh command */
	   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000b48:	2303      	movs	r3, #3
 8000b4a:	607b      	str	r3, [r7, #4]
	   Command.AutoRefreshNumber      = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <fmc_init+0x80>)
 8000b5a:	f003 fe9d 	bl	8004898 <HAL_SDRAM_SendCommand>
	   /* Step 7: Program the external memory mode register */
	   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000b5e:	2304      	movs	r3, #4
 8000b60:	607b      	str	r3, [r7, #4]
	   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000b62:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b66:	613b      	str	r3, [r7, #16]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <fmc_init+0x80>)
 8000b72:	f003 fe91 	bl	8004898 <HAL_SDRAM_SendCommand>
	   /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	   /* Set the device refresh rate
	    * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
	            = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1105);
 8000b76:	f240 4151 	movw	r1, #1105	; 0x451
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <fmc_init+0x80>)
 8000b7c:	f003 fec1 	bl	8004902 <HAL_SDRAM_ProgramRefreshRate>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002f4 	.word	0x200002f4

08000b8c <fmc_test>:

void fmc_test(void) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	e007      	b.n	8000ba8 <fmc_test+0x1c>
		*(__IO uint8_t*) (SDRAM_START_ADDR + i) = 0x14;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000b9e:	2214      	movs	r2, #20
 8000ba0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000bae:	dbf3      	blt.n	8000b98 <fmc_test+0xc>
	}
	return;
 8000bb0:	bf00      	nop

}
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <fill_mem>:

void fill_mem(uint8_t value) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e008      	b.n	8000bde <fill_mem+0x22>
			*(__IO uint8_t*) (SDRAM_START_ADDR + i) = value;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000be4:	dbf2      	blt.n	8000bcc <fill_mem+0x10>
	}
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <lcd_test>:

void lcd_test(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	fill_mem(0x00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ffdf 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f001 f922 	bl	8001e48 <HAL_Delay>
	fill_mem(0x10);
 8000c04:	2010      	movs	r0, #16
 8000c06:	f7ff ffd9 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f001 f91c 	bl	8001e48 <HAL_Delay>
	fill_mem(0xAA);
 8000c10:	20aa      	movs	r0, #170	; 0xaa
 8000c12:	f7ff ffd3 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f001 f916 	bl	8001e48 <HAL_Delay>
	fill_mem(0xDD);
 8000c1c:	20dd      	movs	r0, #221	; 0xdd
 8000c1e:	f7ff ffcd 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f001 f910 	bl	8001e48 <HAL_Delay>
	fill_mem(0xE1);
 8000c28:	20e1      	movs	r0, #225	; 0xe1
 8000c2a:	f7ff ffc7 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000c2e:	2064      	movs	r0, #100	; 0x64
 8000c30:	f001 f90a 	bl	8001e48 <HAL_Delay>
	fill_mem(0x0F);
 8000c34:	200f      	movs	r0, #15
 8000c36:	f7ff ffc1 	bl	8000bbc <fill_mem>
	HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 f904 	bl	8001e48 <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f001 f8a1 	bl	8001d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f820 	bl	8000c90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 faf6 	bl	8001240 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c54:	f000 f888 	bl	8000d68 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000c58:	f000 f8d8 	bl	8000e0c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000c5c:	f000 f90c 	bl	8000e78 <MX_CAN2_Init>
  MX_FMC_Init();
 8000c60:	f000 fa9c 	bl	800119c <MX_FMC_Init>
  MX_I2C4_Init();
 8000c64:	f000 f93e 	bl	8000ee4 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000c68:	f000 f9fe 	bl	8001068 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000c6c:	f000 fa28 	bl	80010c0 <MX_SPI1_Init>
  MX_UART4_Init();
 8000c70:	f000 fa64 	bl	800113c <MX_UART4_Init>
  MX_LTDC_Init();
 8000c74:	f000 f976 	bl	8000f64 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c78:	f7ff fcb2 	bl	80005e0 <lcd_init>
  fmc_init();
 8000c7c:	f7ff ff44 	bl	8000b08 <fmc_init>
  HAL_Delay(10);
 8000c80:	200a      	movs	r0, #10
 8000c82:	f001 f8e1 	bl	8001e48 <HAL_Delay>
  fmc_test();
 8000c86:	f7ff ff81 	bl	8000b8c <fmc_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_test();
 8000c8a:	f7ff ffb3 	bl	8000bf4 <lcd_test>
 8000c8e:	e7fc      	b.n	8000c8a <main+0x46>

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	2230      	movs	r2, #48	; 0x30
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 ffa2 	bl	8005be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <SystemClock_Config+0xd0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <SystemClock_Config+0xd0>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <SystemClock_Config+0xd0>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <SystemClock_Config+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <SystemClock_Config+0xd4>)
 8000cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SystemClock_Config+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2310      	movs	r3, #16
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cfc:	23d8      	movs	r3, #216	; 0xd8
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fcd7 	bl	80036c0 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d18:	f000 fb28 	bl	800136c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d1c:	f002 fbbe 	bl	800349c <HAL_PWREx_EnableOverDrive>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d26:	f000 fb21 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2107      	movs	r1, #7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 ff5d 	bl	8003c08 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d54:	f000 fb0a 	bl	800136c <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3750      	adds	r7, #80	; 0x50
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_ADC1_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dca:	f001 f861 	bl	8001e90 <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 faca 	bl	800136c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dea:	f001 f895 	bl	8001f18 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 faba 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000028 	.word	0x20000028
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <MX_CAN1_Init+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e18:	2210      	movs	r2, #16
 8000e1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_CAN1_Init+0x64>)
 8000e5c:	f001 faac 	bl	80023b8 <HAL_CAN_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e66:	f000 fa81 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000070 	.word	0x20000070
 8000e74:	40006400 	.word	0x40006400

08000e78 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <MX_CAN2_Init+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_CAN2_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_CAN2_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_CAN2_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_CAN2_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_CAN2_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_CAN2_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_CAN2_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_CAN2_Init+0x64>)
 8000ec8:	f001 fa76 	bl	80023b8 <HAL_CAN_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000ed2:	f000 fa4b 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000098 	.word	0x20000098
 8000ee0:	40006800 	.word	0x40006800

08000ee4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C4_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C4_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f20:	f001 fe1e 	bl	8002b60 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f000 fa1f 	bl	800136c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f32:	f001 feb1 	bl	8002c98 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 fa16 	bl	800136c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C4_Init+0x74>)
 8000f44:	f001 fef3 	bl	8002d2e <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fa0d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000c0 	.word	0x200000c0
 8000f5c:	40006000 	.word	0x40006000
 8000f60:	20404768 	.word	0x20404768

08000f64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2234      	movs	r2, #52	; 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fe39 	bl	8005be8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f78:	4a3a      	ldr	r2, [pc, #232]	; (8001064 <MX_LTDC_Init+0x100>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa2:	220e      	movs	r2, #14
 8000fa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 14;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa8:	220e      	movs	r2, #14
 8000faa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 494;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fae:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 494;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fb6:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 500;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fbe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 500;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fe6:	f001 feef 	bl	8002dc8 <HAL_LTDC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 f9bc 	bl	800136c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ff8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ffc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001002:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001006:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001018:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xc0000000;
 800101e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800102a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8001036:	23ff      	movs	r3, #255	; 0xff
 8001038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 800103c:	23ff      	movs	r3, #255	; 0xff
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_LTDC_Init+0xfc>)
 800104a:	f002 f84f 	bl	80030ec <HAL_LTDC_ConfigLayer>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001054:	f000 f98a 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000114 	.word	0x20000114
 8001064:	40016800 	.word	0x40016800

08001068 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_QUADSPI_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 800107a:	2201      	movs	r2, #1
 800107c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 8001086:	2201      	movs	r2, #1
 8001088:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_QUADSPI_Init+0x50>)
 80010a4:	f002 fa4a 	bl	800353c <HAL_QSPI_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f95d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001bc 	.word	0x200001bc
 80010bc:	a0001000 	.word	0xa0001000

080010c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_SPI1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_SPI1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_SPI1_Init+0x74>)
 80010cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_SPI1_Init+0x74>)
 80010d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_SPI1_Init+0x74>)
 80010dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_SPI1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_SPI1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_SPI1_Init+0x74>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SPI1_Init+0x74>)
 80010f8:	2230      	movs	r2, #48	; 0x30
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_SPI1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_SPI1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SPI1_Init+0x74>)
 8001110:	2207      	movs	r2, #7
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_SPI1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_SPI1_Init+0x74>)
 800111c:	2208      	movs	r2, #8
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_SPI1_Init+0x74>)
 8001122:	f003 fc16 	bl	8004952 <HAL_SPI_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 f91e 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000208 	.word	0x20000208
 8001138:	40013000 	.word	0x40013000

0800113c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_UART4_Init+0x58>)
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <MX_UART4_Init+0x5c>)
 8001144:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 10400;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_UART4_Init+0x58>)
 8001148:	f642 02a0 	movw	r2, #10400	; 0x28a0
 800114c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_UART4_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_UART4_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_UART4_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_UART4_Init+0x58>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_UART4_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_UART4_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_UART4_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_UART4_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_UART4_Init+0x58>)
 8001180:	f003 ff90 	bl	80050a4 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f8ef 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000026c 	.word	0x2000026c
 8001198:	40004c00 	.word	0x40004c00

0800119c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_FMC_Init+0x9c>)
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <MX_FMC_Init+0xa0>)
 80011b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_FMC_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_FMC_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_FMC_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_FMC_Init+0x9c>)
 80011ce:	2210      	movs	r2, #16
 80011d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_FMC_Init+0x9c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_FMC_Init+0x9c>)
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_FMC_Init+0x9c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_FMC_Init+0x9c>)
 80011e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80011ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_FMC_Init+0x9c>)
 80011f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_FMC_Init+0x9c>)
 80011f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8001202:	2306      	movs	r3, #6
 8001204:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8001206:	2306      	movs	r3, #6
 8001208:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 800120e:	2305      	movs	r3, #5
 8001210:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_FMC_Init+0x9c>)
 8001220:	f003 fb06 	bl	8004830 <HAL_SDRAM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800122a:	f000 f89f 	bl	800136c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002f4 	.word	0x200002f4
 800123c:	a0000140 	.word	0xa0000140

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <MX_GPIO_Init+0x120>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a41      	ldr	r2, [pc, #260]	; (8001360 <MX_GPIO_Init+0x120>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <MX_GPIO_Init+0x120>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <MX_GPIO_Init+0x120>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <MX_GPIO_Init+0x120>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <MX_GPIO_Init+0x120>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <MX_GPIO_Init+0x120>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a35      	ldr	r2, [pc, #212]	; (8001360 <MX_GPIO_Init+0x120>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <MX_GPIO_Init+0x120>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <MX_GPIO_Init+0x120>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_GPIO_Init+0x120>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_GPIO_Init+0x120>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_GPIO_Init+0x120>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a29      	ldr	r2, [pc, #164]	; (8001360 <MX_GPIO_Init+0x120>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0x120>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_GPIO_Init+0x120>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <MX_GPIO_Init+0x120>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_GPIO_Init+0x120>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_GPIO_Init+0x120>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <MX_GPIO_Init+0x120>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_GPIO_Init+0x120>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_GPIO_Init+0x120>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <MX_GPIO_Init+0x120>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_GPIO_Init+0x120>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_NRST_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2190      	movs	r1, #144	; 0x90
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <MX_GPIO_Init+0x124>)
 800131c:	f001 fc06 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOST_SENSE_Pin */
  GPIO_InitStruct.Pin = HOST_SENSE_Pin;
 8001320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HOST_SENSE_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0x128>)
 8001336:	f001 fa4d 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_NRST_Pin;
 800133a:	2390      	movs	r3, #144	; 0x90
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0x124>)
 8001352:	f001 fa3f 	bl	80027d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001356:	bf00      	nop
 8001358:	3738      	adds	r7, #56	; 0x38
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400
 8001368:	40020c00 	.word	0x40020c00

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0x74>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d123      	bne.n	800142a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0x78>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ADC_MspInit+0x78>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8001412:	2304      	movs	r3, #4
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_ADC_MspInit+0x7c>)
 8001426:	f001 f9d5 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40012000 	.word	0x40012000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a3e      	ldr	r2, [pc, #248]	; (8001558 <HAL_CAN_MspInit+0x118>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d132      	bne.n	80014c8 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_CAN_MspInit+0x11c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <HAL_CAN_MspInit+0x11c>)
 800146a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_CAN_MspInit+0x11c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d10b      	bne.n	800148c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a39      	ldr	r2, [pc, #228]	; (8001560 <HAL_CAN_MspInit+0x120>)
 800147a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_CAN_MspInit+0x120>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_CAN_MspInit+0x120>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014b6:	2309      	movs	r3, #9
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <HAL_CAN_MspInit+0x124>)
 80014c2:	f001 f987 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014c6:	e042      	b.n	800154e <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_CAN_MspInit+0x128>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d13d      	bne.n	800154e <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_CAN_MspInit+0x120>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_CAN_MspInit+0x120>)
 80014d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_CAN_MspInit+0x120>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_CAN_MspInit+0x11c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_CAN_MspInit+0x11c>)
 80014f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_CAN_MspInit+0x11c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10b      	bne.n	8001514 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_CAN_MspInit+0x120>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_CAN_MspInit+0x120>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_CAN_MspInit+0x120>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	6313      	str	r3, [r2, #48]	; 0x30
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_CAN_MspInit+0x120>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800152c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800153e:	2309      	movs	r3, #9
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <HAL_CAN_MspInit+0x12c>)
 800154a:	f001 f943 	bl	80027d4 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	; 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40006400 	.word	0x40006400
 800155c:	20000328 	.word	0x20000328
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000
 8001568:	40006800 	.word	0x40006800
 800156c:	40020400 	.word	0x40020400

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0aa      	sub	sp, #168	; 0xa8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2284      	movs	r2, #132	; 0x84
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f004 fb29 	bl	8005be8 <memset>
  if(hi2c->Instance==I2C4)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_I2C_MspInit+0xb4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d13d      	bne.n	800161c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fd4d 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80015bc:	f7ff fed6 	bl	800136c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015f2:	2304      	movs	r3, #4
 80015f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_I2C_MspInit+0xbc>)
 8001600:	f001 f8e8 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_I2C_MspInit+0xb8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	37a8      	adds	r7, #168	; 0xa8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40006000 	.word	0x40006000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020c00 	.word	0x40020c00

08001630 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0b0      	sub	sp, #192	; 0xc0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164c:	2284      	movs	r2, #132	; 0x84
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f004 fac9 	bl	8005be8 <memset>
  if(hltdc->Instance==LTDC)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a98      	ldr	r2, [pc, #608]	; (80018bc <HAL_LTDC_MspInit+0x28c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	f040 8128 	bne.w	80018b2 <HAL_LTDC_MspInit+0x282>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001662:	2308      	movs	r3, #8
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800166a:	2302      	movs	r3, #2
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800166e:	2302      	movs	r3, #2
 8001670:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001672:	2300      	movs	r3, #0
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800167a:	2300      	movs	r3, #0
 800167c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fce4 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800168e:	f7ff fe6d 	bl	800136c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001692:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a8a      	ldr	r2, [pc, #552]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a84      	ldr	r2, [pc, #528]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b7f      	ldr	r3, [pc, #508]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a7e      	ldr	r2, [pc, #504]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a78      	ldr	r2, [pc, #480]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800170a:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a66      	ldr	r2, [pc, #408]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <HAL_LTDC_MspInit+0x290>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001754:	230e      	movs	r3, #14
 8001756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800175a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800175e:	4619      	mov	r1, r3
 8001760:	4858      	ldr	r0, [pc, #352]	; (80018c4 <HAL_LTDC_MspInit+0x294>)
 8001762:	f001 f837 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c1      	movs	r3, #193	; 0xc1
 8001768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800177e:	230e      	movs	r3, #14
 8001780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001788:	4619      	mov	r1, r3
 800178a:	484f      	ldr	r0, [pc, #316]	; (80018c8 <HAL_LTDC_MspInit+0x298>)
 800178c:	f001 f822 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001790:	237a      	movs	r3, #122	; 0x7a
 8001792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a8:	230e      	movs	r3, #14
 80017aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017b2:	4619      	mov	r1, r3
 80017b4:	4845      	ldr	r0, [pc, #276]	; (80018cc <HAL_LTDC_MspInit+0x29c>)
 80017b6:	f001 f80d 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017d2:	2309      	movs	r3, #9
 80017d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017dc:	4619      	mov	r1, r3
 80017de:	483c      	ldr	r0, [pc, #240]	; (80018d0 <HAL_LTDC_MspInit+0x2a0>)
 80017e0:	f000 fff8 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80017e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fe:	230e      	movs	r3, #14
 8001800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001808:	4619      	mov	r1, r3
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <HAL_LTDC_MspInit+0x2a0>)
 800180c:	f000 ffe2 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001810:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182a:	230e      	movs	r3, #14
 800182c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001830:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001834:	4619      	mov	r1, r3
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <HAL_LTDC_MspInit+0x2a4>)
 8001838:	f000 ffcc 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800183c:	2348      	movs	r3, #72	; 0x48
 800183e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001854:	230e      	movs	r3, #14
 8001856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800185e:	4619      	mov	r1, r3
 8001860:	481d      	ldr	r0, [pc, #116]	; (80018d8 <HAL_LTDC_MspInit+0x2a8>)
 8001862:	f000 ffb7 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800186a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001880:	2309      	movs	r3, #9
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001886:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800188a:	4619      	mov	r1, r3
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <HAL_LTDC_MspInit+0x2a4>)
 800188e:	f000 ffa1 	bl	80027d4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2058      	movs	r0, #88	; 0x58
 8001898:	f000 ff65 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800189c:	2058      	movs	r0, #88	; 0x58
 800189e:	f000 ff7e 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2059      	movs	r0, #89	; 0x59
 80018a8:	f000 ff5d 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80018ac:	2059      	movs	r0, #89	; 0x59
 80018ae:	f000 ff76 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	37c0      	adds	r7, #192	; 0xc0
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40016800 	.word	0x40016800
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40020c00 	.word	0x40020c00

080018dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_QSPI_MspInit+0x130>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f040 8081 	bne.w	8001a02 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	4a42      	ldr	r2, [pc, #264]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	6393      	str	r3, [r2, #56]	; 0x38
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001930:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001936:	f043 0320 	orr.w	r3, r3, #32
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_QSPI_MspInit+0x134>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001960:	2304      	movs	r3, #4
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001970:	2309      	movs	r3, #9
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <HAL_QSPI_MspInit+0x138>)
 800197c:	f000 ff2a 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001980:	2340      	movs	r3, #64	; 0x40
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001990:	2309      	movs	r3, #9
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	481f      	ldr	r0, [pc, #124]	; (8001a18 <HAL_QSPI_MspInit+0x13c>)
 800199c:	f000 ff1a 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019b2:	230a      	movs	r3, #10
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4816      	ldr	r0, [pc, #88]	; (8001a18 <HAL_QSPI_MspInit+0x13c>)
 80019be:	f000 ff09 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c2:	2304      	movs	r3, #4
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019d2:	2309      	movs	r3, #9
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <HAL_QSPI_MspInit+0x140>)
 80019de:	f000 fef9 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f2:	230a      	movs	r3, #10
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <HAL_QSPI_MspInit+0x140>)
 80019fe:	f000 fee9 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3730      	adds	r7, #48	; 0x30
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	a0001000 	.word	0xa0001000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40020400 	.word	0x40020400

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x7c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d127      	bne.n	8001a92 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_SPI_MspInit+0x80>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a72:	2328      	movs	r3, #40	; 0x28
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a82:	2305      	movs	r3, #5
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_SPI_MspInit+0x84>)
 8001a8e:	f000 fea1 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40013000 	.word	0x40013000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0aa      	sub	sp, #168	; 0xa8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2284      	movs	r2, #132	; 0x84
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f88d 	bl	8005be8 <memset>
  if(huart->Instance==UART4)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <HAL_UART_MspInit+0xb4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d13c      	bne.n	8001b52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001adc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fab2 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001af2:	f7ff fc3b 	bl	800136c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b40:	2308      	movs	r3, #8
 8001b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_UART_MspInit+0xbc>)
 8001b4e:	f000 fe41 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	37a8      	adds	r7, #168	; 0xa8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40004c00 	.word	0x40004c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020800 	.word	0x40020800

08001b68 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_FMC_MspInit+0x100>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d16d      	bne.n	8001c60 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_FMC_MspInit+0x100>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_FMC_MspInit+0x104>)
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <HAL_FMC_MspInit+0x104>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6393      	str	r3, [r2, #56]	; 0x38
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_FMC_MspInit+0x104>)
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ba2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ba6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	482c      	ldr	r0, [pc, #176]	; (8001c70 <HAL_FMC_MspInit+0x108>)
 8001bbe:	f000 fe09 	bl	80027d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <HAL_FMC_MspInit+0x10c>)
 8001bdc:	f000 fdfa 	bl	80027d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481f      	ldr	r0, [pc, #124]	; (8001c78 <HAL_FMC_MspInit+0x110>)
 8001bfa:	f000 fdeb 	bl	80027d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001bfe:	f248 1311 	movw	r3, #33041	; 0x8111
 8001c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c10:	230c      	movs	r3, #12
 8001c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4818      	ldr	r0, [pc, #96]	; (8001c7c <HAL_FMC_MspInit+0x114>)
 8001c1a:	f000 fddb 	bl	80027d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c1e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c30:	230c      	movs	r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <HAL_FMC_MspInit+0x118>)
 8001c3a:	f000 fdcb 	bl	80027d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001c3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c50:	230c      	movs	r3, #12
 8001c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <HAL_FMC_MspInit+0x11c>)
 8001c5a:	f000 fdbb 	bl	80027d4 <HAL_GPIO_Init>
 8001c5e:	e000      	b.n	8001c62 <HAL_FMC_MspInit+0xfa>
    return;
 8001c60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000032c 	.word	0x2000032c
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40020c00 	.word	0x40020c00

08001c88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c90:	f7ff ff6a 	bl	8001b68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce8:	f000 f88e 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <LTDC_IRQHandler+0x10>)
 8001cf6:	f001 f937 	bl	8002f68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000114 	.word	0x20000114

08001d04 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <LTDC_ER_IRQHandler+0x10>)
 8001d0a:	f001 f92d 	bl	8002f68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000114 	.word	0x20000114

08001d18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d40:	f7ff ffea 	bl	8001d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f003 ff19 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6e:	f7fe ff69 	bl	8000c44 <main>
  bx  lr    
 8001d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d80:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 8001d84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d88:	20000334 	.word	0x20000334

08001d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>

08001d8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f000 fcdc 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d98:	200f      	movs	r0, #15
 8001d9a:	f000 f805 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9e:	f7ff faeb 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fcf7 	bl	80027ba <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 fcbf 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000330 	.word	0x20000330

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000330 	.word	0x20000330

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e031      	b.n	8001f0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fa86 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_ADC_Init+0x84>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f970 	bl	80021c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	ffffeefd 	.word	0xffffeefd

08001f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e136      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x28a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d93a      	bls.n	8001fba <HAL_ADC_ConfigChannel+0xa2>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f4c:	d035      	beq.n	8001fba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	2207      	movs	r2, #7
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	400a      	ands	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8d      	ldr	r2, [pc, #564]	; (80021b0 <HAL_ADC_ConfigChannel+0x298>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10a      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	061a      	lsls	r2, r3, #24
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f92:	e035      	b.n	8002000 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68d9      	ldr	r1, [r3, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4403      	add	r3, r0
 8001fac:	3b1e      	subs	r3, #30
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb8:	e022      	b.n	8002000 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6919      	ldr	r1, [r3, #16]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	2207      	movs	r2, #7
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	400a      	ands	r2, r1
 8001fdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6919      	ldr	r1, [r3, #16]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4403      	add	r3, r0
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b06      	cmp	r3, #6
 8002006:	d824      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	221f      	movs	r2, #31
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43da      	mvns	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	400a      	ands	r2, r1
 8002028:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b05      	subs	r3, #5
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34
 8002050:	e04c      	b.n	80020ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d824      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	; 0x23
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b23      	subs	r3, #35	; 0x23
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
 80020a2:	e023      	b.n	80020ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b41      	subs	r3, #65	; 0x41
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b41      	subs	r3, #65	; 0x41
 80020e0:	fa00 f203 	lsl.w	r2, r0, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_ADC_ConfigChannel+0x29c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1f4>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020fe:	d105      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002106:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800210a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_ADC_ConfigChannel+0x29c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10f      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x21e>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d10b      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002128:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002134:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_ADC_ConfigChannel+0x29c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d12b      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x280>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_ADC_ConfigChannel+0x298>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b11      	cmp	r3, #17
 8002150:	d122      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002158:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800215c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002168:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_ADC_ConfigChannel+0x298>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d111      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_ADC_ConfigChannel+0x2a4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9a      	lsrs	r2, r3, #18
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800218a:	e002      	b.n	8002192 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3b01      	subs	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f9      	bne.n	800218c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	10000012 	.word	0x10000012
 80021b4:	40012000 	.word	0x40012000
 80021b8:	40012300 	.word	0x40012300
 80021bc:	20000000 	.word	0x20000000
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021cc:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <ADC_Init+0x1ec>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a77      	ldr	r2, [pc, #476]	; (80023b0 <ADC_Init+0x1ec>)
 80021d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <ADC_Init+0x1ec>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4973      	ldr	r1, [pc, #460]	; (80023b0 <ADC_Init+0x1ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <ADC_Init+0x1f0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00f      	b.n	80022be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0202 	bic.w	r2, r2, #2
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	005a      	lsls	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800230a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	035a      	lsls	r2, r3, #13
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e007      	b.n	8002334 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	051a      	lsls	r2, r3, #20
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	029a      	lsls	r2, r3, #10
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	0f000001 	.word	0x0f000001

080023b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0ed      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f832 	bl	8001440 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ec:	f7ff fd20 	bl	8001e30 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023f2:	e012      	b.n	800241a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023f4:	f7ff fd1c 	bl	8001e30 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d90b      	bls.n	800241a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0c5      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0e5      	beq.n	80023f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0202 	bic.w	r2, r2, #2
 8002436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002438:	f7ff fcfa 	bl	8001e30 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800243e:	e012      	b.n	8002466 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002440:	f7ff fcf6 	bl	8001e30 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b0a      	cmp	r3, #10
 800244c:	d90b      	bls.n	8002466 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2205      	movs	r2, #5
 800245e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e09f      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e5b      	ldrb	r3, [r3, #25]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e9b      	ldrb	r3, [r3, #26]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0220 	orr.w	r2, r2, #32
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0220 	bic.w	r2, r2, #32
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7edb      	ldrb	r3, [r3, #27]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0210 	orr.w	r2, r2, #16
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f1b      	ldrb	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7f5b      	ldrb	r3, [r3, #29]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0204 	orr.w	r2, r2, #4
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <__NVIC_SetPriorityGrouping+0x40>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x40>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00
 80025f4:	05fa0000 	.word	0x05fa0000

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4907      	ldr	r1, [pc, #28]	; (800264c <__NVIC_EnableIRQ+0x38>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100

08002650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db0a      	blt.n	800267a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	490c      	ldr	r1, [pc, #48]	; (800269c <__NVIC_SetPriority+0x4c>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	440b      	add	r3, r1
 8002674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002678:	e00a      	b.n	8002690 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <__NVIC_SetPriority+0x50>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3b04      	subs	r3, #4
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	440b      	add	r3, r1
 800268e:	761a      	strb	r2, [r3, #24]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000e100 	.word	0xe000e100
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f1c3 0307 	rsb	r3, r3, #7
 80026be:	2b04      	cmp	r3, #4
 80026c0:	bf28      	it	cs
 80026c2:	2304      	movcs	r3, #4
 80026c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d902      	bls.n	80026d4 <NVIC_EncodePriority+0x30>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3b03      	subs	r3, #3
 80026d2:	e000      	b.n	80026d6 <NVIC_EncodePriority+0x32>
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	4313      	orrs	r3, r2
         );
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff8e 	bl	8002650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff29 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff3e 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff8e 	bl	80026a4 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5d 	bl	8002650 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff31 	bl	8002614 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e175      	b.n	8002ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8164 	bne.w	8002ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d005      	beq.n	800282a <HAL_GPIO_Init+0x56>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80be 	beq.w	8002ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_GPIO_Init+0x324>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_GPIO_Init+0x324>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002976:	4a61      	ldr	r2, [pc, #388]	; (8002afc <HAL_GPIO_Init+0x328>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_GPIO_Init+0x32c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d037      	beq.n	8002a12 <HAL_GPIO_Init+0x23e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x330>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_GPIO_Init+0x23a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <HAL_GPIO_Init+0x334>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x236>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a55      	ldr	r2, [pc, #340]	; (8002b0c <HAL_GPIO_Init+0x338>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x232>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <HAL_GPIO_Init+0x33c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x22e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a53      	ldr	r2, [pc, #332]	; (8002b14 <HAL_GPIO_Init+0x340>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x22a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x344>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_GPIO_Init+0x348>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <HAL_GPIO_Init+0x34c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <HAL_GPIO_Init+0x350>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x21a>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e012      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e010      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e00e      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00c      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e00a      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x240>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x328>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_GPIO_Init+0x354>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f ae86 	bls.w	80027f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021400 	.word	0x40021400
 8002b18:	40021800 	.word	0x40021800
 8002b1c:	40021c00 	.word	0x40021c00
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40022400 	.word	0x40022400
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08b      	b.n	8002c8a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe fcf2 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e006      	b.n	8002be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d108      	bne.n	8002c02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	e007      	b.n	8002c12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_I2C_Init+0x134>)
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	02008000 	.word	0x02008000

08002c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d138      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e032      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d139      	bne.n	8002db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e033      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0bf      	b.n	8002f5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fc1e 	bl	8001630 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_LTDC_Init+0x19c>)
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HAL_LTDC_Init+0x19c>)
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_LTDC_Init+0x19c>)
 8002e98:	400b      	ands	r3, r1
 8002e9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6919      	ldr	r1, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6959      	ldr	r1, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_LTDC_Init+0x19c>)
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6959      	ldr	r1, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0206 	orr.w	r2, r2, #6
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	f000f800 	.word	0xf000f800

08002f68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d023      	beq.n	8002fd2 <HAL_LTDC_IRQHandler+0x6a>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01e      	beq.n	8002fd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f86f 	bl	80030b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_LTDC_IRQHandler+0xbc>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01e      	beq.n	8003024 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0202 	bic.w	r2, r2, #2
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003004:	f043 0202 	orr.w	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f846 	bl	80030b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01b      	beq.n	8003066 <HAL_LTDC_IRQHandler+0xfe>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d016      	beq.n	8003066 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f82f 	bl	80030c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_LTDC_IRQHandler+0x140>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2208      	movs	r2, #8
 8003090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f818 	bl	80030d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_LTDC_ConfigLayer+0x1a>
 8003102:	2302      	movs	r3, #2
 8003104:	e02c      	b.n	8003160 <HAL_LTDC_ConfigLayer+0x74>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2134      	movs	r1, #52	; 0x34
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4614      	mov	r4, r2
 800312a:	461d      	mov	r5, r3
 800312c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800312e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f811 	bl	8003168 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bdb0      	pop	{r4, r5, r7, pc}

08003168 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	4413      	add	r3, r2
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4413      	add	r3, r2
 8003196:	3384      	adds	r3, #132	; 0x84
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4611      	mov	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	01d2      	lsls	r2, r2, #7
 80031a4:	440a      	add	r2, r1
 80031a6:	3284      	adds	r2, #132	; 0x84
 80031a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80031ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	01db      	lsls	r3, r3, #7
 80031cc:	440b      	add	r3, r1
 80031ce:	3384      	adds	r3, #132	; 0x84
 80031d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e6:	4413      	add	r3, r2
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	01db      	lsls	r3, r3, #7
 80031f6:	4413      	add	r3, r2
 80031f8:	3384      	adds	r3, #132	; 0x84
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	4611      	mov	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	01d2      	lsls	r2, r2, #7
 8003206:	440a      	add	r2, r1
 8003208:	3284      	adds	r2, #132	; 0x84
 800320a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800320e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321e:	4413      	add	r3, r2
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	01db      	lsls	r3, r3, #7
 800322c:	440b      	add	r3, r1
 800322e:	3384      	adds	r3, #132	; 0x84
 8003230:	4619      	mov	r1, r3
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	4413      	add	r3, r2
 8003244:	3384      	adds	r3, #132	; 0x84
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	4611      	mov	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	01d2      	lsls	r2, r2, #7
 8003252:	440a      	add	r2, r1
 8003254:	3284      	adds	r2, #132	; 0x84
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4413      	add	r3, r2
 8003268:	3384      	adds	r3, #132	; 0x84
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	4413      	add	r3, r2
 800329a:	3384      	adds	r3, #132	; 0x84
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	01db      	lsls	r3, r3, #7
 80032a8:	4413      	add	r3, r2
 80032aa:	3384      	adds	r3, #132	; 0x84
 80032ac:	461a      	mov	r2, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b8:	461a      	mov	r2, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	431a      	orrs	r2, r3
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	440b      	add	r3, r1
 80032ce:	3384      	adds	r3, #132	; 0x84
 80032d0:	4619      	mov	r1, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	01db      	lsls	r3, r3, #7
 80032e2:	4413      	add	r3, r2
 80032e4:	3384      	adds	r3, #132	; 0x84
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	4611      	mov	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	01d2      	lsls	r2, r2, #7
 80032f2:	440a      	add	r2, r1
 80032f4:	3284      	adds	r2, #132	; 0x84
 80032f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	01db      	lsls	r3, r3, #7
 8003306:	4413      	add	r3, r2
 8003308:	3384      	adds	r3, #132	; 0x84
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	01db      	lsls	r3, r3, #7
 800331c:	4413      	add	r3, r2
 800331e:	3384      	adds	r3, #132	; 0x84
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	01db      	lsls	r3, r3, #7
 800332c:	440b      	add	r3, r1
 800332e:	3384      	adds	r3, #132	; 0x84
 8003330:	4619      	mov	r1, r3
 8003332:	4b58      	ldr	r3, [pc, #352]	; (8003494 <LTDC_SetConfig+0x32c>)
 8003334:	4013      	ands	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	6809      	ldr	r1, [r1, #0]
 8003344:	4608      	mov	r0, r1
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	01c9      	lsls	r1, r1, #7
 800334a:	4401      	add	r1, r0
 800334c:	3184      	adds	r1, #132	; 0x84
 800334e:	4313      	orrs	r3, r2
 8003350:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	01db      	lsls	r3, r3, #7
 800335c:	4413      	add	r3, r2
 800335e:	3384      	adds	r3, #132	; 0x84
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	01db      	lsls	r3, r3, #7
 800336c:	4413      	add	r3, r2
 800336e:	3384      	adds	r3, #132	; 0x84
 8003370:	461a      	mov	r2, r3
 8003372:	2300      	movs	r3, #0
 8003374:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	4413      	add	r3, r2
 8003382:	3384      	adds	r3, #132	; 0x84
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003394:	2304      	movs	r3, #4
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e01b      	b.n	80033d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80033a2:	2303      	movs	r3, #3
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e014      	b.n	80033d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d00b      	beq.n	80033c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d007      	beq.n	80033c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d003      	beq.n	80033c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	d102      	bne.n	80033ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80033c8:	2302      	movs	r3, #2
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e001      	b.n	80033d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4413      	add	r3, r2
 80033de:	3384      	adds	r3, #132	; 0x84
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	4611      	mov	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	01d2      	lsls	r2, r2, #7
 80033ec:	440a      	add	r2, r1
 80033ee:	3284      	adds	r2, #132	; 0x84
 80033f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80033f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	69f9      	ldr	r1, [r7, #28]
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	6809      	ldr	r1, [r1, #0]
 8003418:	4608      	mov	r0, r1
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	01c9      	lsls	r1, r1, #7
 800341e:	4401      	add	r1, r0
 8003420:	3184      	adds	r1, #132	; 0x84
 8003422:	4313      	orrs	r3, r2
 8003424:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	4413      	add	r3, r2
 8003432:	3384      	adds	r3, #132	; 0x84
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	01db      	lsls	r3, r3, #7
 8003440:	440b      	add	r3, r1
 8003442:	3384      	adds	r3, #132	; 0x84
 8003444:	4619      	mov	r1, r3
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <LTDC_SetConfig+0x330>)
 8003448:	4013      	ands	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	01db      	lsls	r3, r3, #7
 8003456:	4413      	add	r3, r2
 8003458:	3384      	adds	r3, #132	; 0x84
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	4413      	add	r3, r2
 800346e:	3384      	adds	r3, #132	; 0x84
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	4611      	mov	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	01d2      	lsls	r2, r2, #7
 800347c:	440a      	add	r2, r1
 800347e:	3284      	adds	r2, #132	; 0x84
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	fffff8f8 	.word	0xfffff8f8
 8003498:	fffff800 	.word	0xfffff800

0800349c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <HAL_PWREx_EnableOverDrive+0x98>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_PWREx_EnableOverDrive+0x98>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ca:	f7fe fcb1 	bl	8001e30 <HAL_GetTick>
 80034ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034d0:	e009      	b.n	80034e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d2:	f7fe fcad 	bl	8001e30 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e0:	d901      	bls.n	80034e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e022      	b.n	800352c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d1ee      	bne.n	80034d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003500:	f7fe fc96 	bl	8001e30 <HAL_GetTick>
 8003504:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003506:	e009      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003508:	f7fe fc92 	bl	8001e30 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003516:	d901      	bls.n	800351c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e007      	b.n	800352c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003528:	d1ee      	bne.n	8003508 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7fe fc74 	bl	8001e30 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e067      	b.n	8003624 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fe f9b7 	bl	80018dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800356e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f85e 	bl	8003634 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	3b01      	subs	r3, #1
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	2120      	movs	r1, #32
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f856 	bl	8003650 <QSPI_WaitFlagStateUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80035a8:	7afb      	ldrb	r3, [r7, #11]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d135      	bne.n	800361a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_QSPI_Init+0xf0>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6852      	ldr	r2, [r2, #4]
 80035bc:	0611      	lsls	r1, r2, #24
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	69d2      	ldr	r2, [r2, #28]
 80035c8:	4311      	orrs	r1, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6a12      	ldr	r2, [r2, #32]
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_QSPI_Init+0xf4>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6912      	ldr	r2, [r2, #16]
 80035e6:	0411      	lsls	r1, r2, #16
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6952      	ldr	r2, [r2, #20]
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6992      	ldr	r2, [r2, #24]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003622:	7afb      	ldrb	r3, [r7, #11]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00ffff2f 	.word	0x00ffff2f
 8003630:	ffe0f8fe 	.word	0xffe0f8fe

08003634 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003660:	e01a      	b.n	8003698 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d016      	beq.n	8003698 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe fbe1 	bl	8001e30 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2204      	movs	r2, #4
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e00e      	b.n	80036b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	2300      	moveq	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1d6      	bne.n	8003662 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e291      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e4:	4b96      	ldr	r3, [pc, #600]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d00c      	beq.n	800370a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f0:	4b93      	ldr	r3, [pc, #588]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d112      	bne.n	8003722 <HAL_RCC_OscConfig+0x62>
 80036fc:	4b90      	ldr	r3, [pc, #576]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d10b      	bne.n	8003722 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x130>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d168      	bne.n	80037f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e26b      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x7a>
 800372c:	4b84      	ldr	r3, [pc, #528]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a83      	ldr	r2, [pc, #524]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e02e      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x9c>
 8003742:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7e      	ldr	r2, [pc, #504]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b7c      	ldr	r3, [pc, #496]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7b      	ldr	r2, [pc, #492]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0xc0>
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b73      	ldr	r3, [pc, #460]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a72      	ldr	r2, [pc, #456]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xd8>
 8003780:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b6c      	ldr	r3, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6b      	ldr	r2, [pc, #428]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe fb46 	bl	8001e30 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fb42 	bl	8001e30 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e21f      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b61      	ldr	r3, [pc, #388]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe8>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe fb32 	bl	8001e30 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe fb2e 	bl	8001e30 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e20b      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b57      	ldr	r3, [pc, #348]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x110>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d069      	beq.n	80038d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037fe:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x190>
 8003816:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x17a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1df      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	493d      	ldr	r1, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e040      	b.n	80038d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d023      	beq.n	80038a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fae4 	bl	8001e30 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386c:	f7fe fae0 	bl	8001e30 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1bd      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b30      	ldr	r3, [pc, #192]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4929      	ldr	r1, [pc, #164]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
 800389e:	e018      	b.n	80038d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe fac0 	bl	8001e30 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b4:	f7fe fabc 	bl	8001e30 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e199      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d038      	beq.n	8003950 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d019      	beq.n	800391a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fe fa9d 	bl	8001e30 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe fa99 	bl	8001e30 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e176      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x23a>
 8003918:	e01a      	b.n	8003950 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 800391c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x280>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fa83 	bl	8001e30 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fa7f 	bl	8001e30 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d903      	bls.n	8003944 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e15c      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
 8003940:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b91      	ldr	r3, [pc, #580]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ee      	bne.n	800392e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a4 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395e:	4b8b      	ldr	r3, [pc, #556]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b85      	ldr	r3, [pc, #532]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003986:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <HAL_RCC_OscConfig+0x4d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d118      	bne.n	80039c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003992:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <HAL_RCC_OscConfig+0x4d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7e      	ldr	r2, [pc, #504]	; (8003b90 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe fa47 	bl	8001e30 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fe fa43 	bl	8001e30 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b64      	cmp	r3, #100	; 0x64
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e120      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b8:	4b75      	ldr	r3, [pc, #468]	; (8003b90 <HAL_RCC_OscConfig+0x4d0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x31a>
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	e02d      	b.n	8003a36 <HAL_RCC_OscConfig+0x376>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x33c>
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	e01c      	b.n	8003a36 <HAL_RCC_OscConfig+0x376>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_OscConfig+0x35e>
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	e00b      	b.n	8003a36 <HAL_RCC_OscConfig+0x376>
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a5a      	ldr	r2, [pc, #360]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d015      	beq.n	8003a6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fe f9f7 	bl	8001e30 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe f9f3 	bl	8001e30 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0ce      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ee      	beq.n	8003a46 <HAL_RCC_OscConfig+0x386>
 8003a68:	e014      	b.n	8003a94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fe f9e1 	bl	8001e30 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe f9dd 	bl	8001e30 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80a4 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d06b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d149      	bne.n	8003b58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a30      	ldr	r2, [pc, #192]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f9ae 	bl	8001e30 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe f9aa 	bl	8001e30 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e087      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe f97e 	bl	8001e30 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fe f97a 	bl	8001e30 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e057      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x478>
 8003b56:	e04f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe f964 	bl	8001e30 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe f960 	bl	8001e30 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e03d      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4ac>
 8003b8a:	e035      	b.n	8003bf8 <HAL_RCC_OscConfig+0x538>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x544>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d11a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0d0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d910      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 020f 	bic.w	r2, r3, #15
 8003c36:	4965      	ldr	r1, [pc, #404]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a52      	ldr	r2, [pc, #328]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d040      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e073      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06b      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fe f898 	bl	8001e30 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fe f894 	bl	8001e30 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e053      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	490a      	ldr	r1, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dac:	5ccb      	ldrb	r3, [r1, r3]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1d4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fff4 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	08005c10 	.word	0x08005c10
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	20000004 	.word	0x20000004

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b094      	sub	sp, #80	; 0x50
 8003de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
 8003dec:	2300      	movs	r3, #0
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df0:	2300      	movs	r3, #0
 8003df2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df8:	4b79      	ldr	r3, [pc, #484]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d00d      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x40>
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	f200 80e1 	bhi.w	8003fcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d003      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e12:	e0db      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e18:	e0db      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e1a:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e1e:	e0d8      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e20:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d063      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e36:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	f04f 0000 	mov.w	r0, #0
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	0159      	lsls	r1, r3, #5
 8003e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e64:	0150      	lsls	r0, r2, #5
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	1a51      	subs	r1, r2, r1
 8003e6e:	6139      	str	r1, [r7, #16]
 8003e70:	4629      	mov	r1, r5
 8003e72:	eb63 0301 	sbc.w	r3, r3, r1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e84:	4659      	mov	r1, fp
 8003e86:	018b      	lsls	r3, r1, #6
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e8e:	4651      	mov	r1, sl
 8003e90:	018a      	lsls	r2, r1, #6
 8003e92:	4651      	mov	r1, sl
 8003e94:	ebb2 0801 	subs.w	r8, r2, r1
 8003e98:	4659      	mov	r1, fp
 8003e9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	eb18 0303 	adds.w	r3, r8, r3
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	eb49 0303 	adc.w	r3, r9, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	028b      	lsls	r3, r1, #10
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003edc:	4621      	mov	r1, r4
 8003ede:	028a      	lsls	r2, r1, #10
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef0:	f7fc f98a 	bl	8000208 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	e058      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	2200      	movs	r2, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	4611      	mov	r1, r2
 8003f0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2a:	0150      	lsls	r0, r2, #5
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4641      	mov	r1, r8
 8003f32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f36:	4649      	mov	r1, r9
 8003f38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f50:	ebb2 040a 	subs.w	r4, r2, sl
 8003f54:	eb63 050b 	sbc.w	r5, r3, fp
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	00eb      	lsls	r3, r5, #3
 8003f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f66:	00e2      	lsls	r2, r4, #3
 8003f68:	4614      	mov	r4, r2
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	4643      	mov	r3, r8
 8003f6e:	18e3      	adds	r3, r4, r3
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	464b      	mov	r3, r9
 8003f74:	eb45 0303 	adc.w	r3, r5, r3
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f86:	4629      	mov	r1, r5
 8003f88:	028b      	lsls	r3, r1, #10
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f90:	4621      	mov	r1, r4
 8003f92:	028a      	lsls	r2, r1, #10
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	61fa      	str	r2, [r7, #28]
 8003fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa4:	f7fc f930 	bl	8000208 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3750      	adds	r7, #80	; 0x50
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08005c20 	.word	0x08005c20

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800402c:	f7ff ffdc 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0b5b      	lsrs	r3, r3, #13
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	08005c20 	.word	0x08005c20

08004050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004078:	4b69      	ldr	r3, [pc, #420]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a68      	ldr	r2, [pc, #416]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004082:	6093      	str	r3, [r2, #8]
 8004084:	4b66      	ldr	r3, [pc, #408]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	4964      	ldr	r1, [pc, #400]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040aa:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	4959      	ldr	r1, [pc, #356]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c8:	d101      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e6:	4b4e      	ldr	r3, [pc, #312]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	494a      	ldr	r1, [pc, #296]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004104:	d101      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 808b 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	4a39      	ldr	r2, [pc, #228]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	6413      	str	r3, [r2, #64]	; 0x40
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a34      	ldr	r2, [pc, #208]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fd fe6a 	bl	8001e30 <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd fe66 	bl	8001e30 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e357      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d035      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d02e      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041c4:	4b16      	ldr	r3, [pc, #88]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d114      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fe2e 	bl	8001e30 <HAL_GetTick>
 80041d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd fe2a 	bl	8001e30 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e319      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004206:	d111      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004216:	400b      	ands	r3, r1
 8004218:	4901      	ldr	r1, [pc, #4]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
 800421e:	e00b      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004220:	40023800 	.word	0x40023800
 8004224:	40007000 	.word	0x40007000
 8004228:	0ffffcff 	.word	0x0ffffcff
 800422c:	4baa      	ldr	r3, [pc, #680]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4aa9      	ldr	r2, [pc, #676]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	4ba7      	ldr	r3, [pc, #668]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	49a4      	ldr	r1, [pc, #656]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004246:	4313      	orrs	r3, r2
 8004248:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004256:	4ba0      	ldr	r3, [pc, #640]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	4a9e      	ldr	r2, [pc, #632]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004262:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004266:	4b9c      	ldr	r3, [pc, #624]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004268:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	4999      	ldr	r1, [pc, #612]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004284:	4b94      	ldr	r3, [pc, #592]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004292:	4991      	ldr	r1, [pc, #580]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042a6:	4b8c      	ldr	r3, [pc, #560]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b4:	4988      	ldr	r1, [pc, #544]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c8:	4b83      	ldr	r3, [pc, #524]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	4980      	ldr	r1, [pc, #512]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042ea:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4977      	ldr	r1, [pc, #476]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800430c:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	496f      	ldr	r1, [pc, #444]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432e:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f023 020c 	bic.w	r2, r3, #12
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433c:	4966      	ldr	r1, [pc, #408]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004350:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	495e      	ldr	r1, [pc, #376]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004372:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	4955      	ldr	r1, [pc, #340]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	494d      	ldr	r1, [pc, #308]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043b6:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4944      	ldr	r1, [pc, #272]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	493c      	ldr	r1, [pc, #240]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043fa:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	4933      	ldr	r1, [pc, #204]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	492b      	ldr	r1, [pc, #172]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d011      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444c:	4922      	ldr	r1, [pc, #136]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445c:	d101      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448c:	4912      	ldr	r1, [pc, #72]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b0:	4909      	ldr	r1, [pc, #36]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d006      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80d9 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044cc:	4b02      	ldr	r3, [pc, #8]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a01      	ldr	r2, [pc, #4]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80044d8:	40023800 	.word	0x40023800
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fd fca7 	bl	8001e30 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044e6:	f7fd fca3 	bl	8001e30 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	d901      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e194      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f8:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d021      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11d      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004518:	4b64      	ldr	r3, [pc, #400]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004526:	4b61      	ldr	r3, [pc, #388]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452c:	0e1b      	lsrs	r3, r3, #24
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	019a      	lsls	r2, r3, #6
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	071b      	lsls	r3, r3, #28
 800454c:	4957      	ldr	r1, [pc, #348]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457e:	d129      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004580:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	0f1b      	lsrs	r3, r3, #28
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	019a      	lsls	r2, r3, #6
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	071b      	lsls	r3, r3, #28
 80045b4:	493d      	ldr	r1, [pc, #244]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045bc:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c2:	f023 021f 	bic.w	r2, r3, #31
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	3b01      	subs	r3, #1
 80045cc:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01d      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	0e1b      	lsrs	r3, r3, #24
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f4:	0f1b      	lsrs	r3, r3, #28
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	019a      	lsls	r2, r3, #6
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	431a      	orrs	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	071b      	lsls	r3, r3, #28
 8004614:	4925      	ldr	r1, [pc, #148]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d011      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	019a      	lsls	r2, r3, #6
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	071b      	lsls	r3, r3, #28
 8004644:	4919      	ldr	r1, [pc, #100]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a16      	ldr	r2, [pc, #88]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fd fbea 	bl	8001e30 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004660:	f7fd fbe6 	bl	8001e30 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0d7      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 80cd 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a08      	ldr	r2, [pc, #32]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fd fbcd 	bl	8001e30 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800469a:	f7fd fbc9 	bl	8001e30 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d903      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0ba      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046b0:	4b5e      	ldr	r3, [pc, #376]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d0ed      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02e      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046e6:	4b51      	ldr	r3, [pc, #324]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	0f1b      	lsrs	r3, r3, #28
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	019a      	lsls	r2, r3, #6
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	071b      	lsls	r3, r3, #28
 800471a:	4944      	ldr	r1, [pc, #272]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004722:	4b42      	ldr	r3, [pc, #264]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004728:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	493d      	ldr	r1, [pc, #244]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d022      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004750:	d11d      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004752:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	0e1b      	lsrs	r3, r3, #24
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	0f1b      	lsrs	r3, r3, #28
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	019a      	lsls	r2, r3, #6
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	431a      	orrs	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	071b      	lsls	r3, r3, #28
 8004786:	4929      	ldr	r1, [pc, #164]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d028      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	0e1b      	lsrs	r3, r3, #24
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	019a      	lsls	r2, r3, #6
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	431a      	orrs	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	071b      	lsls	r3, r3, #28
 80047ce:	4917      	ldr	r1, [pc, #92]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	4911      	ldr	r1, [pc, #68]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0e      	ldr	r2, [pc, #56]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f8:	f7fd fb1a 	bl	8001e30 <HAL_GetTick>
 80047fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004800:	f7fd fb16 	bl	8001e30 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e007      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481e:	d1ef      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800

08004830 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e025      	b.n	8004890 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fd fa15 	bl	8001c88 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f001 f893 	bl	800599c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	461a      	mov	r2, r3
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	f001 f8e7 	bl	8005a54 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048aa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d101      	bne.n	80048b6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	e021      	b.n	80048fa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d002      	beq.n	80048c2 <HAL_SDRAM_SendCommand+0x2a>
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d118      	bne.n	80048f4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 f928 	bl	8005b28 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d104      	bne.n	80048ea <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2205      	movs	r2, #5
 80048e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80048e8:	e006      	b.n	80048f8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80048f2:	e001      	b.n	80048f8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d101      	bne.n	800491c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
 800491a:	e016      	b.n	800494a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10f      	bne.n	8004948 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f91a 	bl	8005b70 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e09d      	b.n	8004aa0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004974:	d009      	beq.n	800498a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	61da      	str	r2, [r3, #28]
 800497c:	e005      	b.n	800498a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fd f83b 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ca:	d902      	bls.n	80049d2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049e0:	d007      	beq.n	80049f2 <HAL_SPI_Init+0xa0>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0204 	and.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a6e:	ea42 0103 	orr.w	r1, r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_SPI_Transmit+0x22>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e15f      	b.n	8004d8a <HAL_SPI_Transmit+0x2e2>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad2:	f7fd f9ad 	bl	8001e30 <HAL_GetTick>
 8004ad6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aec:	e148      	b.n	8004d80 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_SPI_Transmit+0x52>
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afe:	e13f      	b.n	8004d80 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2203      	movs	r2, #3
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	d10f      	bne.n	8004b6c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d007      	beq.n	8004b8a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b92:	d94f      	bls.n	8004c34 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_SPI_Transmit+0xfa>
 8004b9c:	8afb      	ldrh	r3, [r7, #22]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d142      	bne.n	8004c28 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	1c9a      	adds	r2, r3, #2
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bc6:	e02f      	b.n	8004c28 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d112      	bne.n	8004bfc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bfa:	e015      	b.n	8004c28 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfc:	f7fd f918 	bl	8001e30 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_Transmit+0x16c>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x172>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004c26:	e0ab      	b.n	8004d80 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ca      	bne.n	8004bc8 <HAL_SPI_Transmit+0x120>
 8004c32:	e080      	b.n	8004d36 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0x19a>
 8004c3c:	8afb      	ldrh	r3, [r7, #22]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d174      	bne.n	8004d2c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d912      	bls.n	8004c72 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c70:	e05c      	b.n	8004d2c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	7812      	ldrb	r2, [r2, #0]
 8004c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c98:	e048      	b.n	8004d2c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d12b      	bne.n	8004d00 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d912      	bls.n	8004cd8 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b02      	subs	r3, #2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd6:	e029      	b.n	8004d2c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfe:	e015      	b.n	8004d2c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d00:	f7fd f896 	bl	8001e30 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d803      	bhi.n	8004d18 <HAL_SPI_Transmit+0x270>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Transmit+0x276>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d2a:	e029      	b.n	8004d80 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1b1      	bne.n	8004c9a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f948 	bl	8004fd0 <SPI_EndRxTxTransaction>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e003      	b.n	8004d80 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004da4:	f7fd f844 	bl	8001e30 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004db4:	f7fd f83c 	bl	8001e30 <HAL_GetTick>
 8004db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	015b      	lsls	r3, r3, #5
 8004dc0:	0d1b      	lsrs	r3, r3, #20
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	fb02 f303 	mul.w	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dca:	e054      	b.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d050      	beq.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dd4:	f7fd f82c 	bl	8001e30 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d902      	bls.n	8004dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d13d      	bne.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e02:	d111      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d004      	beq.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d107      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e30:	d10f      	bne.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e017      	b.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d19b      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eb6:	f7fc ffbb 	bl	8001e30 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ec6:	f7fc ffb3 	bl	8001e30 <HAL_GetTick>
 8004eca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ed4:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00da      	lsls	r2, r3, #3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	0d1b      	lsrs	r3, r3, #20
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004eec:	e060      	b.n	8004fb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ef4:	d107      	bne.n	8004f06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d050      	beq.n	8004fb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f0e:	f7fc ff8f 	bl	8001e30 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d902      	bls.n	8004f24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d13d      	bne.n	8004fa0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3c:	d111      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d004      	beq.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d107      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	d10f      	bne.n	8004f8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e010      	b.n	8004fc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d196      	bne.n	8004eee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000000 	.word	0x20000000

08004fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff ff5b 	bl	8004ea4 <SPI_WaitFifoStateUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e046      	b.n	8005092 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <SPI_EndRxTxTransaction+0xcc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <SPI_EndRxTxTransaction+0xd0>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0d5b      	lsrs	r3, r3, #21
 8005010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005022:	d112      	bne.n	800504a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff feb0 	bl	8004d94 <SPI_WaitFlagStateUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e023      	b.n	8005092 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3b01      	subs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d0f2      	beq.n	800504a <SPI_EndRxTxTransaction+0x7a>
 8005064:	e000      	b.n	8005068 <SPI_EndRxTxTransaction+0x98>
        break;
 8005066:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ff15 	bl	8004ea4 <SPI_WaitFifoStateUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e000      	b.n	8005092 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000000 	.word	0x20000000
 80050a0:	165e9f81 	.word	0x165e9f81

080050a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e040      	b.n	8005138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fcee 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fa8c 	bl	8005608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f825 	bl	8005140 <UART_SetConfig>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e01b      	b.n	8005138 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800510e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800511e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb0b 	bl	800574c <UART_CheckIdleState>
 8005136:	4603      	mov	r3, r0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4ba6      	ldr	r3, [pc, #664]	; (8005404 <UART_SetConfig+0x2c4>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6979      	ldr	r1, [r7, #20]
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a94      	ldr	r2, [pc, #592]	; (8005408 <UART_SetConfig+0x2c8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d120      	bne.n	80051fe <UART_SetConfig+0xbe>
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <UART_SetConfig+0x2cc>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d816      	bhi.n	80051f8 <UART_SetConfig+0xb8>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x90>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051e7 	.word	0x080051e7
 80051dc:	080051f3 	.word	0x080051f3
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e150      	b.n	8005488 <UART_SetConfig+0x348>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e14d      	b.n	8005488 <UART_SetConfig+0x348>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e14a      	b.n	8005488 <UART_SetConfig+0x348>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e147      	b.n	8005488 <UART_SetConfig+0x348>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e144      	b.n	8005488 <UART_SetConfig+0x348>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a83      	ldr	r2, [pc, #524]	; (8005410 <UART_SetConfig+0x2d0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d132      	bne.n	800526e <UART_SetConfig+0x12e>
 8005208:	4b80      	ldr	r3, [pc, #512]	; (800540c <UART_SetConfig+0x2cc>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d828      	bhi.n	8005268 <UART_SetConfig+0x128>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0xdc>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005251 	.word	0x08005251
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	0800525d 	.word	0x0800525d
 8005230:	08005269 	.word	0x08005269
 8005234:	08005269 	.word	0x08005269
 8005238:	08005269 	.word	0x08005269
 800523c:	08005257 	.word	0x08005257
 8005240:	08005269 	.word	0x08005269
 8005244:	08005269 	.word	0x08005269
 8005248:	08005269 	.word	0x08005269
 800524c:	08005263 	.word	0x08005263
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e118      	b.n	8005488 <UART_SetConfig+0x348>
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e115      	b.n	8005488 <UART_SetConfig+0x348>
 800525c:	2304      	movs	r3, #4
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e112      	b.n	8005488 <UART_SetConfig+0x348>
 8005262:	2308      	movs	r3, #8
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e10f      	b.n	8005488 <UART_SetConfig+0x348>
 8005268:	2310      	movs	r3, #16
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e10c      	b.n	8005488 <UART_SetConfig+0x348>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a68      	ldr	r2, [pc, #416]	; (8005414 <UART_SetConfig+0x2d4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0x17a>
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <UART_SetConfig+0x2cc>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005282:	2b30      	cmp	r3, #48	; 0x30
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0x16e>
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	d814      	bhi.n	80052b4 <UART_SetConfig+0x174>
 800528a:	2b20      	cmp	r3, #32
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x162>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d810      	bhi.n	80052b4 <UART_SetConfig+0x174>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <UART_SetConfig+0x15c>
 8005296:	2b10      	cmp	r3, #16
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x168>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x174>
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e0f2      	b.n	8005488 <UART_SetConfig+0x348>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e0ef      	b.n	8005488 <UART_SetConfig+0x348>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e0ec      	b.n	8005488 <UART_SetConfig+0x348>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e0e9      	b.n	8005488 <UART_SetConfig+0x348>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e0e6      	b.n	8005488 <UART_SetConfig+0x348>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a56      	ldr	r2, [pc, #344]	; (8005418 <UART_SetConfig+0x2d8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d120      	bne.n	8005306 <UART_SetConfig+0x1c6>
 80052c4:	4b51      	ldr	r3, [pc, #324]	; (800540c <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ce:	2bc0      	cmp	r3, #192	; 0xc0
 80052d0:	d013      	beq.n	80052fa <UART_SetConfig+0x1ba>
 80052d2:	2bc0      	cmp	r3, #192	; 0xc0
 80052d4:	d814      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d009      	beq.n	80052ee <UART_SetConfig+0x1ae>
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d810      	bhi.n	8005300 <UART_SetConfig+0x1c0>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <UART_SetConfig+0x1a8>
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d006      	beq.n	80052f4 <UART_SetConfig+0x1b4>
 80052e6:	e00b      	b.n	8005300 <UART_SetConfig+0x1c0>
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e0cc      	b.n	8005488 <UART_SetConfig+0x348>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e0c9      	b.n	8005488 <UART_SetConfig+0x348>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e0c6      	b.n	8005488 <UART_SetConfig+0x348>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e0c3      	b.n	8005488 <UART_SetConfig+0x348>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0c0      	b.n	8005488 <UART_SetConfig+0x348>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a44      	ldr	r2, [pc, #272]	; (800541c <UART_SetConfig+0x2dc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d125      	bne.n	800535c <UART_SetConfig+0x21c>
 8005310:	4b3e      	ldr	r3, [pc, #248]	; (800540c <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d017      	beq.n	8005350 <UART_SetConfig+0x210>
 8005320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005324:	d817      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532a:	d00b      	beq.n	8005344 <UART_SetConfig+0x204>
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d811      	bhi.n	8005356 <UART_SetConfig+0x216>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <UART_SetConfig+0x1fe>
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d006      	beq.n	800534a <UART_SetConfig+0x20a>
 800533c:	e00b      	b.n	8005356 <UART_SetConfig+0x216>
 800533e:	2300      	movs	r3, #0
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e0a1      	b.n	8005488 <UART_SetConfig+0x348>
 8005344:	2302      	movs	r3, #2
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e09e      	b.n	8005488 <UART_SetConfig+0x348>
 800534a:	2304      	movs	r3, #4
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e09b      	b.n	8005488 <UART_SetConfig+0x348>
 8005350:	2308      	movs	r3, #8
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e098      	b.n	8005488 <UART_SetConfig+0x348>
 8005356:	2310      	movs	r3, #16
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e095      	b.n	8005488 <UART_SetConfig+0x348>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2f      	ldr	r2, [pc, #188]	; (8005420 <UART_SetConfig+0x2e0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d125      	bne.n	80053b2 <UART_SetConfig+0x272>
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <UART_SetConfig+0x2cc>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005374:	d017      	beq.n	80053a6 <UART_SetConfig+0x266>
 8005376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537a:	d817      	bhi.n	80053ac <UART_SetConfig+0x26c>
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d00b      	beq.n	800539a <UART_SetConfig+0x25a>
 8005382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005386:	d811      	bhi.n	80053ac <UART_SetConfig+0x26c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <UART_SetConfig+0x254>
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d006      	beq.n	80053a0 <UART_SetConfig+0x260>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x26c>
 8005394:	2301      	movs	r3, #1
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e076      	b.n	8005488 <UART_SetConfig+0x348>
 800539a:	2302      	movs	r3, #2
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e073      	b.n	8005488 <UART_SetConfig+0x348>
 80053a0:	2304      	movs	r3, #4
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e070      	b.n	8005488 <UART_SetConfig+0x348>
 80053a6:	2308      	movs	r3, #8
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e06d      	b.n	8005488 <UART_SetConfig+0x348>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e06a      	b.n	8005488 <UART_SetConfig+0x348>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <UART_SetConfig+0x2e4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d138      	bne.n	800542e <UART_SetConfig+0x2ee>
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <UART_SetConfig+0x2cc>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053ca:	d017      	beq.n	80053fc <UART_SetConfig+0x2bc>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	d82a      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x2b0>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d824      	bhi.n	8005428 <UART_SetConfig+0x2e8>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <UART_SetConfig+0x2aa>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x2b6>
 80053e8:	e01e      	b.n	8005428 <UART_SetConfig+0x2e8>
 80053ea:	2300      	movs	r3, #0
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e04b      	b.n	8005488 <UART_SetConfig+0x348>
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e048      	b.n	8005488 <UART_SetConfig+0x348>
 80053f6:	2304      	movs	r3, #4
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e045      	b.n	8005488 <UART_SetConfig+0x348>
 80053fc:	2308      	movs	r3, #8
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e042      	b.n	8005488 <UART_SetConfig+0x348>
 8005402:	bf00      	nop
 8005404:	efff69f3 	.word	0xefff69f3
 8005408:	40011000 	.word	0x40011000
 800540c:	40023800 	.word	0x40023800
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
 8005418:	40004c00 	.word	0x40004c00
 800541c:	40005000 	.word	0x40005000
 8005420:	40011400 	.word	0x40011400
 8005424:	40007800 	.word	0x40007800
 8005428:	2310      	movs	r3, #16
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e02c      	b.n	8005488 <UART_SetConfig+0x348>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a72      	ldr	r2, [pc, #456]	; (80055fc <UART_SetConfig+0x4bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d125      	bne.n	8005484 <UART_SetConfig+0x344>
 8005438:	4b71      	ldr	r3, [pc, #452]	; (8005600 <UART_SetConfig+0x4c0>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005442:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005446:	d017      	beq.n	8005478 <UART_SetConfig+0x338>
 8005448:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800544c:	d817      	bhi.n	800547e <UART_SetConfig+0x33e>
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d00b      	beq.n	800546c <UART_SetConfig+0x32c>
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d811      	bhi.n	800547e <UART_SetConfig+0x33e>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <UART_SetConfig+0x326>
 800545e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005462:	d006      	beq.n	8005472 <UART_SetConfig+0x332>
 8005464:	e00b      	b.n	800547e <UART_SetConfig+0x33e>
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e00d      	b.n	8005488 <UART_SetConfig+0x348>
 800546c:	2302      	movs	r3, #2
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e00a      	b.n	8005488 <UART_SetConfig+0x348>
 8005472:	2304      	movs	r3, #4
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e007      	b.n	8005488 <UART_SetConfig+0x348>
 8005478:	2308      	movs	r3, #8
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e004      	b.n	8005488 <UART_SetConfig+0x348>
 800547e:	2310      	movs	r3, #16
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e001      	b.n	8005488 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	d15b      	bne.n	800554a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005492:	7ffb      	ldrb	r3, [r7, #31]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d828      	bhi.n	80054ea <UART_SetConfig+0x3aa>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x360>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fd9c 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 80054c8:	61b8      	str	r0, [r7, #24]
        break;
 80054ca:	e013      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fdac 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61b8      	str	r0, [r7, #24]
        break;
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <UART_SetConfig+0x4c4>)
 80054d6:	61bb      	str	r3, [r7, #24]
        break;
 80054d8:	e00c      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fc81 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 80054de:	61b8      	str	r0, [r7, #24]
        break;
 80054e0:	e008      	b.n	80054f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e004      	b.n	80054f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77bb      	strb	r3, [r7, #30]
        break;
 80054f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d074      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d916      	bls.n	8005544 <UART_SetConfig+0x404>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d212      	bcs.n	8005544 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f023 030f 	bic.w	r3, r3, #15
 8005526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	b29a      	uxth	r2, r3
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	4313      	orrs	r3, r2
 8005538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	89fa      	ldrh	r2, [r7, #14]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e04f      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	77bb      	strb	r3, [r7, #30]
 8005548:	e04c      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d828      	bhi.n	80055a2 <UART_SetConfig+0x462>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x418>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055a3 	.word	0x080055a3
 8005568:	08005593 	.word	0x08005593
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
 8005578:	0800559b 	.word	0x0800559b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fe fd40 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8005580:	61b8      	str	r0, [r7, #24]
        break;
 8005582:	e013      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fe fd50 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8005588:	61b8      	str	r0, [r7, #24]
        break;
 800558a:	e00f      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <UART_SetConfig+0x4c4>)
 800558e:	61bb      	str	r3, [r7, #24]
        break;
 8005590:	e00c      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005592:	f7fe fc25 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8005596:	61b8      	str	r0, [r7, #24]
        break;
 8005598:	e008      	b.n	80055ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	61bb      	str	r3, [r7, #24]
        break;
 80055a0:	e004      	b.n	80055ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77bb      	strb	r3, [r7, #30]
        break;
 80055aa:	bf00      	nop
    }

    if (pclk != 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	085a      	lsrs	r2, r3, #1
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d909      	bls.n	80055e0 <UART_SetConfig+0x4a0>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d2:	d205      	bcs.n	80055e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e001      	b.n	80055e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40007c00 	.word	0x40007c00
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400

08005608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d10a      	bne.n	800571e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af02      	add	r7, sp, #8
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800575c:	f7fc fb68 	bl	8001e30 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b08      	cmp	r3, #8
 800576e:	d12e      	bne.n	80057ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f83b 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d021      	beq.n	80057ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	60fb      	str	r3, [r7, #12]
   return(result);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	69b9      	ldr	r1, [r7, #24]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	617b      	str	r3, [r7, #20]
   return(result);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e6      	bne.n	800578a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e011      	b.n	80057f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3728      	adds	r7, #40	; 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	e04f      	b.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d04b      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005814:	f7fc fb0c 	bl	8001e30 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <UART_WaitOnFlagUntilTimeout+0x30>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e04e      	b.n	80058cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d037      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d034      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d031      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d110      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f838 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2208      	movs	r2, #8
 8005868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e029      	b.n	80058cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005886:	d111      	bne.n	80058ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005890:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f81e 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e00f      	b.n	80058cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4013      	ands	r3, r2
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d0a0      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b095      	sub	sp, #84	; 0x54
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fa:	643b      	str	r3, [r7, #64]	; 0x40
 80058fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	61fb      	str	r3, [r7, #28]
   return(result);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	64bb      	str	r3, [r7, #72]	; 0x48
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005946:	2b01      	cmp	r3, #1
 8005948:	d118      	bne.n	800597c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60bb      	str	r3, [r7, #8]
   return(result);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	647b      	str	r3, [r7, #68]	; 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	613b      	str	r3, [r7, #16]
   return(result);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005990:	bf00      	nop
 8005992:	3754      	adds	r7, #84	; 0x54
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d121      	bne.n	80059f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <FMC_SDRAM_Init+0xb4>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	6851      	ldr	r1, [r2, #4]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	6892      	ldr	r2, [r2, #8]
 80059be:	4311      	orrs	r1, r2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68d2      	ldr	r2, [r2, #12]
 80059c4:	4311      	orrs	r1, r2
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	6912      	ldr	r2, [r2, #16]
 80059ca:	4311      	orrs	r1, r2
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	6952      	ldr	r2, [r2, #20]
 80059d0:	4311      	orrs	r1, r2
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	6992      	ldr	r2, [r2, #24]
 80059d6:	4311      	orrs	r1, r2
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	69d2      	ldr	r2, [r2, #28]
 80059dc:	4311      	orrs	r1, r2
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	6a12      	ldr	r2, [r2, #32]
 80059e2:	4311      	orrs	r1, r2
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e8:	430a      	orrs	r2, r1
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e026      	b.n	8005a40 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	69d9      	ldr	r1, [r3, #28]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4319      	orrs	r1, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <FMC_SDRAM_Init+0xb4>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	6851      	ldr	r1, [r2, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	6892      	ldr	r2, [r2, #8]
 8005a20:	4311      	orrs	r1, r2
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	68d2      	ldr	r2, [r2, #12]
 8005a26:	4311      	orrs	r1, r2
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	6912      	ldr	r2, [r2, #16]
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	6952      	ldr	r2, [r2, #20]
 8005a32:	4311      	orrs	r1, r2
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	6992      	ldr	r2, [r2, #24]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	ffff8000 	.word	0xffff8000

08005a54 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d128      	bne.n	8005ab8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1e59      	subs	r1, r3, #1
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	4319      	orrs	r1, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	4319      	orrs	r1, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	031b      	lsls	r3, r3, #12
 8005a90:	4319      	orrs	r1, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	4319      	orrs	r1, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	051b      	lsls	r3, r3, #20
 8005aa4:	4319      	orrs	r1, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	061b      	lsls	r3, r3, #24
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	609a      	str	r2, [r3, #8]
 8005ab6:	e02d      	b.n	8005b14 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <FMC_SDRAM_Timing_Init+0xd0>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	3a01      	subs	r2, #1
 8005ac6:	0311      	lsls	r1, r2, #12
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	6952      	ldr	r2, [r2, #20]
 8005acc:	3a01      	subs	r2, #1
 8005ace:	0512      	lsls	r2, r2, #20
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	1e59      	subs	r1, r3, #1
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	4319      	orrs	r1, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	4319      	orrs	r1, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	4319      	orrs	r1, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	ff0f0fff 	.word	0xff0f0fff

08005b28 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <FMC_SDRAM_SendCommand+0x44>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	6811      	ldr	r1, [r2, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	6852      	ldr	r2, [r2, #4]
 8005b44:	4311      	orrs	r1, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	6892      	ldr	r2, [r2, #8]
 8005b4a:	3a01      	subs	r2, #1
 8005b4c:	0152      	lsls	r2, r2, #5
 8005b4e:	4311      	orrs	r1, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	68d2      	ldr	r2, [r2, #12]
 8005b54:	0252      	lsls	r2, r2, #9
 8005b56:	430a      	orrs	r2, r1
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	ffc00000 	.word	0xffc00000

08005b70 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	ffffc001 	.word	0xffffc001

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4d0d      	ldr	r5, [pc, #52]	; (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	; (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2600      	movs	r6, #0
 8005bac:	42a6      	cmp	r6, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4d0b      	ldr	r5, [pc, #44]	; (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	; (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f000 f820 	bl	8005bf8 <_init>
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	42a6      	cmp	r6, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc8:	4798      	blx	r3
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd2:	4798      	blx	r3
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	08005c30 	.word	0x08005c30
 8005bdc:	08005c30 	.word	0x08005c30
 8005be0:	08005c30 	.word	0x08005c30
 8005be4:	08005c34 	.word	0x08005c34

08005be8 <memset>:
 8005be8:	4402      	add	r2, r0
 8005bea:	4603      	mov	r3, r0
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <memset+0xa>
 8005bf0:	4770      	bx	lr
 8005bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf6:	e7f9      	b.n	8005bec <memset+0x4>

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
