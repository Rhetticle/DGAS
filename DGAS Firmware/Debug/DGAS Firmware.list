
DGAS Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f94  08006f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f9c  08006f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08006fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006fb0  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193f8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003159  00000000  00000000  00039434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003883  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dd4  00000000  00000000  000425eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f87a9  00000000  00000000  0005c3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005750  00000000  00000000  00154bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f58 	.word	0x08006f58

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006f58 	.word	0x08006f58

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <lcd_reset>:
	}
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
	return HAL_OK;
}

void lcd_reset(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <lcd_reset+0x28>)
 8000526:	f003 f81f 	bl	8003568 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800052a:	200a      	movs	r0, #10
 800052c:	f002 f82e 	bl	800258c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <lcd_reset+0x28>)
 8000536:	f003 f817 	bl	8003568 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f002 f826 	bl	800258c <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020400 	.word	0x40020400

08000548 <sendCommand>:

void sendCommand(uint8_t cmd) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	uint16_t send = cmd;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	b29b      	uxth	r3, r3
 8000556:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <sendCommand+0x48>)
 800055e:	f003 f803 	bl	8003568 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f002 f812 	bl	800258c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 8000568:	f107 010e 	add.w	r1, r7, #14
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	2201      	movs	r2, #1
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <sendCommand+0x4c>)
 8000572:	f005 fc49 	bl	8005e08 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f002 f808 	bl	800258c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <sendCommand+0x48>)
 8000582:	f002 fff1 	bl	8003568 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40020400 	.word	0x40020400
 8000594:	20000208 	.word	0x20000208

08000598 <sendData>:

void sendData(uint8_t data) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	uint16_t send = 1 << 8 | data;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <sendData+0x50>)
 80005b6:	f002 ffd7 	bl	8003568 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f001 ffe6 	bl	800258c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &send, 1, 100);
 80005c0:	f107 010e 	add.w	r1, r7, #14
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <sendData+0x54>)
 80005ca:	f005 fc1d 	bl	8005e08 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f001 ffdc 	bl	800258c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <sendData+0x50>)
 80005da:	f002 ffc5 	bl	8003568 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020400 	.word	0x40020400
 80005ec:	20000208 	.word	0x20000208

080005f0 <lcd_init>:

HAL_StatusTypeDef lcd_init(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LCD_NRST, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	48fd      	ldr	r0, [pc, #1012]	; (80009f0 <lcd_init+0x400>)
 80005fa:	f002 ffb5 	bl	8003568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_CS, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	48fb      	ldr	r0, [pc, #1004]	; (80009f0 <lcd_init+0x400>)
 8000604:	f002 ffb0 	bl	8003568 <HAL_GPIO_WritePin>
	lcd_reset();
 8000608:	f7ff ff88 	bl	800051c <lcd_reset>
#if 1
sendCommand(0xFF);
 800060c:	20ff      	movs	r0, #255	; 0xff
 800060e:	f7ff ff9b 	bl	8000548 <sendCommand>
sendData(0x77);
 8000612:	2077      	movs	r0, #119	; 0x77
 8000614:	f7ff ffc0 	bl	8000598 <sendData>
sendData(0x01);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffbd 	bl	8000598 <sendData>
sendData(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffba 	bl	8000598 <sendData>
sendData(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffb7 	bl	8000598 <sendData>
sendData(0x10);
 800062a:	2010      	movs	r0, #16
 800062c:	f7ff ffb4 	bl	8000598 <sendData>

 sendCommand(0xC0);
 8000630:	20c0      	movs	r0, #192	; 0xc0
 8000632:	f7ff ff89 	bl	8000548 <sendCommand>
 sendData(0x3B);
 8000636:	203b      	movs	r0, #59	; 0x3b
 8000638:	f7ff ffae 	bl	8000598 <sendData>
 sendData(0x00);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ffab 	bl	8000598 <sendData>

 sendCommand(0xC1);
 8000642:	20c1      	movs	r0, #193	; 0xc1
 8000644:	f7ff ff80 	bl	8000548 <sendCommand>
 sendData(0x0B); //VBP
 8000648:	200b      	movs	r0, #11
 800064a:	f7ff ffa5 	bl	8000598 <sendData>
 sendData(0x02);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ffa2 	bl	8000598 <sendData>

 sendCommand(0xC2);
 8000654:	20c2      	movs	r0, #194	; 0xc2
 8000656:	f7ff ff77 	bl	8000548 <sendCommand>
 sendData(0x00);
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff9c 	bl	8000598 <sendData>
 sendData(0x02);
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff ff99 	bl	8000598 <sendData>

 sendCommand(0xCC);
 8000666:	20cc      	movs	r0, #204	; 0xcc
 8000668:	f7ff ff6e 	bl	8000548 <sendCommand>
 sendData(0x10);
 800066c:	2010      	movs	r0, #16
 800066e:	f7ff ff93 	bl	8000598 <sendData>

 sendCommand(0xCD);
 8000672:	20cd      	movs	r0, #205	; 0xcd
 8000674:	f7ff ff68 	bl	8000548 <sendCommand>
 sendData(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff8d 	bl	8000598 <sendData>

 sendCommand ( 0xB0); //Positive Voltage Gamma Control
 800067e:	20b0      	movs	r0, #176	; 0xb0
 8000680:	f7ff ff62 	bl	8000548 <sendCommand>
 sendData ( 0x02);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff87 	bl	8000598 <sendData>
 sendData ( 0x13);
 800068a:	2013      	movs	r0, #19
 800068c:	f7ff ff84 	bl	8000598 <sendData>
 sendData ( 0x1B);
 8000690:	201b      	movs	r0, #27
 8000692:	f7ff ff81 	bl	8000598 <sendData>
 sendData ( 0x0D);
 8000696:	200d      	movs	r0, #13
 8000698:	f7ff ff7e 	bl	8000598 <sendData>
 sendData ( 0x10);
 800069c:	2010      	movs	r0, #16
 800069e:	f7ff ff7b 	bl	8000598 <sendData>
 sendData ( 0x05);
 80006a2:	2005      	movs	r0, #5
 80006a4:	f7ff ff78 	bl	8000598 <sendData>
 sendData ( 0x08);
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff75 	bl	8000598 <sendData>
 sendData ( 0x07);
 80006ae:	2007      	movs	r0, #7
 80006b0:	f7ff ff72 	bl	8000598 <sendData>
 sendData ( 0x07);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff ff6f 	bl	8000598 <sendData>
 sendData ( 0x24);
 80006ba:	2024      	movs	r0, #36	; 0x24
 80006bc:	f7ff ff6c 	bl	8000598 <sendData>
 sendData ( 0x04);
 80006c0:	2004      	movs	r0, #4
 80006c2:	f7ff ff69 	bl	8000598 <sendData>
 sendData ( 0x11);
 80006c6:	2011      	movs	r0, #17
 80006c8:	f7ff ff66 	bl	8000598 <sendData>
 sendData ( 0x0E);
 80006cc:	200e      	movs	r0, #14
 80006ce:	f7ff ff63 	bl	8000598 <sendData>
 sendData ( 0x2C);
 80006d2:	202c      	movs	r0, #44	; 0x2c
 80006d4:	f7ff ff60 	bl	8000598 <sendData>
 sendData ( 0x33);
 80006d8:	2033      	movs	r0, #51	; 0x33
 80006da:	f7ff ff5d 	bl	8000598 <sendData>
 sendData ( 0x1D);
 80006de:	201d      	movs	r0, #29
 80006e0:	f7ff ff5a 	bl	8000598 <sendData>

 sendCommand ( 0xB1); //Negative Voltage Gamma Control
 80006e4:	20b1      	movs	r0, #177	; 0xb1
 80006e6:	f7ff ff2f 	bl	8000548 <sendCommand>
 sendData ( 0x05);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff ff54 	bl	8000598 <sendData>
 sendData ( 0x13);
 80006f0:	2013      	movs	r0, #19
 80006f2:	f7ff ff51 	bl	8000598 <sendData>
 sendData ( 0x1B);
 80006f6:	201b      	movs	r0, #27
 80006f8:	f7ff ff4e 	bl	8000598 <sendData>
 sendData ( 0x0D);
 80006fc:	200d      	movs	r0, #13
 80006fe:	f7ff ff4b 	bl	8000598 <sendData>
 sendData ( 0x11);
 8000702:	2011      	movs	r0, #17
 8000704:	f7ff ff48 	bl	8000598 <sendData>
 sendData ( 0x05);
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff ff45 	bl	8000598 <sendData>
 sendData ( 0x08);
 800070e:	2008      	movs	r0, #8
 8000710:	f7ff ff42 	bl	8000598 <sendData>
 sendData ( 0x07);
 8000714:	2007      	movs	r0, #7
 8000716:	f7ff ff3f 	bl	8000598 <sendData>
 sendData ( 0x07);
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff ff3c 	bl	8000598 <sendData>
 sendData ( 0x24);
 8000720:	2024      	movs	r0, #36	; 0x24
 8000722:	f7ff ff39 	bl	8000598 <sendData>
 sendData ( 0x04);
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff36 	bl	8000598 <sendData>
 sendData ( 0x11);
 800072c:	2011      	movs	r0, #17
 800072e:	f7ff ff33 	bl	8000598 <sendData>
 sendData ( 0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff ff30 	bl	8000598 <sendData>
 sendData ( 0x2C);
 8000738:	202c      	movs	r0, #44	; 0x2c
 800073a:	f7ff ff2d 	bl	8000598 <sendData>
 sendData ( 0x33);
 800073e:	2033      	movs	r0, #51	; 0x33
 8000740:	f7ff ff2a 	bl	8000598 <sendData>
 sendData ( 0x1D);
 8000744:	201d      	movs	r0, #29
 8000746:	f7ff ff27 	bl	8000598 <sendData>

 sendCommand(0xFF);
 800074a:	20ff      	movs	r0, #255	; 0xff
 800074c:	f7ff fefc 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000750:	2077      	movs	r0, #119	; 0x77
 8000752:	f7ff ff21 	bl	8000598 <sendData>
 sendData(0x01);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff1e 	bl	8000598 <sendData>
 sendData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff1b 	bl	8000598 <sendData>
 sendData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff18 	bl	8000598 <sendData>
 sendData(0x11);
 8000768:	2011      	movs	r0, #17
 800076a:	f7ff ff15 	bl	8000598 <sendData>

 sendCommand(0xB0);
 800076e:	20b0      	movs	r0, #176	; 0xb0
 8000770:	f7ff feea 	bl	8000548 <sendCommand>
 sendData(0x5d);//5d
 8000774:	205d      	movs	r0, #93	; 0x5d
 8000776:	f7ff ff0f 	bl	8000598 <sendData>

 sendCommand(0xB1); //VCOM amplitude setting
 800077a:	20b1      	movs	r0, #177	; 0xb1
 800077c:	f7ff fee4 	bl	8000548 <sendCommand>
 sendData(0x43); //43
 8000780:	2043      	movs	r0, #67	; 0x43
 8000782:	f7ff ff09 	bl	8000598 <sendData>

 sendCommand(0xB2); //VGH Voltage setting
 8000786:	20b2      	movs	r0, #178	; 0xb2
 8000788:	f7ff fede 	bl	8000548 <sendCommand>
 sendData(0x81); //12V
 800078c:	2081      	movs	r0, #129	; 0x81
 800078e:	f7ff ff03 	bl	8000598 <sendData>

 sendCommand(0xB3);
 8000792:	20b3      	movs	r0, #179	; 0xb3
 8000794:	f7ff fed8 	bl	8000548 <sendCommand>
 sendData(0x80);
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	f7ff fefd 	bl	8000598 <sendData>

 sendCommand(0xB5); //VGL Voltage setting
 800079e:	20b5      	movs	r0, #181	; 0xb5
 80007a0:	f7ff fed2 	bl	8000548 <sendCommand>
 sendData(0x43); //-8.3V
 80007a4:	2043      	movs	r0, #67	; 0x43
 80007a6:	f7ff fef7 	bl	8000598 <sendData>

 sendCommand(0xB7);
 80007aa:	20b7      	movs	r0, #183	; 0xb7
 80007ac:	f7ff fecc 	bl	8000548 <sendCommand>
 sendData(0x85);
 80007b0:	2085      	movs	r0, #133	; 0x85
 80007b2:	f7ff fef1 	bl	8000598 <sendData>

 sendCommand(0xB8);
 80007b6:	20b8      	movs	r0, #184	; 0xb8
 80007b8:	f7ff fec6 	bl	8000548 <sendCommand>
 sendData(0x20);
 80007bc:	2020      	movs	r0, #32
 80007be:	f7ff feeb 	bl	8000598 <sendData>

 sendCommand(0xC1);
 80007c2:	20c1      	movs	r0, #193	; 0xc1
 80007c4:	f7ff fec0 	bl	8000548 <sendCommand>
 sendData(0x78);
 80007c8:	2078      	movs	r0, #120	; 0x78
 80007ca:	f7ff fee5 	bl	8000598 <sendData>

 sendCommand(0xC2);
 80007ce:	20c2      	movs	r0, #194	; 0xc2
 80007d0:	f7ff feba 	bl	8000548 <sendCommand>
 sendData(0x78);
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f7ff fedf 	bl	8000598 <sendData>

 sendCommand(0xD0);
 80007da:	20d0      	movs	r0, #208	; 0xd0
 80007dc:	f7ff feb4 	bl	8000548 <sendCommand>
 sendData(0x88);
 80007e0:	2088      	movs	r0, #136	; 0x88
 80007e2:	f7ff fed9 	bl	8000598 <sendData>

 sendCommand(0xE0);
 80007e6:	20e0      	movs	r0, #224	; 0xe0
 80007e8:	f7ff feae 	bl	8000548 <sendCommand>
 sendData(0x00);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fed3 	bl	8000598 <sendData>
 sendData(0x00);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fed0 	bl	8000598 <sendData>
 sendData(0x02);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fecd 	bl	8000598 <sendData>

 sendCommand(0xE1);
 80007fe:	20e1      	movs	r0, #225	; 0xe1
 8000800:	f7ff fea2 	bl	8000548 <sendCommand>
 sendData(0x03);
 8000804:	2003      	movs	r0, #3
 8000806:	f7ff fec7 	bl	8000598 <sendData>
 sendData(0xA0);
 800080a:	20a0      	movs	r0, #160	; 0xa0
 800080c:	f7ff fec4 	bl	8000598 <sendData>
 sendData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fec1 	bl	8000598 <sendData>
 sendData(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff febe 	bl	8000598 <sendData>
 sendData(0x04);
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff febb 	bl	8000598 <sendData>
 sendData(0xA0);
 8000822:	20a0      	movs	r0, #160	; 0xa0
 8000824:	f7ff feb8 	bl	8000598 <sendData>
 sendData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff feb5 	bl	8000598 <sendData>
 sendData(0x00);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff feb2 	bl	8000598 <sendData>
 sendData(0x00);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff feaf 	bl	8000598 <sendData>
 sendData(0x20);
 800083a:	2020      	movs	r0, #32
 800083c:	f7ff feac 	bl	8000598 <sendData>
 sendData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff fea9 	bl	8000598 <sendData>

 sendCommand(0xE2);
 8000846:	20e2      	movs	r0, #226	; 0xe2
 8000848:	f7ff fe7e 	bl	8000548 <sendCommand>
 sendData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fea3 	bl	8000598 <sendData>
 sendData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fea0 	bl	8000598 <sendData>
 sendData(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fe9d 	bl	8000598 <sendData>
 sendData(0x00);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fe9a 	bl	8000598 <sendData>
 sendData(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fe97 	bl	8000598 <sendData>
 sendData(0x00);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fe94 	bl	8000598 <sendData>
 sendData(0x00);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fe91 	bl	8000598 <sendData>
 sendData(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe8e 	bl	8000598 <sendData>
 sendData(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fe8b 	bl	8000598 <sendData>
 sendData(0x00);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fe88 	bl	8000598 <sendData>
 sendData(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fe85 	bl	8000598 <sendData>
 sendData(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fe82 	bl	8000598 <sendData>
 sendData(0x00);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fe7f 	bl	8000598 <sendData>

 sendCommand(0xE3);
 800089a:	20e3      	movs	r0, #227	; 0xe3
 800089c:	f7ff fe54 	bl	8000548 <sendCommand>
 sendData(0x00);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fe79 	bl	8000598 <sendData>
 sendData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe76 	bl	8000598 <sendData>
 sendData(0x11);
 80008ac:	2011      	movs	r0, #17
 80008ae:	f7ff fe73 	bl	8000598 <sendData>
 sendData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fe70 	bl	8000598 <sendData>

 sendCommand(0xE4);
 80008b8:	20e4      	movs	r0, #228	; 0xe4
 80008ba:	f7ff fe45 	bl	8000548 <sendCommand>
 sendData(0x22);
 80008be:	2022      	movs	r0, #34	; 0x22
 80008c0:	f7ff fe6a 	bl	8000598 <sendData>
 sendData(0x00);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe67 	bl	8000598 <sendData>

 sendCommand(0xE5);
 80008ca:	20e5      	movs	r0, #229	; 0xe5
 80008cc:	f7ff fe3c 	bl	8000548 <sendCommand>
 sendData(0x05);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f7ff fe61 	bl	8000598 <sendData>
 sendData(0xEC);
 80008d6:	20ec      	movs	r0, #236	; 0xec
 80008d8:	f7ff fe5e 	bl	8000598 <sendData>
 sendData(0xA0);
 80008dc:	20a0      	movs	r0, #160	; 0xa0
 80008de:	f7ff fe5b 	bl	8000598 <sendData>
 sendData(0xA0);
 80008e2:	20a0      	movs	r0, #160	; 0xa0
 80008e4:	f7ff fe58 	bl	8000598 <sendData>
 sendData(0x07);
 80008e8:	2007      	movs	r0, #7
 80008ea:	f7ff fe55 	bl	8000598 <sendData>
 sendData(0xEE);
 80008ee:	20ee      	movs	r0, #238	; 0xee
 80008f0:	f7ff fe52 	bl	8000598 <sendData>
 sendData(0xA0);
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	f7ff fe4f 	bl	8000598 <sendData>
 sendData(0xA0);
 80008fa:	20a0      	movs	r0, #160	; 0xa0
 80008fc:	f7ff fe4c 	bl	8000598 <sendData>
 sendData(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fe49 	bl	8000598 <sendData>
 sendData(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fe46 	bl	8000598 <sendData>
 sendData(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff fe43 	bl	8000598 <sendData>
 sendData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fe40 	bl	8000598 <sendData>
 sendData(0x00);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fe3d 	bl	8000598 <sendData>
 sendData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fe3a 	bl	8000598 <sendData>
 sendData(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe37 	bl	8000598 <sendData>
 sendData(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe34 	bl	8000598 <sendData>

 sendCommand(0xE6);
 8000930:	20e6      	movs	r0, #230	; 0xe6
 8000932:	f7ff fe09 	bl	8000548 <sendCommand>
 sendData(0x00);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe2e 	bl	8000598 <sendData>
 sendData(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe2b 	bl	8000598 <sendData>
 sendData(0x11);
 8000942:	2011      	movs	r0, #17
 8000944:	f7ff fe28 	bl	8000598 <sendData>
 sendData(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fe25 	bl	8000598 <sendData>

 sendCommand(0xE7);
 800094e:	20e7      	movs	r0, #231	; 0xe7
 8000950:	f7ff fdfa 	bl	8000548 <sendCommand>
 sendData(0x22);
 8000954:	2022      	movs	r0, #34	; 0x22
 8000956:	f7ff fe1f 	bl	8000598 <sendData>
 sendData(0x00);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe1c 	bl	8000598 <sendData>

 sendCommand(0xE8);
 8000960:	20e8      	movs	r0, #232	; 0xe8
 8000962:	f7ff fdf1 	bl	8000548 <sendCommand>
 sendData(0x06);
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fe16 	bl	8000598 <sendData>
 sendData(0xED);
 800096c:	20ed      	movs	r0, #237	; 0xed
 800096e:	f7ff fe13 	bl	8000598 <sendData>
 sendData(0xA0);
 8000972:	20a0      	movs	r0, #160	; 0xa0
 8000974:	f7ff fe10 	bl	8000598 <sendData>
 sendData(0xA0);
 8000978:	20a0      	movs	r0, #160	; 0xa0
 800097a:	f7ff fe0d 	bl	8000598 <sendData>
 sendData(0x08);
 800097e:	2008      	movs	r0, #8
 8000980:	f7ff fe0a 	bl	8000598 <sendData>
 sendData(0xEF);
 8000984:	20ef      	movs	r0, #239	; 0xef
 8000986:	f7ff fe07 	bl	8000598 <sendData>
 sendData(0xA0);
 800098a:	20a0      	movs	r0, #160	; 0xa0
 800098c:	f7ff fe04 	bl	8000598 <sendData>
 sendData(0xA0);
 8000990:	20a0      	movs	r0, #160	; 0xa0
 8000992:	f7ff fe01 	bl	8000598 <sendData>
 sendData(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdfe 	bl	8000598 <sendData>
 sendData(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fdfb 	bl	8000598 <sendData>
 sendData(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdf8 	bl	8000598 <sendData>
 sendData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fdf5 	bl	8000598 <sendData>
 sendData(0x00);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fdf2 	bl	8000598 <sendData>
 sendData(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fdef 	bl	8000598 <sendData>
 sendData(0x00);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fdec 	bl	8000598 <sendData>
 sendData(0x00);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fde9 	bl	8000598 <sendData>

 sendCommand(0xEB);
 80009c6:	20eb      	movs	r0, #235	; 0xeb
 80009c8:	f7ff fdbe 	bl	8000548 <sendCommand>
 sendData(0x00);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fde3 	bl	8000598 <sendData>
 sendData(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fde0 	bl	8000598 <sendData>
 sendData(0x40);
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	f7ff fddd 	bl	8000598 <sendData>
 sendData(0x40);
 80009de:	2040      	movs	r0, #64	; 0x40
 80009e0:	f7ff fdda 	bl	8000598 <sendData>
 sendData(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fdd7 	bl	8000598 <sendData>
 sendData(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	e002      	b.n	80009f4 <lcd_init+0x404>
 80009ee:	bf00      	nop
 80009f0:	40020400 	.word	0x40020400
 80009f4:	f7ff fdd0 	bl	8000598 <sendData>
 sendData(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fdcd 	bl	8000598 <sendData>

 sendCommand(0xED);
 80009fe:	20ed      	movs	r0, #237	; 0xed
 8000a00:	f7ff fda2 	bl	8000548 <sendCommand>
 sendData(0xFF);
 8000a04:	20ff      	movs	r0, #255	; 0xff
 8000a06:	f7ff fdc7 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a0a:	20ff      	movs	r0, #255	; 0xff
 8000a0c:	f7ff fdc4 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	f7ff fdc1 	bl	8000598 <sendData>
 sendData(0xBA);
 8000a16:	20ba      	movs	r0, #186	; 0xba
 8000a18:	f7ff fdbe 	bl	8000598 <sendData>
 sendData(0x0A);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f7ff fdbb 	bl	8000598 <sendData>
 sendData(0xBF);
 8000a22:	20bf      	movs	r0, #191	; 0xbf
 8000a24:	f7ff fdb8 	bl	8000598 <sendData>
 sendData(0x45);
 8000a28:	2045      	movs	r0, #69	; 0x45
 8000a2a:	f7ff fdb5 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	f7ff fdb2 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	f7ff fdaf 	bl	8000598 <sendData>
 sendData(0x54);
 8000a3a:	2054      	movs	r0, #84	; 0x54
 8000a3c:	f7ff fdac 	bl	8000598 <sendData>
 sendData(0xFB);
 8000a40:	20fb      	movs	r0, #251	; 0xfb
 8000a42:	f7ff fda9 	bl	8000598 <sendData>
 sendData(0xA0);
 8000a46:	20a0      	movs	r0, #160	; 0xa0
 8000a48:	f7ff fda6 	bl	8000598 <sendData>
 sendData(0xAB);
 8000a4c:	20ab      	movs	r0, #171	; 0xab
 8000a4e:	f7ff fda3 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	f7ff fda0 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	f7ff fd9d 	bl	8000598 <sendData>
 sendData(0xFF);
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	f7ff fd9a 	bl	8000598 <sendData>

 sendCommand(0xEF);
 8000a64:	20ef      	movs	r0, #239	; 0xef
 8000a66:	f7ff fd6f 	bl	8000548 <sendCommand>
 sendData(0x10);
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f7ff fd94 	bl	8000598 <sendData>
 sendData(0x0D);
 8000a70:	200d      	movs	r0, #13
 8000a72:	f7ff fd91 	bl	8000598 <sendData>
 sendData(0x04);
 8000a76:	2004      	movs	r0, #4
 8000a78:	f7ff fd8e 	bl	8000598 <sendData>
 sendData(0x08);
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	f7ff fd8b 	bl	8000598 <sendData>
 sendData(0x3F);
 8000a82:	203f      	movs	r0, #63	; 0x3f
 8000a84:	f7ff fd88 	bl	8000598 <sendData>
 sendData(0x1F);
 8000a88:	201f      	movs	r0, #31
 8000a8a:	f7ff fd85 	bl	8000598 <sendData>

 sendCommand(0xFF);
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	f7ff fd5a 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000a94:	2077      	movs	r0, #119	; 0x77
 8000a96:	f7ff fd7f 	bl	8000598 <sendData>
 sendData(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fd7c 	bl	8000598 <sendData>
 sendData(0x00);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fd79 	bl	8000598 <sendData>
 sendData(0x00);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fd76 	bl	8000598 <sendData>
 sendData(0x13);
 8000aac:	2013      	movs	r0, #19
 8000aae:	f7ff fd73 	bl	8000598 <sendData>

 sendCommand(0xEF);
 8000ab2:	20ef      	movs	r0, #239	; 0xef
 8000ab4:	f7ff fd48 	bl	8000548 <sendCommand>
 sendData(0x08);
 8000ab8:	2008      	movs	r0, #8
 8000aba:	f7ff fd6d 	bl	8000598 <sendData>

 sendCommand(0xFF);
 8000abe:	20ff      	movs	r0, #255	; 0xff
 8000ac0:	f7ff fd42 	bl	8000548 <sendCommand>
 sendData(0x77);
 8000ac4:	2077      	movs	r0, #119	; 0x77
 8000ac6:	f7ff fd67 	bl	8000598 <sendData>
 sendData(0x01);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fd64 	bl	8000598 <sendData>
 sendData(0x00);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fd61 	bl	8000598 <sendData>
 sendData(0x00);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fd5e 	bl	8000598 <sendData>
 sendData(0x00);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fd5b 	bl	8000598 <sendData>
  sendCommand (0xD2);
WriteData (0x08);
#endif
/////////////////Bring up the internal test picture///////////////////////////////////
#endif
sendCommand(0x11);
 8000ae2:	2011      	movs	r0, #17
 8000ae4:	f7ff fd30 	bl	8000548 <sendCommand>

HAL_Delay(120);
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f001 fd4f 	bl	800258c <HAL_Delay>

sendCommand(0x29);
 8000aee:	2029      	movs	r0, #41	; 0x29
 8000af0:	f7ff fd2a 	bl	8000548 <sendCommand>

sendCommand(0x36);
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f7ff fd27 	bl	8000548 <sendCommand>
sendData(0x00);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fd4c 	bl	8000598 <sendData>

sendCommand(0x3A);
 8000b00:	203a      	movs	r0, #58	; 0x3a
 8000b02:	f7ff fd21 	bl	8000548 <sendCommand>
sendData(0x60);//0x60 18bit 0x50 16bit
 8000b06:	2060      	movs	r0, #96	; 0x60
 8000b08:	f7ff fd46 	bl	8000598 <sendData>
sendCommand(0x13);
 8000b0c:	2013      	movs	r0, #19
 8000b0e:	f7ff fd1b 	bl	8000548 <sendCommand>
//sendCommand(0x23);
	return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <fmc_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SDRAM_START_ADDR 0xC0000000
#define SDRAM_SIZE 0x200000

void fmc_init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
	  FMC_SDRAM_CommandTypeDef Command;
	  HAL_StatusTypeDef status;
	  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
	  /* Step 3: Configure a clock configuration enable command */
	   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
	   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000b22:	2310      	movs	r3, #16
 8000b24:	60bb      	str	r3, [r7, #8]
	   Command.AutoRefreshNumber      = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
	   Command.ModeRegisterDefinition = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	   status = HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b34:	4619      	mov	r1, r3
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <fmc_init+0x80>)
 8000b38:	f005 f85e 	bl	8005bf8 <HAL_SDRAM_SendCommand>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	75fb      	strb	r3, [r7, #23]
	   HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000b40:	2001      	movs	r0, #1
 8000b42:	f001 fd23 	bl	800258c <HAL_Delay>
	   /* Step 5: Configure a PALL (precharge all) command */
	   Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000b46:	2302      	movs	r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b50:	4619      	mov	r1, r3
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <fmc_init+0x80>)
 8000b54:	f005 f850 	bl	8005bf8 <HAL_SDRAM_SendCommand>
	   /* Step 6: Configure an Auto Refresh command */
	   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
	   Command.AutoRefreshNumber      = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <fmc_init+0x80>)
 8000b6a:	f005 f845 	bl	8005bf8 <HAL_SDRAM_SendCommand>
	   /* Step 7: Program the external memory mode register */
	   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000b6e:	2304      	movs	r3, #4
 8000b70:	607b      	str	r3, [r7, #4]
	   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000b72:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b76:	613b      	str	r3, [r7, #16]
	   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <fmc_init+0x80>)
 8000b82:	f005 f839 	bl	8005bf8 <HAL_SDRAM_SendCommand>
	   /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	   /* Set the device refresh rate
	    * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
	            = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1105);
 8000b86:	f240 4151 	movw	r1, #1105	; 0x451
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <fmc_init+0x80>)
 8000b8c:	f005 f869 	bl	8005c62 <HAL_SDRAM_ProgramRefreshRate>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002f4 	.word	0x200002f4

08000b9c <fmc_test>:

void fmc_test(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e007      	b.n	8000bb8 <fmc_test+0x1c>
		*(__IO uint8_t*) (SDRAM_START_ADDR + i) = 0x14;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000bae:	2214      	movs	r2, #20
 8000bb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SDRAM_SIZE; i++) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000bbe:	dbf3      	blt.n	8000ba8 <fmc_test+0xc>
	}
	return;
 8000bc0:	bf00      	nop

}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f001 fc7e 	bl	80024d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f839 	bl	8000c4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fb0f 	bl	80011fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bde:	f000 f8a1 	bl	8000d24 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000be2:	f000 f8f1 	bl	8000dc8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000be6:	f000 f925 	bl	8000e34 <MX_CAN2_Init>
  MX_FMC_Init();
 8000bea:	f000 fab5 	bl	8001158 <MX_FMC_Init>
  MX_I2C4_Init();
 8000bee:	f000 f957 	bl	8000ea0 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000bf2:	f000 fa17 	bl	8001024 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000bf6:	f000 fa41 	bl	800107c <MX_SPI1_Init>
  MX_UART4_Init();
 8000bfa:	f000 fa7d 	bl	80010f8 <MX_UART4_Init>
  MX_LTDC_Init();
 8000bfe:	f000 f98f 	bl	8000f20 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c02:	f7ff fcf5 	bl	80005f0 <lcd_init>
  fmc_init();
 8000c06:	f7ff ff87 	bl	8000b18 <fmc_init>
  HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f001 fcbe 	bl	800258c <HAL_Delay>
  fmc_test();
 8000c10:	f7ff ffc4 	bl	8000b9c <fmc_test>
  char* test = "Test to mem";
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <main+0x7c>)
 8000c16:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status;

  status = CSP_QUADSPI_Init();
 8000c18:	f000 fbb8 	bl	800138c <CSP_QUADSPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_Erase_Chip();
 8000c20:	f000 fbea 	bl	80013f8 <CSP_QSPI_Erase_Chip>
 8000c24:	4603      	mov	r3, r0
 8000c26:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_WriteMemory(test, 0x00000, strlen(test));
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff faed 	bl	8000208 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fd55 	bl	80016e4 <CSP_QSPI_WriteMemory>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	70fb      	strb	r3, [r7, #3]
  status = CSP_QSPI_EnableMemoryMappedMode();
 8000c3e:	f000 fddd 	bl	80017fc <CSP_QSPI_EnableMemoryMappedMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x7a>
 8000c48:	08006f70 	.word	0x08006f70

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f006 f974 	bl	8006f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a29      	ldr	r2, [pc, #164]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cb8:	23d8      	movs	r3, #216	; 0xd8
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fea9 	bl	8004a20 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fb28 	bl	8001328 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd8:	f003 f8fe 	bl	8003ed8 <HAL_PWREx_EnableOverDrive>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce2:	f000 fb21 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2302      	movs	r3, #2
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2107      	movs	r1, #7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 f92f 	bl	8004f68 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d10:	f000 fb0a 	bl	8001328 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <MX_ADC1_Init+0xa0>)
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000d86:	f001 fc25 	bl	80025d4 <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d90:	f000 faca 	bl	8001328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_ADC1_Init+0x98>)
 8000da6:	f001 fc59 	bl	800265c <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000db0:	f000 faba 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	40012000 	.word	0x40012000
 8000dc4:	0f000001 	.word	0x0f000001

08000dc8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_CAN1_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_CAN1_Init+0x64>)
 8000e18:	f001 fe70 	bl	8002afc <HAL_CAN_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e22:	f000 fa81 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000070 	.word	0x20000070
 8000e30:	40006400 	.word	0x40006400

08000e34 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <MX_CAN2_Init+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e40:	2210      	movs	r2, #16
 8000e42:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e56:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_CAN2_Init+0x64>)
 8000e84:	f001 fe3a 	bl	8002afc <HAL_CAN_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f000 fa4b 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000098 	.word	0x20000098
 8000e9c:	40006800 	.word	0x40006800

08000ea0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C4_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C4_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000edc:	f002 fb5e 	bl	800359c <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fa1f 	bl	8001328 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000eee:	f002 fbf1 	bl	80036d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fa16 	bl	8001328 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_I2C4_Init+0x74>)
 8000f00:	f002 fc33 	bl	800376a <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 fa0d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000c0 	.word	0x200000c0
 8000f18:	40006000 	.word	0x40006000
 8000f1c:	20404768 	.word	0x20404768

08000f20 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2234      	movs	r2, #52	; 0x34
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 f80b 	bl	8006f48 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f32:	4b3a      	ldr	r3, [pc, #232]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f34:	4a3a      	ldr	r2, [pc, #232]	; (8001020 <MX_LTDC_Init+0x100>)
 8000f36:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f52:	2207      	movs	r2, #7
 8000f54:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f5e:	220e      	movs	r2, #14
 8000f60:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 14;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f64:	220e      	movs	r2, #14
 8000f66:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 494;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f6a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 494;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f72:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 500;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 500;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_LTDC_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fa0:	481e      	ldr	r0, [pc, #120]	; (800101c <MX_LTDC_Init+0xfc>)
 8000fa2:	f002 fc2f 	bl	8003804 <HAL_LTDC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fac:	f000 f9bc 	bl	8001328 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000fb4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fc2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fc8:	23ff      	movs	r3, #255	; 0xff
 8000fca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xc0000000;
 8000fda:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000fe0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000fe6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000fec:	23ff      	movs	r3, #255	; 0xff
 8000fee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000ff8:	23ff      	movs	r3, #255	; 0xff
 8000ffa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_LTDC_Init+0xfc>)
 8001006:	f002 fd8f 	bl	8003b28 <HAL_LTDC_ConfigLayer>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001010:	f000 f98a 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000114 	.word	0x20000114
 8001020:	40016800 	.word	0x40016800

08001024 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_QUADSPI_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_QUADSPI_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4-1;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001030:	2203      	movs	r2, #3
 8001032:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001036:	2204      	movs	r2, #4
 8001038:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_QUADSPI_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001042:	2219      	movs	r2, #25
 8001044:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001048:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800104c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_QUADSPI_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_QUADSPI_Init+0x50>)
 8001062:	f002 ff89 	bl	8003f78 <HAL_QSPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f95c 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001bc 	.word	0x200001bc
 8001078:	a0001000 	.word	0xa0001000

0800107c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_SPI1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001090:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001094:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SPI1_Init+0x74>)
 8001098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010b4:	2230      	movs	r2, #48	; 0x30
 80010b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010d8:	2208      	movs	r2, #8
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_SPI1_Init+0x74>)
 80010de:	f004 fde8 	bl	8005cb2 <HAL_SPI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f91e 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000208 	.word	0x20000208
 80010f4:	40013000 	.word	0x40013000

080010f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_UART4_Init+0x58>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_UART4_Init+0x5c>)
 8001100:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 10400;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_UART4_Init+0x58>)
 8001104:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001108:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_UART4_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_UART4_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_UART4_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_UART4_Init+0x58>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_UART4_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_UART4_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_UART4_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_UART4_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_UART4_Init+0x58>)
 800113c:	f005 f962 	bl	8006404 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f8ef 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000026c 	.word	0x2000026c
 8001154:	40004c00 	.word	0x40004c00

08001158 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_FMC_Init+0x9c>)
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <MX_FMC_Init+0xa0>)
 8001174:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_FMC_Init+0x9c>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_FMC_Init+0x9c>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_FMC_Init+0x9c>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_FMC_Init+0x9c>)
 800118a:	2210      	movs	r2, #16
 800118c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_FMC_Init+0x9c>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_FMC_Init+0x9c>)
 8001196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_FMC_Init+0x9c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_FMC_Init+0x9c>)
 80011a4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80011a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_FMC_Init+0x9c>)
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_FMC_Init+0x9c>)
 80011b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80011be:	2306      	movs	r3, #6
 80011c0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80011c6:	2309      	movs	r3, #9
 80011c8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 80011ca:	2305      	movs	r3, #5
 80011cc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_FMC_Init+0x9c>)
 80011dc:	f004 fcd8 	bl	8005b90 <HAL_SDRAM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80011e6:	f000 f89f 	bl	8001328 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002f4 	.word	0x200002f4
 80011f8:	a0000140 	.word	0xa0000140

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <MX_GPIO_Init+0x120>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a41      	ldr	r2, [pc, #260]	; (800131c <MX_GPIO_Init+0x120>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b3f      	ldr	r3, [pc, #252]	; (800131c <MX_GPIO_Init+0x120>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <MX_GPIO_Init+0x120>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a3b      	ldr	r2, [pc, #236]	; (800131c <MX_GPIO_Init+0x120>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <MX_GPIO_Init+0x120>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <MX_GPIO_Init+0x120>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a35      	ldr	r2, [pc, #212]	; (800131c <MX_GPIO_Init+0x120>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <MX_GPIO_Init+0x120>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <MX_GPIO_Init+0x120>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2f      	ldr	r2, [pc, #188]	; (800131c <MX_GPIO_Init+0x120>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_GPIO_Init+0x120>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_GPIO_Init+0x120>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <MX_GPIO_Init+0x120>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <MX_GPIO_Init+0x120>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <MX_GPIO_Init+0x120>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <MX_GPIO_Init+0x120>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_GPIO_Init+0x120>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_GPIO_Init+0x120>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <MX_GPIO_Init+0x120>)
 80012a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_GPIO_Init+0x120>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_GPIO_Init+0x120>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <MX_GPIO_Init+0x120>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_GPIO_Init+0x120>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_NRST_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2190      	movs	r1, #144	; 0x90
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <MX_GPIO_Init+0x124>)
 80012d8:	f002 f946 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOST_SENSE_Pin */
  GPIO_InitStruct.Pin = HOST_SENSE_Pin;
 80012dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HOST_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0x128>)
 80012f2:	f001 fe81 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_NRST_Pin;
 80012f6:	2390      	movs	r3, #144	; 0x90
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0x124>)
 800130e:	f001 fe73 	bl	8002ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40020400 	.word	0x40020400
 8001324:	40020c00 	.word	0x40020c00

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <MX_QUADSPI_Init>:


/* USER CODE BEGIN 1 */

static void MX_QUADSPI_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_QUADSPI_Init+0x50>)
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <MX_QUADSPI_Init+0x54>)
 800133c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4-1;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001340:	2203      	movs	r2, #3
 8001342:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001346:	2204      	movs	r2, #4
 8001348:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_QUADSPI_Init+0x50>)
 800134c:	2210      	movs	r2, #16
 800134e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001352:	2219      	movs	r2, #25
 8001354:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001358:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800135c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_QUADSPI_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_QUADSPI_Init+0x50>)
 8001372:	f002 fe01 	bl	8003f78 <HAL_QSPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800137c:	f7ff ffd4 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001bc 	.word	0x200001bc
 8001388:	a0001000 	.word	0xa0001000

0800138c <CSP_QUADSPI_Init>:


/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <CSP_QUADSPI_Init+0x64>)
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <CSP_QUADSPI_Init+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001396:	4816      	ldr	r0, [pc, #88]	; (80013f0 <CSP_QUADSPI_Init+0x64>)
 8001398:	f002 fe6a 	bl	8004070 <HAL_QSPI_DeInit>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e021      	b.n	80013ea <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 80013a6:	f7ff ffc5 	bl	8001334 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 80013aa:	f000 fa5b 	bl	8001864 <QSPI_ResetChip>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e018      	b.n	80013ea <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f001 f8e7 	bl	800258c <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80013be:	f000 f857 	bl	8001470 <QSPI_AutoPollingMemReady>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00e      	b.n	80013ea <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 80013cc:	f000 f88e 	bl	80014ec <QSPI_WriteEnable>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e007      	b.n	80013ea <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 80013da:	f000 f8d7 	bl	800158c <QSPI_Configuration>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001bc 	.word	0x200001bc
 80013f4:	a0001000 	.word	0xa0001000

080013f8 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;


	if (QSPI_WriteEnable() != HAL_OK) {
 80013fe:	f000 f875 	bl	80014ec <QSPI_WriteEnable>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e02b      	b.n	8001464 <CSP_QSPI_Erase_Chip+0x6c>
	}


	/* Erasing Sequence --------------------------------- */
	sCommand.Instruction = CHIP_ERASE_CMD;
 800140c:	23c7      	movs	r3, #199	; 0xc7
 800140e:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001414:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]


	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800143c:	463b      	mov	r3, r7
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <CSP_QSPI_Erase_Chip+0x74>)
 8001446:	f002 fe37 	bl	80040b8 <HAL_QSPI_Command>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <CSP_QSPI_Erase_Chip+0x5c>
			!= HAL_OK) {
		return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e007      	b.n	8001464 <CSP_QSPI_Erase_Chip+0x6c>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001454:	f000 f80c 	bl	8001470 <QSPI_AutoPollingMemReady>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <CSP_QSPI_Erase_Chip+0x6a>
				return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <CSP_QSPI_Erase_Chip+0x6c>
			}

	return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001bc 	.word	0x200001bc

08001470 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 800147c:	2305      	movs	r3, #5
 800147e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressSize = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a0:	2300      	movs	r3, #0
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a4:	2300      	movs	r3, #0
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 80014ac:	2301      	movs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80014b8:	2310      	movs	r3, #16
 80014ba:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80014bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c0:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80014c2:	463a      	mov	r2, r7
 80014c4:	f107 0118 	add.w	r1, r7, #24
 80014c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <QSPI_AutoPollingMemReady+0x78>)
 80014ce:	f002 ff8a 	bl	80043e6 <HAL_QSPI_AutoPolling>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <QSPI_AutoPollingMemReady+0x6c>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <QSPI_AutoPollingMemReady+0x6e>
	}

	return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3750      	adds	r7, #80	; 0x50
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200001bc 	.word	0x200001bc

080014ec <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b094      	sub	sp, #80	; 0x50
 80014f0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80014f8:	2306      	movs	r3, #6
 80014fa:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001510:	2300      	movs	r3, #0
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001514:	2300      	movs	r3, #0
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4619      	mov	r1, r3
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <QSPI_WriteEnable+0x9c>)
 8001524:	f002 fdc8 	bl	80040b8 <HAL_QSPI_Command>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e026      	b.n	8001580 <QSPI_WriteEnable+0x94>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001532:	2302      	movs	r3, #2
 8001534:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8001536:	2302      	movs	r3, #2
 8001538:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001542:	2310      	movs	r3, #16
 8001544:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154a:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 800154c:	2305      	movs	r3, #5
 800154e:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressSize = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001564:	463a      	mov	r2, r7
 8001566:	f107 0118 	add.w	r1, r7, #24
 800156a:	f241 3388 	movw	r3, #5000	; 0x1388
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <QSPI_WriteEnable+0x9c>)
 8001570:	f002 ff39 	bl	80043e6 <HAL_QSPI_AutoPolling>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <QSPI_WriteEnable+0x92>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <QSPI_WriteEnable+0x94>
	}

	return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3750      	adds	r7, #80	; 0x50
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200001bc 	.word	0x200001bc

0800158c <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	; 0x40
 8001590:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 800159c:	2305      	movs	r3, #5
 800159e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0xC0;
 80015a6:	23c0      	movs	r3, #192	; 0xc0
 80015a8:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80015ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4619      	mov	r1, r3
 80015d2:	4843      	ldr	r0, [pc, #268]	; (80016e0 <QSPI_Configuration+0x154>)
 80015d4:	f002 fd70 	bl	80040b8 <HAL_QSPI_Command>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <QSPI_Configuration+0x56>
			!= HAL_OK) {
		return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07a      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4619      	mov	r1, r3
 80015ea:	483d      	ldr	r0, [pc, #244]	; (80016e0 <QSPI_Configuration+0x154>)
 80015ec:	f002 fe59 	bl	80042a2 <HAL_QSPI_Receive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <QSPI_Configuration+0x6e>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06e      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 8001600:	2315      	movs	r3, #21
 8001602:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800160c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800161a:	2300      	movs	r3, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800161e:	2300      	movs	r3, #0
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4619      	mov	r1, r3
 8001630:	482b      	ldr	r0, [pc, #172]	; (80016e0 <QSPI_Configuration+0x154>)
 8001632:	f002 fd41 	bl	80040b8 <HAL_QSPI_Command>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <QSPI_Configuration+0xb4>
			!= HAL_OK) {
		return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e04b      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	3301      	adds	r3, #1
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4619      	mov	r1, r3
 800164a:	4825      	ldr	r0, [pc, #148]	; (80016e0 <QSPI_Configuration+0x154>)
 800164c:	f002 fe29 	bl	80042a2 <HAL_QSPI_Receive>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <QSPI_Configuration+0xce>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e03e      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 800165a:	793b      	ldrb	r3, [r7, #4]
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	b2db      	uxtb	r3, r3
 8001662:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800166a:	b2db      	uxtb	r3, r3
 800166c:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001682:	2300      	movs	r3, #0
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001686:	2300      	movs	r3, #0
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 800168a:	2301      	movs	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <QSPI_Configuration+0x154>)
 80016ac:	f002 fd04 	bl	80040b8 <HAL_QSPI_Command>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <QSPI_Configuration+0x12e>
			!= HAL_OK) {
		return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <QSPI_Configuration+0x154>)
 80016c4:	f002 fd56 	bl	8004174 <HAL_QSPI_Transmit>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <QSPI_Configuration+0x14a>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80016ce:	f7ff fe2b 	bl	8001328 <Error_Handler>
		return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <QSPI_Configuration+0x14c>
	}
	return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3740      	adds	r7, #64	; 0x40
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001bc 	.word	0x200001bc

080016e4 <CSP_QSPI_WriteMemory>:
	}

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b096      	sub	sp, #88	; 0x58
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
 80016f4:	e003      	b.n	80016fe <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 80016f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 80016fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	429a      	cmp	r2, r3
 8001704:	d9f7      	bls.n	80016f6 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8001706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 800170e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d901      	bls.n	800171a <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_16_BITS;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8001742:	2332      	movs	r3, #50	; 0x32
 8001744:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 800174c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 800175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001760:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8001762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 8001766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	e03f      	b.n	80017f0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8001770:	f7ff febc 	bl	80014ec <QSPI_WriteEnable>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e038      	b.n	80017f0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4619      	mov	r1, r3
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <CSP_QSPI_WriteMemory+0x114>)
 800178a:	f002 fc95 	bl	80040b8 <HAL_QSPI_Command>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e02b      	b.n	80017f0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <CSP_QSPI_WriteMemory+0x114>)
 80017a0:	f002 fce8 	bl	8004174 <HAL_QSPI_Transmit>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80017ae:	f7ff fe5f 	bl	8001470 <QSPI_AutoPollingMemReady>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e019      	b.n	80017f0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 80017bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	4413      	add	r3, r2
 80017c2:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 80017cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 80017d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d203      	bcs.n	80017e0 <CSP_QSPI_WriteMemory+0xfc>
 80017d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	e001      	b.n	80017e4 <CSP_QSPI_WriteMemory+0x100>
 80017e0:	f44f 7300 	mov.w	r3, #512	; 0x200
		current_size =
 80017e4:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 80017e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d9b7      	bls.n	800175e <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 80017ee:	2300      	movs	r3, #0

}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3758      	adds	r7, #88	; 0x58
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200001bc 	.word	0x200001bc

080017fc <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8001824:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8001832:	236b      	movs	r3, #107	; 0x6b
 8001834:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8001836:	230a      	movs	r3, #10
 8001838:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 800183e:	463a      	mov	r2, r7
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8001848:	f002 fe44 	bl	80044d4 <HAL_QSPI_MemoryMapped>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3740      	adds	r7, #64	; 0x40
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200001bc 	.word	0x200001bc

08001864 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	; 0x40
 8001868:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800188a:	2366      	movs	r3, #102	; 0x66
 800188c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4619      	mov	r1, r3
 80018a6:	486f      	ldr	r0, [pc, #444]	; (8001a64 <QSPI_ResetChip+0x200>)
 80018a8:	f002 fc06 	bl	80040b8 <HAL_QSPI_Command>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0d2      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ba:	e003      	b.n	80018c4 <QSPI_ResetChip+0x60>
		__NOP();
 80018bc:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80018be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c0:	3301      	adds	r3, #1
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c6:	2b2e      	cmp	r3, #46	; 0x2e
 80018c8:	d9f8      	bls.n	80018bc <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80018e2:	2300      	movs	r3, #0
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 80018e6:	2399      	movs	r3, #153	; 0x99
 80018e8:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4619      	mov	r1, r3
 8001902:	4858      	ldr	r0, [pc, #352]	; (8001a64 <QSPI_ResetChip+0x200>)
 8001904:	f002 fbd8 	bl	80040b8 <HAL_QSPI_Command>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0a4      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 800192e:	2366      	movs	r3, #102	; 0x66
 8001930:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4619      	mov	r1, r3
 800194a:	4846      	ldr	r0, [pc, #280]	; (8001a64 <QSPI_ResetChip+0x200>)
 800194c:	f002 fbb4 	bl	80040b8 <HAL_QSPI_Command>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <QSPI_ResetChip+0xf6>
			!= HAL_OK) {
		return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e080      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 800195a:	2300      	movs	r3, #0
 800195c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800195e:	e003      	b.n	8001968 <QSPI_ResetChip+0x104>
		__NOP();
 8001960:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001964:	3301      	adds	r3, #1
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196a:	2b2e      	cmp	r3, #46	; 0x2e
 800196c:	d9f8      	bls.n	8001960 <QSPI_ResetChip+0xfc>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 800196e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001972:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001986:	2300      	movs	r3, #0
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 800198a:	2399      	movs	r3, #153	; 0x99
 800198c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4619      	mov	r1, r3
 80019a6:	482f      	ldr	r0, [pc, #188]	; (8001a64 <QSPI_ResetChip+0x200>)
 80019a8:	f002 fb86 	bl	80040b8 <HAL_QSPI_Command>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <QSPI_ResetChip+0x152>
			!= HAL_OK) {
		return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e052      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80019b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ba:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 80019d2:	2366      	movs	r3, #102	; 0x66
 80019d4:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4619      	mov	r1, r3
 80019ee:	481d      	ldr	r0, [pc, #116]	; (8001a64 <QSPI_ResetChip+0x200>)
 80019f0:	f002 fb62 	bl	80040b8 <HAL_QSPI_Command>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <QSPI_ResetChip+0x19a>
			!= HAL_OK) {
		return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e02e      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a02:	e003      	b.n	8001a0c <QSPI_ResetChip+0x1a8>
		__NOP();
 8001a04:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a08:	3301      	adds	r3, #1
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001a10:	d9f8      	bls.n	8001a04 <QSPI_ResetChip+0x1a0>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a16:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8001a2e:	2399      	movs	r3, #153	; 0x99
 8001a30:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <QSPI_ResetChip+0x200>)
 8001a4c:	f002 fb34 	bl	80040b8 <HAL_QSPI_Command>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <QSPI_ResetChip+0x1f6>
			!= HAL_OK) {
		return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <QSPI_ResetChip+0x1f8>
	}

	return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3740      	adds	r7, #64	; 0x40
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200001bc 	.word	0x200001bc

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_MspInit+0x44>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_MspInit+0x44>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x44>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x44>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x44>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_ADC_MspInit+0x74>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d123      	bne.n	8001b1a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_ADC_MspInit+0x78>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8001b02:	2304      	movs	r3, #4
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_ADC_MspInit+0x7c>)
 8001b16:	f001 fa6f 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_CAN_MspInit+0x118>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d132      	bne.n	8001bb8 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001b5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10b      	bne.n	8001b7c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4828      	ldr	r0, [pc, #160]	; (8001c54 <HAL_CAN_MspInit+0x124>)
 8001bb2:	f001 fa21 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001bb6:	e042      	b.n	8001c3e <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_CAN_MspInit+0x128>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d13d      	bne.n	8001c3e <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001be2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_CAN_MspInit+0x11c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d10b      	bne.n	8001c04 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_CAN_MspInit+0x120>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <HAL_CAN_MspInit+0x12c>)
 8001c3a:	f001 f9dd 	bl	8002ff8 <HAL_GPIO_Init>
}
 8001c3e:	bf00      	nop
 8001c40:	3730      	adds	r7, #48	; 0x30
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40006400 	.word	0x40006400
 8001c4c:	20000328 	.word	0x20000328
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40006800 	.word	0x40006800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0aa      	sub	sp, #168	; 0xa8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	2284      	movs	r2, #132	; 0x84
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f961 	bl	8006f48 <memset>
  if(hi2c->Instance==I2C4)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_I2C_MspInit+0xb4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d13d      	bne.n	8001d0c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fb85 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001cac:	f7ff fb3c 	bl	8001328 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cc8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cec:	4619      	mov	r1, r3
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <HAL_I2C_MspInit+0xbc>)
 8001cf0:	f001 f982 	bl	8002ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_I2C_MspInit+0xb8>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	37a8      	adds	r7, #168	; 0xa8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40006000 	.word	0x40006000
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020c00 	.word	0x40020c00

08001d20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0b0      	sub	sp, #192	; 0xc0
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3c:	2284      	movs	r2, #132	; 0x84
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f005 f901 	bl	8006f48 <memset>
  if(hltdc->Instance==LTDC)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a98      	ldr	r2, [pc, #608]	; (8001fac <HAL_LTDC_MspInit+0x28c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	f040 8128 	bne.w	8001fa2 <HAL_LTDC_MspInit+0x282>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d52:	2308      	movs	r3, #8
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001d56:	2332      	movs	r3, #50	; 0x32
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fb1c 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001d7e:	f7ff fad3 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d82:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a8a      	ldr	r2, [pc, #552]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a84      	ldr	r2, [pc, #528]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a7e      	ldr	r2, [pc, #504]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b7c      	ldr	r3, [pc, #496]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a78      	ldr	r2, [pc, #480]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a72      	ldr	r2, [pc, #456]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a6c      	ldr	r2, [pc, #432]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a66      	ldr	r2, [pc, #408]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <HAL_LTDC_MspInit+0x290>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e44:	230e      	movs	r3, #14
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <HAL_LTDC_MspInit+0x294>)
 8001e52:	f001 f8d1 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001e56:	23c1      	movs	r3, #193	; 0xc1
 8001e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6e:	230e      	movs	r3, #14
 8001e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e78:	4619      	mov	r1, r3
 8001e7a:	484f      	ldr	r0, [pc, #316]	; (8001fb8 <HAL_LTDC_MspInit+0x298>)
 8001e7c:	f001 f8bc 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001e80:	237a      	movs	r3, #122	; 0x7a
 8001e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e98:	230e      	movs	r3, #14
 8001e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4845      	ldr	r0, [pc, #276]	; (8001fbc <HAL_LTDC_MspInit+0x29c>)
 8001ea6:	f001 f8a7 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ecc:	4619      	mov	r1, r3
 8001ece:	483c      	ldr	r0, [pc, #240]	; (8001fc0 <HAL_LTDC_MspInit+0x2a0>)
 8001ed0:	f001 f892 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001ed4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eee:	230e      	movs	r3, #14
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4831      	ldr	r0, [pc, #196]	; (8001fc0 <HAL_LTDC_MspInit+0x2a0>)
 8001efc:	f001 f87c 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001f00:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f1a:	230e      	movs	r3, #14
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f24:	4619      	mov	r1, r3
 8001f26:	4827      	ldr	r0, [pc, #156]	; (8001fc4 <HAL_LTDC_MspInit+0x2a4>)
 8001f28:	f001 f866 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001f2c:	2348      	movs	r3, #72	; 0x48
 8001f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f44:	230e      	movs	r3, #14
 8001f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <HAL_LTDC_MspInit+0x2a8>)
 8001f52:	f001 f851 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001f56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f70:	2309      	movs	r3, #9
 8001f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <HAL_LTDC_MspInit+0x2a4>)
 8001f7e:	f001 f83b 	bl	8002ff8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2058      	movs	r0, #88	; 0x58
 8001f88:	f000 ff8f 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f8c:	2058      	movs	r0, #88	; 0x58
 8001f8e:	f000 ffa8 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2059      	movs	r0, #89	; 0x59
 8001f98:	f000 ff87 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001f9c:	2059      	movs	r0, #89	; 0x59
 8001f9e:	f000 ffa0 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	37c0      	adds	r7, #192	; 0xc0
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40016800 	.word	0x40016800
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40020c00 	.word	0x40020c00

08001fcc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a44      	ldr	r2, [pc, #272]	; (80020fc <HAL_QSPI_MspInit+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f040 8081 	bne.w	80020f2 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6393      	str	r3, [r2, #56]	; 0x38
 8001ffc:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a36      	ldr	r2, [pc, #216]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_QSPI_MspInit+0x134>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002050:	2304      	movs	r3, #4
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4826      	ldr	r0, [pc, #152]	; (8002104 <HAL_QSPI_MspInit+0x138>)
 800206c:	f000 ffc4 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002080:	2309      	movs	r3, #9
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	481f      	ldr	r0, [pc, #124]	; (8002108 <HAL_QSPI_MspInit+0x13c>)
 800208c:	f000 ffb4 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020a2:	230a      	movs	r3, #10
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4816      	ldr	r0, [pc, #88]	; (8002108 <HAL_QSPI_MspInit+0x13c>)
 80020ae:	f000 ffa3 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b2:	2304      	movs	r3, #4
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020c2:	2309      	movs	r3, #9
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <HAL_QSPI_MspInit+0x140>)
 80020ce:	f000 ff93 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d2:	2340      	movs	r3, #64	; 0x40
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020e2:	230a      	movs	r3, #10
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <HAL_QSPI_MspInit+0x140>)
 80020ee:	f000 ff83 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3730      	adds	r7, #48	; 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	a0001000 	.word	0xa0001000
 8002100:	40023800 	.word	0x40023800
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_QSPI_MspDeInit+0x40>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d112      	bne.n	8002148 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_QSPI_MspDeInit+0x44>)
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_QSPI_MspDeInit+0x44>)
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800212e:	2104      	movs	r1, #4
 8002130:	4809      	ldr	r0, [pc, #36]	; (8002158 <HAL_QSPI_MspDeInit+0x48>)
 8002132:	f001 f90d 	bl	8003350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9);
 8002136:	f44f 7150 	mov.w	r1, #832	; 0x340
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <HAL_QSPI_MspDeInit+0x4c>)
 800213c:	f001 f908 	bl	8003350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002140:	2144      	movs	r1, #68	; 0x44
 8002142:	4807      	ldr	r0, [pc, #28]	; (8002160 <HAL_QSPI_MspDeInit+0x50>)
 8002144:	f001 f904 	bl	8003350 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	a0001000 	.word	0xa0001000
 8002154:	40023800 	.word	0x40023800
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40020400 	.word	0x40020400

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_SPI_MspInit+0x7c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d127      	bne.n	80021d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_SPI_MspInit+0x80>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80021b6:	2328      	movs	r3, #40	; 0x28
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c6:	2305      	movs	r3, #5
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_SPI_MspInit+0x84>)
 80021d2:	f000 ff11 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40013000 	.word	0x40013000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020400 	.word	0x40020400

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0aa      	sub	sp, #168	; 0xa8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2284      	movs	r2, #132	; 0x84
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fe9b 	bl	8006f48 <memset>
  if(huart->Instance==UART4)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_UART_MspInit+0xb4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d13c      	bne.n	8002296 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800221c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002220:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002222:	2300      	movs	r3, #0
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4618      	mov	r0, r3
 800222c:	f003 f8c0 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002236:	f7ff f877 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_UART_MspInit+0xb8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800226a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800226e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002284:	2308      	movs	r3, #8
 8002286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_UART_MspInit+0xbc>)
 8002292:	f000 feb1 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	37a8      	adds	r7, #168	; 0xa8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40004c00 	.word	0x40004c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800

080022ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <HAL_FMC_MspInit+0x100>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d16d      	bne.n	80023a4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_FMC_MspInit+0x100>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_FMC_MspInit+0x104>)
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <HAL_FMC_MspInit+0x104>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38
 80022da:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_FMC_MspInit+0x104>)
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022f8:	230c      	movs	r3, #12
 80022fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	482c      	ldr	r0, [pc, #176]	; (80023b4 <HAL_FMC_MspInit+0x108>)
 8002302:	f000 fe79 	bl	8002ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002306:	230c      	movs	r3, #12
 8002308:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002316:	230c      	movs	r3, #12
 8002318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4826      	ldr	r0, [pc, #152]	; (80023b8 <HAL_FMC_MspInit+0x10c>)
 8002320:	f000 fe6a 	bl	8002ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002334:	230c      	movs	r3, #12
 8002336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4619      	mov	r1, r3
 800233c:	481f      	ldr	r0, [pc, #124]	; (80023bc <HAL_FMC_MspInit+0x110>)
 800233e:	f000 fe5b 	bl	8002ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8002342:	f248 1311 	movw	r3, #33041	; 0x8111
 8002346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002354:	230c      	movs	r3, #12
 8002356:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <HAL_FMC_MspInit+0x114>)
 800235e:	f000 fe4b 	bl	8002ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002362:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002366:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002374:	230c      	movs	r3, #12
 8002376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <HAL_FMC_MspInit+0x118>)
 800237e:	f000 fe3b 	bl	8002ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002382:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002386:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002394:	230c      	movs	r3, #12
 8002396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	4619      	mov	r1, r3
 800239c:	480a      	ldr	r0, [pc, #40]	; (80023c8 <HAL_FMC_MspInit+0x11c>)
 800239e:	f000 fe2b 	bl	8002ff8 <HAL_GPIO_Init>
 80023a2:	e000      	b.n	80023a6 <HAL_FMC_MspInit+0xfa>
    return;
 80023a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000032c 	.word	0x2000032c
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40021800 	.word	0x40021800
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40020c00 	.word	0x40020c00

080023cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80023d4:	f7ff ff6a 	bl	80022ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler+0x4>

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f000 f88e 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <LTDC_IRQHandler+0x10>)
 800243a:	f001 fab3 	bl	80039a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000114 	.word	0x20000114

08002448 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <LTDC_ER_IRQHandler+0x10>)
 800244e:	f001 faa9 	bl	80039a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000114 	.word	0x20000114

0800245c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <SystemInit+0x20>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <SystemInit+0x20>)
 8002468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800246c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002484:	f7ff ffea 	bl	800245c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024ae:	f004 fd27 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024b2:	f7fe fb8b 	bl	8000bcc <main>
  bx  lr    
 80024b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024c4:	08006fa4 	.word	0x08006fa4
  ldr r2, =_sbss
 80024c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80024cc:	20000334 	.word	0x20000334

080024d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC_IRQHandler>

080024d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d6:	2003      	movs	r0, #3
 80024d8:	f000 fcdc 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024dc:	200f      	movs	r0, #15
 80024de:	f000 f805 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e2:	f7ff fac1 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fcf7 	bl	8002efe <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f000 fcbf 	bl	8002eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000000 	.word	0x20000000
 8002544:	20000008 	.word	0x20000008
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008
 8002570:	20000330 	.word	0x20000330

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000330 	.word	0x20000330

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008

080025d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e031      	b.n	800264e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fa5c 	bl	8001ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_ADC_Init+0x84>)
 8002618:	4013      	ands	r3, r2
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f970 	bl	8002908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
 800263e:	e001      	b.n	8002644 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	ffffeefd 	.word	0xffffeefd

0800265c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e136      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x28a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d93a      	bls.n	80026fe <HAL_ADC_ConfigChannel+0xa2>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002690:	d035      	beq.n	80026fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	3b1e      	subs	r3, #30
 80026a8:	2207      	movs	r2, #7
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8d      	ldr	r2, [pc, #564]	; (80028f4 <HAL_ADC_ConfigChannel+0x298>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	061a      	lsls	r2, r3, #24
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d6:	e035      	b.n	8002744 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4403      	add	r3, r0
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	409a      	lsls	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026fc:	e022      	b.n	8002744 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	2207      	movs	r2, #7
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43da      	mvns	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	400a      	ands	r2, r1
 8002720:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6919      	ldr	r1, [r3, #16]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	4603      	mov	r3, r0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4403      	add	r3, r0
 800273a:	409a      	lsls	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b06      	cmp	r3, #6
 800274a:	d824      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	221f      	movs	r2, #31
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
 8002794:	e04c      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d824      	bhi.n	80027e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	; 0x23
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	; 0x23
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
 80027e6:	e023      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	; 0x41
 80027fa:	221f      	movs	r2, #31
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	; 0x41
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002842:	d105      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 800284a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800284e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10f      	bne.n	800287a <HAL_ADC_ConfigChannel+0x21e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b12      	cmp	r3, #18
 8002860:	d10b      	bne.n	800287a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a25      	ldr	r2, [pc, #148]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002868:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800286c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002878:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_ADC_ConfigChannel+0x29c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d12b      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x280>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_ADC_ConfigChannel+0x298>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d122      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 800289c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_ADC_ConfigChannel+0x2a0>)
 80028a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_ADC_ConfigChannel+0x298>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_ADC_ConfigChannel+0x2a4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_ADC_ConfigChannel+0x2a8>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9a      	lsrs	r2, r3, #18
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	10000012 	.word	0x10000012
 80028f8:	40012000 	.word	0x40012000
 80028fc:	40012300 	.word	0x40012300
 8002900:	20000000 	.word	0x20000000
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <ADC_Init+0x1ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <ADC_Init+0x1ec>)
 8002916:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800291a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <ADC_Init+0x1ec>)
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4973      	ldr	r1, [pc, #460]	; (8002af4 <ADC_Init+0x1ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800295c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <ADC_Init+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e00f      	b.n	8002a02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0202 	bic.w	r2, r2, #2
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	035a      	lsls	r2, r3, #13
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e007      	b.n	8002a78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	051a      	lsls	r2, r3, #20
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aba:	025a      	lsls	r2, r3, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	029a      	lsls	r2, r3, #10
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40012300 	.word	0x40012300
 8002af8:	0f000001 	.word	0x0f000001

08002afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0ed      	b.n	8002cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f808 	bl	8001b30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b30:	f7ff fd20 	bl	8002574 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b36:	e012      	b.n	8002b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b38:	f7ff fd1c 	bl	8002574 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b0a      	cmp	r3, #10
 8002b44:	d90b      	bls.n	8002b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0c5      	b.n	8002cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0e5      	beq.n	8002b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0202 	bic.w	r2, r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7ff fcfa 	bl	8002574 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b82:	e012      	b.n	8002baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b84:	f7ff fcf6 	bl	8002574 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b0a      	cmp	r3, #10
 8002b90:	d90b      	bls.n	8002baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e09f      	b.n	8002cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d108      	bne.n	8002bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e007      	b.n	8002be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7e5b      	ldrb	r3, [r3, #25]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e007      	b.n	8002c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7e9b      	ldrb	r3, [r3, #26]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0220 	bic.w	r2, r2, #32
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7edb      	ldrb	r3, [r3, #27]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0210 	bic.w	r2, r2, #16
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e007      	b.n	8002c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0210 	orr.w	r2, r2, #16
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7f1b      	ldrb	r3, [r3, #28]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e007      	b.n	8002c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7f5b      	ldrb	r3, [r3, #29]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0204 	orr.w	r2, r2, #4
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e007      	b.n	8002cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <__NVIC_SetPriorityGrouping+0x40>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <__NVIC_SetPriorityGrouping+0x40>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	05fa0000 	.word	0x05fa0000

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_EnableIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff29 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff3e 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff8e 	bl	8002de8 <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5d 	bl	8002d94 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff31 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffa2 	bl	8002e50 <SysTick_Config>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7ff fb26 	bl	8002574 <HAL_GetTick>
 8002f28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d008      	beq.n	8002f48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e052      	b.n	8002fee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0216 	bic.w	r2, r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <HAL_DMA_Abort+0x62>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0208 	bic.w	r2, r2, #8
 8002f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f98:	e013      	b.n	8002fc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9a:	f7ff faeb 	bl	8002574 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d90c      	bls.n	8002fc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e015      	b.n	8002fee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e4      	bne.n	8002f9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e175      	b.n	8003304 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 8164 	bne.w	80032fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_GPIO_Init+0x56>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80be 	beq.w	80032fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_GPIO_Init+0x324>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_GPIO_Init+0x324>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_GPIO_Init+0x324>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800319a:	4a61      	ldr	r2, [pc, #388]	; (8003320 <HAL_GPIO_Init+0x328>)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a58      	ldr	r2, [pc, #352]	; (8003324 <HAL_GPIO_Init+0x32c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d037      	beq.n	8003236 <HAL_GPIO_Init+0x23e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a57      	ldr	r2, [pc, #348]	; (8003328 <HAL_GPIO_Init+0x330>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d031      	beq.n	8003232 <HAL_GPIO_Init+0x23a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_GPIO_Init+0x334>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d02b      	beq.n	800322e <HAL_GPIO_Init+0x236>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_GPIO_Init+0x338>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d025      	beq.n	800322a <HAL_GPIO_Init+0x232>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x33c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <HAL_GPIO_Init+0x22e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_GPIO_Init+0x340>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d019      	beq.n	8003222 <HAL_GPIO_Init+0x22a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a52      	ldr	r2, [pc, #328]	; (800333c <HAL_GPIO_Init+0x344>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x226>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a51      	ldr	r2, [pc, #324]	; (8003340 <HAL_GPIO_Init+0x348>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00d      	beq.n	800321a <HAL_GPIO_Init+0x222>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a50      	ldr	r2, [pc, #320]	; (8003344 <HAL_GPIO_Init+0x34c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x21e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_GPIO_Init+0x350>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_GPIO_Init+0x21a>
 800320e:	2309      	movs	r3, #9
 8003210:	e012      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003212:	230a      	movs	r3, #10
 8003214:	e010      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003216:	2308      	movs	r3, #8
 8003218:	e00e      	b.n	8003238 <HAL_GPIO_Init+0x240>
 800321a:	2307      	movs	r3, #7
 800321c:	e00c      	b.n	8003238 <HAL_GPIO_Init+0x240>
 800321e:	2306      	movs	r3, #6
 8003220:	e00a      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003222:	2305      	movs	r3, #5
 8003224:	e008      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003226:	2304      	movs	r3, #4
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x240>
 800322a:	2303      	movs	r3, #3
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x240>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x240>
 8003236:	2300      	movs	r3, #0
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f002 0203 	and.w	r2, r2, #3
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003248:	4935      	ldr	r1, [pc, #212]	; (8003320 <HAL_GPIO_Init+0x328>)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_GPIO_Init+0x354>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327a:	4a34      	ldr	r2, [pc, #208]	; (800334c <HAL_GPIO_Init+0x354>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003280:	4b32      	ldr	r3, [pc, #200]	; (800334c <HAL_GPIO_Init+0x354>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a4:	4a29      	ldr	r2, [pc, #164]	; (800334c <HAL_GPIO_Init+0x354>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_GPIO_Init+0x354>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ce:	4a1f      	ldr	r2, [pc, #124]	; (800334c <HAL_GPIO_Init+0x354>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_GPIO_Init+0x354>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_GPIO_Init+0x354>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3301      	adds	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	f67f ae86 	bls.w	8003018 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3724      	adds	r7, #36	; 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40013800 	.word	0x40013800
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40021000 	.word	0x40021000
 8003338:	40021400 	.word	0x40021400
 800333c:	40021800 	.word	0x40021800
 8003340:	40021c00 	.word	0x40021c00
 8003344:	40022000 	.word	0x40022000
 8003348:	40022400 	.word	0x40022400
 800334c:	40013c00 	.word	0x40013c00

08003350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e0d9      	b.n	8003520 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800336c:	2201      	movs	r2, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	f040 80c9 	bne.w	800351a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003388:	4a6b      	ldr	r2, [pc, #428]	; (8003538 <HAL_GPIO_DeInit+0x1e8>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003394:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a63      	ldr	r2, [pc, #396]	; (800353c <HAL_GPIO_DeInit+0x1ec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d037      	beq.n	8003422 <HAL_GPIO_DeInit+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a62      	ldr	r2, [pc, #392]	; (8003540 <HAL_GPIO_DeInit+0x1f0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_GPIO_DeInit+0xce>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a61      	ldr	r2, [pc, #388]	; (8003544 <HAL_GPIO_DeInit+0x1f4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02b      	beq.n	800341a <HAL_GPIO_DeInit+0xca>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_GPIO_DeInit+0x1f8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d025      	beq.n	8003416 <HAL_GPIO_DeInit+0xc6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a5f      	ldr	r2, [pc, #380]	; (800354c <HAL_GPIO_DeInit+0x1fc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <HAL_GPIO_DeInit+0xc2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_GPIO_DeInit+0x200>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_DeInit+0xbe>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_GPIO_DeInit+0x204>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_DeInit+0xba>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a5c      	ldr	r2, [pc, #368]	; (8003558 <HAL_GPIO_DeInit+0x208>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_DeInit+0xb6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_GPIO_DeInit+0x20c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_DeInit+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_GPIO_DeInit+0x210>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_DeInit+0xae>
 80033fa:	2309      	movs	r3, #9
 80033fc:	e012      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 80033fe:	230a      	movs	r3, #10
 8003400:	e010      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 8003402:	2308      	movs	r3, #8
 8003404:	e00e      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 8003406:	2307      	movs	r3, #7
 8003408:	e00c      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 800340a:	2306      	movs	r3, #6
 800340c:	e00a      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 800340e:	2305      	movs	r3, #5
 8003410:	e008      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 8003412:	2304      	movs	r3, #4
 8003414:	e006      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_DeInit+0xd4>
 8003422:	2300      	movs	r3, #0
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d132      	bne.n	800349a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	4949      	ldr	r1, [pc, #292]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 800343e:	4013      	ands	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	4946      	ldr	r1, [pc, #280]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 800344c:	4013      	ands	r3, r2
 800344e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003450:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	43db      	mvns	r3, r3
 8003458:	4942      	ldr	r1, [pc, #264]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 800345a:	4013      	ands	r3, r2
 800345c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	493f      	ldr	r1, [pc, #252]	; (8003564 <HAL_GPIO_DeInit+0x214>)
 8003468:	4013      	ands	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800347c:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <HAL_GPIO_DeInit+0x1e8>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	43da      	mvns	r2, r3
 800348c:	482a      	ldr	r0, [pc, #168]	; (8003538 <HAL_GPIO_DeInit+0x1e8>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	400a      	ands	r2, r1
 8003494:	3302      	adds	r3, #2
 8003496:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2103      	movs	r1, #3
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	08d2      	lsrs	r2, r2, #3
 80034d0:	4019      	ands	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2103      	movs	r1, #3
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	2101      	movs	r1, #1
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2103      	movs	r1, #3
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3301      	adds	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f67f af22 	bls.w	800336c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40013800 	.word	0x40013800
 800353c:	40020000 	.word	0x40020000
 8003540:	40020400 	.word	0x40020400
 8003544:	40020800 	.word	0x40020800
 8003548:	40020c00 	.word	0x40020c00
 800354c:	40021000 	.word	0x40021000
 8003550:	40021400 	.word	0x40021400
 8003554:	40021800 	.word	0x40021800
 8003558:	40021c00 	.word	0x40021c00
 800355c:	40022000 	.word	0x40022000
 8003560:	40022400 	.word	0x40022400
 8003564:	40013c00 	.word	0x40013c00

08003568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
 8003574:	4613      	mov	r3, r2
 8003576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003578:	787b      	ldrb	r3, [r7, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003584:	e003      	b.n	800358e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	041a      	lsls	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e08b      	b.n	80036c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fb4c 	bl	8001c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e006      	b.n	8003624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d108      	bne.n	800363e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	e007      	b.n	800364e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_I2C_Init+0x134>)
 800365a:	430b      	orrs	r3, r1
 800365c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800366c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69d9      	ldr	r1, [r3, #28]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	02008000 	.word	0x02008000

080036d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d138      	bne.n	800375c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e032      	b.n	800375e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	d139      	bne.n	80037f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800378a:	2302      	movs	r3, #2
 800378c:	e033      	b.n	80037f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0bf      	b.n	8003996 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fa78 	bl	8001d20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003846:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800385c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_LTDC_Init+0x19c>)
 8003878:	400b      	ands	r3, r1
 800387a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68d9      	ldr	r1, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_LTDC_Init+0x19c>)
 80038a6:	400b      	ands	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6919      	ldr	r1, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_LTDC_Init+0x19c>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_LTDC_Init+0x19c>)
 8003902:	400b      	ands	r3, r1
 8003904:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6959      	ldr	r1, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0206 	orr.w	r2, r2, #6
 8003972:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	f000f800 	.word	0xf000f800

080039a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d023      	beq.n	8003a0e <HAL_LTDC_IRQHandler+0x6a>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01e      	beq.n	8003a0e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0204 	bic.w	r2, r2, #4
 80039de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2204      	movs	r2, #4
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2204      	movs	r2, #4
 80039fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f86f 	bl	8003aec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d023      	beq.n	8003a60 <HAL_LTDC_IRQHandler+0xbc>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01e      	beq.n	8003a60 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0202 	bic.w	r2, r2, #2
 8003a30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2202      	movs	r2, #2
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a40:	f043 0202 	orr.w	r2, r3, #2
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f846 	bl	8003aec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01b      	beq.n	8003aa2 <HAL_LTDC_IRQHandler+0xfe>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f82f 	bl	8003b00 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_LTDC_IRQHandler+0x140>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0208 	bic.w	r2, r2, #8
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2208      	movs	r2, #8
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f818 	bl	8003b14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_LTDC_ConfigLayer+0x1a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e02c      	b.n	8003b9c <HAL_LTDC_ConfigLayer+0x74>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2134      	movs	r1, #52	; 0x34
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4614      	mov	r4, r2
 8003b66:	461d      	mov	r5, r3
 8003b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f811 	bl	8003ba4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bdb0      	pop	{r4, r5, r7, pc}

08003ba4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	4413      	add	r3, r2
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3384      	adds	r3, #132	; 0x84
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	01d2      	lsls	r2, r2, #7
 8003be0:	440a      	add	r2, r1
 8003be2:	3284      	adds	r2, #132	; 0x84
 8003be4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003be8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bfa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bfc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	440b      	add	r3, r1
 8003c0a:	3384      	adds	r3, #132	; 0x84
 8003c0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c22:	4413      	add	r3, r2
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	01db      	lsls	r3, r3, #7
 8003c32:	4413      	add	r3, r2
 8003c34:	3384      	adds	r3, #132	; 0x84
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	01d2      	lsls	r2, r2, #7
 8003c42:	440a      	add	r2, r1
 8003c44:	3284      	adds	r2, #132	; 0x84
 8003c46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003c4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c5a:	4413      	add	r3, r2
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	01db      	lsls	r3, r3, #7
 8003c68:	440b      	add	r3, r1
 8003c6a:	3384      	adds	r3, #132	; 0x84
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	01db      	lsls	r3, r3, #7
 8003c7e:	4413      	add	r3, r2
 8003c80:	3384      	adds	r3, #132	; 0x84
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	01d2      	lsls	r2, r2, #7
 8003c8e:	440a      	add	r2, r1
 8003c90:	3284      	adds	r2, #132	; 0x84
 8003c92:	f023 0307 	bic.w	r3, r3, #7
 8003c96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	01db      	lsls	r3, r3, #7
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3384      	adds	r3, #132	; 0x84
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	01db      	lsls	r3, r3, #7
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3384      	adds	r3, #132	; 0x84
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	01db      	lsls	r3, r3, #7
 8003d08:	440b      	add	r3, r1
 8003d0a:	3384      	adds	r3, #132	; 0x84
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	3384      	adds	r3, #132	; 0x84
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	01d2      	lsls	r2, r2, #7
 8003d2e:	440a      	add	r2, r1
 8003d30:	3284      	adds	r2, #132	; 0x84
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	3384      	adds	r3, #132	; 0x84
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	01db      	lsls	r3, r3, #7
 8003d58:	4413      	add	r3, r2
 8003d5a:	3384      	adds	r3, #132	; 0x84
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	01db      	lsls	r3, r3, #7
 8003d68:	440b      	add	r3, r1
 8003d6a:	3384      	adds	r3, #132	; 0x84
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <LTDC_SetConfig+0x32c>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	4608      	mov	r0, r1
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	01c9      	lsls	r1, r1, #7
 8003d86:	4401      	add	r1, r0
 8003d88:	3184      	adds	r1, #132	; 0x84
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	4413      	add	r3, r2
 8003d9a:	3384      	adds	r3, #132	; 0x84
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	4413      	add	r3, r2
 8003daa:	3384      	adds	r3, #132	; 0x84
 8003dac:	461a      	mov	r2, r3
 8003dae:	2300      	movs	r3, #0
 8003db0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3384      	adds	r3, #132	; 0x84
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e01b      	b.n	8003e0e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d102      	bne.n	8003de4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003dde:	2303      	movs	r3, #3
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e014      	b.n	8003e0e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d00b      	beq.n	8003e04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d007      	beq.n	8003e04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d102      	bne.n	8003e0a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003e04:	2302      	movs	r3, #2
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e001      	b.n	8003e0e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	01db      	lsls	r3, r3, #7
 8003e18:	4413      	add	r3, r2
 8003e1a:	3384      	adds	r3, #132	; 0x84
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4611      	mov	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	01d2      	lsls	r2, r2, #7
 8003e28:	440a      	add	r2, r1
 8003e2a:	3284      	adds	r2, #132	; 0x84
 8003e2c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	6809      	ldr	r1, [r1, #0]
 8003e54:	4608      	mov	r0, r1
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	01c9      	lsls	r1, r1, #7
 8003e5a:	4401      	add	r1, r0
 8003e5c:	3184      	adds	r1, #132	; 0x84
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	01db      	lsls	r3, r3, #7
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3384      	adds	r3, #132	; 0x84
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3384      	adds	r3, #132	; 0x84
 8003e80:	4619      	mov	r1, r3
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <LTDC_SetConfig+0x330>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	01db      	lsls	r3, r3, #7
 8003e92:	4413      	add	r3, r2
 8003e94:	3384      	adds	r3, #132	; 0x84
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3384      	adds	r3, #132	; 0x84
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	01d2      	lsls	r2, r2, #7
 8003eb8:	440a      	add	r2, r1
 8003eba:	3284      	adds	r2, #132	; 0x84
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	fffff8f8 	.word	0xfffff8f8
 8003ed4:	fffff800 	.word	0xfffff800

08003ed8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f06:	f7fe fb35 	bl	8002574 <HAL_GetTick>
 8003f0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f0c:	e009      	b.n	8003f22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f0e:	f7fe fb31 	bl	8002574 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1c:	d901      	bls.n	8003f22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e022      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3c:	f7fe fb1a 	bl	8002574 <HAL_GetTick>
 8003f40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f42:	e009      	b.n	8003f58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f44:	f7fe fb16 	bl	8002574 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f52:	d901      	bls.n	8003f58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e007      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f64:	d1ee      	bne.n	8003f44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7fe faf8 	bl	8002574 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e067      	b.n	8004060 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fe f811 	bl	8001fcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003faa:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fb6b 	bl	800468a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2120      	movs	r1, #32
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb63 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d135      	bne.n	8004056 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_QSPI_Init+0xf0>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6852      	ldr	r2, [r2, #4]
 8003ff8:	0611      	lsls	r1, r2, #24
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	69d2      	ldr	r2, [r2, #28]
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a12      	ldr	r2, [r2, #32]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_QSPI_Init+0xf4>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6912      	ldr	r2, [r2, #16]
 8004022:	0411      	lsls	r1, r2, #16
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6952      	ldr	r2, [r2, #20]
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6992      	ldr	r2, [r2, #24]
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	430b      	orrs	r3, r1
 8004036:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800405e:	7afb      	ldrb	r3, [r7, #11]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	00ffff2f 	.word	0x00ffff2f
 800406c:	ffe0f8fe 	.word	0xffe0f8fe

08004070 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e016      	b.n	80040b0 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe f83c 	bl	8002110 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7fe fa56 	bl	8002574 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_QSPI_Command+0x22>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e048      	b.n	800416c <HAL_QSPI_Command+0xb4>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d137      	bne.n	800415e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2200      	movs	r2, #0
 8004104:	2120      	movs	r1, #32
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 facd 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d125      	bne.n	8004162 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004116:	2200      	movs	r2, #0
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fafa 	bl	8004714 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d115      	bne.n	8004154 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2201      	movs	r2, #1
 8004130:	2102      	movs	r1, #2
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fab7 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10f      	bne.n	8004162 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2202      	movs	r2, #2
 8004148:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004152:	e006      	b.n	8004162 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	e001      	b.n	8004162 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7fe f9f6 	bl	8002574 <HAL_GetTick>
 8004188:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3320      	adds	r3, #32
 8004190:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_QSPI_Transmit+0x2e>
 800419e:	2302      	movs	r3, #2
 80041a0:	e07b      	b.n	800429a <HAL_QSPI_Transmit+0x126>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d16a      	bne.n	800428c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d05b      	beq.n	800427a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2212      	movs	r2, #18
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80041f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80041f8:	e01b      	b.n	8004232 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2201      	movs	r2, #1
 8004202:	2104      	movs	r1, #4
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fa4e 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800420e:	7ffb      	ldrb	r3, [r7, #31]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d113      	bne.n	800423c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1df      	bne.n	80041fa <HAL_QSPI_Transmit+0x86>
 800423a:	e000      	b.n	800423e <HAL_QSPI_Transmit+0xca>
          break;
 800423c:	bf00      	nop
      }

      if (status == HAL_OK)
 800423e:	7ffb      	ldrb	r3, [r7, #31]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d115      	bne.n	8004270 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2201      	movs	r2, #1
 800424c:	2102      	movs	r1, #2
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa29 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2202      	movs	r2, #2
 8004264:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f996 	bl	8004598 <HAL_QSPI_Abort>
 800426c:	4603      	mov	r3, r0
 800426e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004278:	e00a      	b.n	8004290 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f043 0208 	orr.w	r2, r3, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e001      	b.n	8004290 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800428c:	2302      	movs	r3, #2
 800428e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004298:	7ffb      	ldrb	r3, [r7, #31]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	; 0x28
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80042b2:	f7fe f95f 	bl	8002574 <HAL_GetTick>
 80042b6:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3320      	adds	r3, #32
 80042c6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_QSPI_Receive+0x36>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e082      	b.n	80043de <HAL_QSPI_Receive+0x13c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d171      	bne.n	80043d0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d062      	beq.n	80043be <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2222      	movs	r2, #34	; 0x22
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004330:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800433a:	e01c      	b.n	8004376 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2201      	movs	r2, #1
 8004344:	2106      	movs	r1, #6
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f9ad 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004350:	7ffb      	ldrb	r3, [r7, #31]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d114      	bne.n	8004380 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1de      	bne.n	800433c <HAL_QSPI_Receive+0x9a>
 800437e:	e000      	b.n	8004382 <HAL_QSPI_Receive+0xe0>
          break;
 8004380:	bf00      	nop
      }

      if (status == HAL_OK)
 8004382:	7ffb      	ldrb	r3, [r7, #31]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d115      	bne.n	80043b4 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2201      	movs	r2, #1
 8004390:	2102      	movs	r1, #2
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f987 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2202      	movs	r2, #2
 80043a8:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f8f4 	bl	8004598 <HAL_QSPI_Abort>
 80043b0:	4603      	mov	r3, r0
 80043b2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043bc:	e00a      	b.n	80043d4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e001      	b.n	80043d4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b088      	sub	sp, #32
 80043ea:	af02      	add	r7, sp, #8
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043f4:	f7fe f8be 	bl	8002574 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_QSPI_AutoPolling+0x24>
 8004406:	2302      	movs	r3, #2
 8004408:	e060      	b.n	80044cc <HAL_QSPI_AutoPolling+0xe6>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d14f      	bne.n	80044be <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2242      	movs	r2, #66	; 0x42
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2200      	movs	r2, #0
 8004434:	2120      	movs	r1, #32
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f935 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d13d      	bne.n	80044c2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6852      	ldr	r2, [r2, #4]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6892      	ldr	r2, [r2, #8]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800447c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f941 	bl	8004714 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2201      	movs	r2, #1
 800449a:	2108      	movs	r1, #8
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f902 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044bc:	e001      	b.n	80044c2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80044be:	2302      	movs	r3, #2
 80044c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7fe f848 	bl	8002574 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_QSPI_MemoryMapped+0x22>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e04c      	b.n	8004590 <HAL_QSPI_MemoryMapped+0xbc>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d13b      	bne.n	8004582 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2282      	movs	r2, #130	; 0x82
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2200      	movs	r2, #0
 8004522:	2120      	movs	r1, #32
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f8be 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d128      	bne.n	8004586 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 0108 	bic.w	r1, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b08      	cmp	r3, #8
 8004550:	d110      	bne.n	8004574 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2210      	movs	r2, #16
 8004562:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004572:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004574:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8ca 	bl	8004714 <QSPI_Config>
 8004580:	e001      	b.n	8004586 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7fd ffe6 	bl	8002574 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d062      	beq.n	8004680 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fc96 	bl	8002f16 <HAL_DMA_Abort>
 80045ea:	4603      	mov	r3, r0
 80045ec:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d034      	beq.n	8004678 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0202 	orr.w	r2, r2, #2
 800461c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2201      	movs	r2, #1
 8004628:	2102      	movs	r1, #2
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f83b 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10e      	bne.n	8004658 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2202      	movs	r2, #2
 8004640:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	2120      	movs	r1, #32
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f829 	bl	80046a6 <QSPI_WaitFlagStateUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d110      	bne.n	8004680 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800466c:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004676:	e003      	b.n	8004680 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	649a      	str	r2, [r3, #72]	; 0x48
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046b6:	e01a      	b.n	80046ee <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d016      	beq.n	80046ee <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c0:	f7fd ff58 	bl	8002574 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2204      	movs	r2, #4
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00e      	b.n	800470c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d1d6      	bne.n	80046b8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <QSPI_Config+0x28>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800472e:	d005      	beq.n	800473c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3a01      	subs	r2, #1
 800473a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80b9 	beq.w	80048b8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d05f      	beq.n	800480e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d031      	beq.n	80047c4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	431a      	orrs	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	431a      	orrs	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	431a      	orrs	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	049b      	lsls	r3, r3, #18
 800477c:	431a      	orrs	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	431a      	orrs	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	431a      	orrs	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	431a      	orrs	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	ea42 0103 	orr.w	r1, r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047b4:	f000 812e 	beq.w	8004a14 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	6852      	ldr	r2, [r2, #4]
 80047c0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80047c2:	e127      	b.n	8004a14 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	049b      	lsls	r3, r3, #18
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	430a      	orrs	r2, r1
 800480a:	615a      	str	r2, [r3, #20]
}
 800480c:	e102      	b.n	8004a14 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02e      	beq.n	8004874 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	431a      	orrs	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	431a      	orrs	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	431a      	orrs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	049b      	lsls	r3, r3, #18
 8004832:	431a      	orrs	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	431a      	orrs	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	431a      	orrs	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	431a      	orrs	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	ea42 0103 	orr.w	r1, r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	430a      	orrs	r2, r1
 800485c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004864:	f000 80d6 	beq.w	8004a14 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	6852      	ldr	r2, [r2, #4]
 8004870:	619a      	str	r2, [r3, #24]
}
 8004872:	e0cf      	b.n	8004a14 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	431a      	orrs	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	431a      	orrs	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	049b      	lsls	r3, r3, #18
 8004890:	431a      	orrs	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	431a      	orrs	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	ea42 0103 	orr.w	r1, r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	615a      	str	r2, [r3, #20]
}
 80048b6:	e0ad      	b.n	8004a14 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d058      	beq.n	8004972 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	6892      	ldr	r2, [r2, #8]
 80048c8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02d      	beq.n	800492e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	431a      	orrs	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	049b      	lsls	r3, r3, #18
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	431a      	orrs	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	431a      	orrs	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	ea42 0103 	orr.w	r1, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	430a      	orrs	r2, r1
 8004918:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004920:	d078      	beq.n	8004a14 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	619a      	str	r2, [r3, #24]
}
 800492c:	e072      	b.n	8004a14 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	431a      	orrs	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	049b      	lsls	r3, r3, #18
 800494a:	431a      	orrs	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	431a      	orrs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	431a      	orrs	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	430a      	orrs	r2, r1
 800496e:	615a      	str	r2, [r3, #20]
}
 8004970:	e050      	b.n	8004a14 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02a      	beq.n	80049d0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	431a      	orrs	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	431a      	orrs	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	431a      	orrs	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	049b      	lsls	r3, r3, #18
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	431a      	orrs	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	ea42 0103 	orr.w	r1, r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049c2:	d027      	beq.n	8004a14 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	6852      	ldr	r2, [r2, #4]
 80049cc:	619a      	str	r2, [r3, #24]
}
 80049ce:	e021      	b.n	8004a14 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01d      	beq.n	8004a14 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	049b      	lsls	r3, r3, #18
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	ea42 0103 	orr.w	r1, r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	615a      	str	r2, [r3, #20]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e291      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8087 	beq.w	8004b52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a44:	4b96      	ldr	r3, [pc, #600]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d00c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a50:	4b93      	ldr	r3, [pc, #588]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d112      	bne.n	8004a82 <HAL_RCC_OscConfig+0x62>
 8004a5c:	4b90      	ldr	r3, [pc, #576]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x130>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d168      	bne.n	8004b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e26b      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x7a>
 8004a8c:	4b84      	ldr	r3, [pc, #528]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a83      	ldr	r2, [pc, #524]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e02e      	b.n	8004af8 <HAL_RCC_OscConfig+0xd8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x9c>
 8004aa2:	4b7f      	ldr	r3, [pc, #508]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7e      	ldr	r2, [pc, #504]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b7c      	ldr	r3, [pc, #496]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_RCC_OscConfig+0xd8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b73      	ldr	r3, [pc, #460]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a72      	ldr	r2, [pc, #456]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0xd8>
 8004ae0:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6e      	ldr	r2, [pc, #440]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b6c      	ldr	r3, [pc, #432]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6b      	ldr	r2, [pc, #428]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fd38 	bl	8002574 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fd fd34 	bl	8002574 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e21f      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xe8>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fd24 	bl	8002574 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fd fd20 	bl	8002574 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e20b      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	4b57      	ldr	r3, [pc, #348]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x110>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d069      	beq.n	8004c32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b5e:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d11c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x190>
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x17a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d001      	beq.n	8004b9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e1df      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	493d      	ldr	r1, [pc, #244]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	e040      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d023      	beq.n	8004c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fcd6 	bl	8002574 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fd fcd2 	bl	8002574 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1bd      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bea:	4b2d      	ldr	r3, [pc, #180]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4929      	ldr	r1, [pc, #164]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
 8004bfe:	e018      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fcb2 	bl	8002574 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd fcae 	bl	8002574 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e199      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d038      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d019      	beq.n	8004c7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c52:	f7fd fc8f 	bl	8002574 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5a:	f7fd fc8b 	bl	8002574 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e176      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x23a>
 8004c78:	e01a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_RCC_OscConfig+0x280>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fd fc75 	bl	8002574 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fd fc71 	bl	8002574 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d903      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e15c      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
 8004ca0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	4b91      	ldr	r3, [pc, #580]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a4 	beq.w	8004e06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbe:	4b8b      	ldr	r3, [pc, #556]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	4b88      	ldr	r3, [pc, #544]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a87      	ldr	r2, [pc, #540]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b85      	ldr	r3, [pc, #532]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce6:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <HAL_RCC_OscConfig+0x4d0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cf2:	4b7f      	ldr	r3, [pc, #508]	; (8004ef0 <HAL_RCC_OscConfig+0x4d0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7e      	ldr	r2, [pc, #504]	; (8004ef0 <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd fc39 	bl	8002574 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd fc35 	bl	8002574 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b64      	cmp	r3, #100	; 0x64
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e120      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d18:	4b75      	ldr	r3, [pc, #468]	; (8004ef0 <HAL_RCC_OscConfig+0x4d0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x31a>
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a6e      	ldr	r2, [pc, #440]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e02d      	b.n	8004d96 <HAL_RCC_OscConfig+0x376>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x33c>
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	4b67      	ldr	r3, [pc, #412]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a66      	ldr	r2, [pc, #408]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e01c      	b.n	8004d96 <HAL_RCC_OscConfig+0x376>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCC_OscConfig+0x35e>
 8004d64:	4b61      	ldr	r3, [pc, #388]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a60      	ldr	r2, [pc, #384]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d6a:	f043 0304 	orr.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	4b5e      	ldr	r3, [pc, #376]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a5d      	ldr	r2, [pc, #372]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	e00b      	b.n	8004d96 <HAL_RCC_OscConfig+0x376>
 8004d7e:	4b5b      	ldr	r3, [pc, #364]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a5a      	ldr	r2, [pc, #360]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a57      	ldr	r2, [pc, #348]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d015      	beq.n	8004dca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fbe9 	bl	8002574 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd fbe5 	bl	8002574 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0ce      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCC_OscConfig+0x386>
 8004dc8:	e014      	b.n	8004df4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fd fbd3 	bl	8002574 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd fbcf 	bl	8002574 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0b8      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ee      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a3b      	ldr	r2, [pc, #236]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80a4 	beq.w	8004f58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e10:	4b36      	ldr	r3, [pc, #216]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d06b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d149      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fba0 	bl	8002574 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd fb9c 	bl	8002574 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e087      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fd fb70 	bl	8002574 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fb6c 	bl	8002574 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e057      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x478>
 8004eb6:	e04f      	b.n	8004f58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fb56 	bl	8002574 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fd fb52 	bl	8002574 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e03d      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x4ac>
 8004eea:	e035      	b.n	8004f58 <HAL_RCC_OscConfig+0x538>
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCC_OscConfig+0x544>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d028      	beq.n	8004f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d121      	bne.n	8004f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d11a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800

08004f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0d0      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d910      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b67      	ldr	r3, [pc, #412]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 020f 	bic.w	r2, r3, #15
 8004f96:	4965      	ldr	r1, [pc, #404]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0b8      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc8:	4b59      	ldr	r3, [pc, #356]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a58      	ldr	r2, [pc, #352]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe0:	4b53      	ldr	r3, [pc, #332]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a52      	ldr	r2, [pc, #328]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fec:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	494d      	ldr	r1, [pc, #308]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d040      	beq.n	800508c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b47      	ldr	r3, [pc, #284]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d115      	bne.n	800504a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e07f      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e073      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503a:	4b3d      	ldr	r3, [pc, #244]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e06b      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504a:	4b39      	ldr	r3, [pc, #228]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 0203 	bic.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4936      	ldr	r1, [pc, #216]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8005058:	4313      	orrs	r3, r2
 800505a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505c:	f7fd fa8a 	bl	8002574 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	e00a      	b.n	800507a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005064:	f7fd fa86 	bl	8002574 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e053      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	4b2d      	ldr	r3, [pc, #180]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 020c 	and.w	r2, r3, #12
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	429a      	cmp	r2, r3
 800508a:	d1eb      	bne.n	8005064 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d210      	bcs.n	80050bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 020f 	bic.w	r2, r3, #15
 80050a2:	4922      	ldr	r1, [pc, #136]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e032      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4916      	ldr	r1, [pc, #88]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	490e      	ldr	r1, [pc, #56]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050fa:	f000 f821 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	490a      	ldr	r1, [pc, #40]	; (8005134 <HAL_RCC_ClockConfig+0x1cc>)
 800510c:	5ccb      	ldrb	r3, [r1, r3]
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <HAL_RCC_ClockConfig+0x1d0>)
 8005114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_ClockConfig+0x1d4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd f9e6 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023c00 	.word	0x40023c00
 8005130:	40023800 	.word	0x40023800
 8005134:	08006f7c 	.word	0x08006f7c
 8005138:	20000000 	.word	0x20000000
 800513c:	20000004 	.word	0x20000004

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005144:	b094      	sub	sp, #80	; 0x50
 8005146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	647b      	str	r3, [r7, #68]	; 0x44
 800514c:	2300      	movs	r3, #0
 800514e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005150:	2300      	movs	r3, #0
 8005152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005158:	4b79      	ldr	r3, [pc, #484]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b08      	cmp	r3, #8
 8005162:	d00d      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x40>
 8005164:	2b08      	cmp	r3, #8
 8005166:	f200 80e1 	bhi.w	800532c <HAL_RCC_GetSysClockFreq+0x1ec>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x34>
 800516e:	2b04      	cmp	r3, #4
 8005170:	d003      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x3a>
 8005172:	e0db      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b73      	ldr	r3, [pc, #460]	; (8005344 <HAL_RCC_GetSysClockFreq+0x204>)
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005178:	e0db      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <HAL_RCC_GetSysClockFreq+0x204>)
 800517c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800517e:	e0d8      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005180:	4b6f      	ldr	r3, [pc, #444]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800518a:	4b6d      	ldr	r3, [pc, #436]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d063      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005196:	4b6a      	ldr	r3, [pc, #424]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	2200      	movs	r2, #0
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a8:	633b      	str	r3, [r7, #48]	; 0x30
 80051aa:	2300      	movs	r3, #0
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	f04f 0000 	mov.w	r0, #0
 80051ba:	f04f 0100 	mov.w	r1, #0
 80051be:	0159      	lsls	r1, r3, #5
 80051c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c4:	0150      	lsls	r0, r2, #5
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4621      	mov	r1, r4
 80051cc:	1a51      	subs	r1, r2, r1
 80051ce:	6139      	str	r1, [r7, #16]
 80051d0:	4629      	mov	r1, r5
 80051d2:	eb63 0301 	sbc.w	r3, r3, r1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e4:	4659      	mov	r1, fp
 80051e6:	018b      	lsls	r3, r1, #6
 80051e8:	4651      	mov	r1, sl
 80051ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ee:	4651      	mov	r1, sl
 80051f0:	018a      	lsls	r2, r1, #6
 80051f2:	4651      	mov	r1, sl
 80051f4:	ebb2 0801 	subs.w	r8, r2, r1
 80051f8:	4659      	mov	r1, fp
 80051fa:	eb63 0901 	sbc.w	r9, r3, r1
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800520a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800520e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005212:	4690      	mov	r8, r2
 8005214:	4699      	mov	r9, r3
 8005216:	4623      	mov	r3, r4
 8005218:	eb18 0303 	adds.w	r3, r8, r3
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	462b      	mov	r3, r5
 8005220:	eb49 0303 	adc.w	r3, r9, r3
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005232:	4629      	mov	r1, r5
 8005234:	028b      	lsls	r3, r1, #10
 8005236:	4621      	mov	r1, r4
 8005238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800523c:	4621      	mov	r1, r4
 800523e:	028a      	lsls	r2, r1, #10
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	2200      	movs	r2, #0
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
 800524a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800524c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005250:	f7fa ffe2 	bl	8000218 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4613      	mov	r3, r2
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525c:	e058      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525e:	4b38      	ldr	r3, [pc, #224]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	099b      	lsrs	r3, r3, #6
 8005264:	2200      	movs	r2, #0
 8005266:	4618      	mov	r0, r3
 8005268:	4611      	mov	r1, r2
 800526a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	f04f 0000 	mov.w	r0, #0
 8005280:	f04f 0100 	mov.w	r1, #0
 8005284:	0159      	lsls	r1, r3, #5
 8005286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528a:	0150      	lsls	r0, r2, #5
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4641      	mov	r1, r8
 8005292:	ebb2 0a01 	subs.w	sl, r2, r1
 8005296:	4649      	mov	r1, r9
 8005298:	eb63 0b01 	sbc.w	fp, r3, r1
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052b0:	ebb2 040a 	subs.w	r4, r2, sl
 80052b4:	eb63 050b 	sbc.w	r5, r3, fp
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	00eb      	lsls	r3, r5, #3
 80052c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c6:	00e2      	lsls	r2, r4, #3
 80052c8:	4614      	mov	r4, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	18e3      	adds	r3, r4, r3
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	464b      	mov	r3, r9
 80052d4:	eb45 0303 	adc.w	r3, r5, r3
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e6:	4629      	mov	r1, r5
 80052e8:	028b      	lsls	r3, r1, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f0:	4621      	mov	r1, r4
 80052f2:	028a      	lsls	r2, r1, #10
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	2200      	movs	r2, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	61fa      	str	r2, [r7, #28]
 8005300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005304:	f7fa ff88 	bl	8000218 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_GetSysClockFreq+0x200>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_GetSysClockFreq+0x204>)
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005334:	4618      	mov	r0, r3
 8005336:	3750      	adds	r7, #80	; 0x50
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400

08005348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	08006f8c 	.word	0x08006f8c

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	08006f8c 	.word	0x08006f8c

080053b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d8:	4b69      	ldr	r3, [pc, #420]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a68      	ldr	r2, [pc, #416]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053e2:	6093      	str	r3, [r2, #8]
 80053e4:	4b66      	ldr	r3, [pc, #408]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4964      	ldr	r1, [pc, #400]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d017      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800540a:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	4959      	ldr	r1, [pc, #356]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005428:	d101      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005436:	2301      	movs	r3, #1
 8005438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d017      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005446:	4b4e      	ldr	r3, [pc, #312]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	494a      	ldr	r1, [pc, #296]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005464:	d101      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005482:	2301      	movs	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 808b 	beq.w	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	4a39      	ldr	r2, [pc, #228]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6413      	str	r3, [r2, #64]	; 0x40
 80054a0:	4b37      	ldr	r3, [pc, #220]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054ac:	4b35      	ldr	r3, [pc, #212]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a34      	ldr	r2, [pc, #208]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b8:	f7fd f85c 	bl	8002574 <HAL_GetTick>
 80054bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fd f858 	bl	8002574 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	; 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e357      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d035      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d02e      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005506:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800551e:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005524:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d114      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fd f820 	bl	8002574 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fd f81c 	bl	8002574 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e319      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d111      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005576:	400b      	ands	r3, r1
 8005578:	4901      	ldr	r1, [pc, #4]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
 800557e:	e00b      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	0ffffcff 	.word	0x0ffffcff
 800558c:	4baa      	ldr	r3, [pc, #680]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4aa9      	ldr	r2, [pc, #676]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005596:	6093      	str	r3, [r2, #8]
 8005598:	4ba7      	ldr	r3, [pc, #668]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	49a4      	ldr	r1, [pc, #656]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055b6:	4ba0      	ldr	r3, [pc, #640]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055bc:	4a9e      	ldr	r2, [pc, #632]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055c6:	4b9c      	ldr	r3, [pc, #624]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	4999      	ldr	r1, [pc, #612]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e4:	4b94      	ldr	r3, [pc, #592]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f2:	4991      	ldr	r1, [pc, #580]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005606:	4b8c      	ldr	r3, [pc, #560]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005614:	4988      	ldr	r1, [pc, #544]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005628:	4b83      	ldr	r3, [pc, #524]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005636:	4980      	ldr	r1, [pc, #512]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800564a:	4b7b      	ldr	r3, [pc, #492]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4977      	ldr	r1, [pc, #476]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800566c:	4b72      	ldr	r3, [pc, #456]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f023 0203 	bic.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	496f      	ldr	r1, [pc, #444]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800568e:	4b6a      	ldr	r3, [pc, #424]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f023 020c 	bic.w	r2, r3, #12
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569c:	4966      	ldr	r1, [pc, #408]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b0:	4b61      	ldr	r3, [pc, #388]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	495e      	ldr	r1, [pc, #376]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d2:	4b59      	ldr	r3, [pc, #356]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	4955      	ldr	r1, [pc, #340]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f4:	4b50      	ldr	r3, [pc, #320]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	494d      	ldr	r1, [pc, #308]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005716:	4b48      	ldr	r3, [pc, #288]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	4944      	ldr	r1, [pc, #272]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	493c      	ldr	r1, [pc, #240]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800575a:	4b37      	ldr	r3, [pc, #220]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	4933      	ldr	r1, [pc, #204]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800577c:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578a:	492b      	ldr	r1, [pc, #172]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800579e:	4b26      	ldr	r3, [pc, #152]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	4922      	ldr	r1, [pc, #136]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057bc:	d101      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	4912      	ldr	r1, [pc, #72]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005810:	4909      	ldr	r1, [pc, #36]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d006      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80d9 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800582c:	4b02      	ldr	r3, [pc, #8]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a01      	ldr	r2, [pc, #4]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005838:	40023800 	.word	0x40023800
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fc fe99 	bl	8002574 <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005846:	f7fc fe95 	bl	8002574 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e194      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005858:	4b6c      	ldr	r3, [pc, #432]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d021      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11d      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005878:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800587a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587e:	0c1b      	lsrs	r3, r3, #16
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005886:	4b61      	ldr	r3, [pc, #388]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588c:	0e1b      	lsrs	r3, r3, #24
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	019a      	lsls	r2, r3, #6
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	431a      	orrs	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	071b      	lsls	r3, r3, #28
 80058ac:	4957      	ldr	r1, [pc, #348]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02e      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058de:	d129      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058e0:	4b4a      	ldr	r3, [pc, #296]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058ee:	4b47      	ldr	r3, [pc, #284]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f4:	0f1b      	lsrs	r3, r3, #28
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	019a      	lsls	r2, r3, #6
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	061b      	lsls	r3, r3, #24
 800590e:	431a      	orrs	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	071b      	lsls	r3, r3, #28
 8005914:	493d      	ldr	r1, [pc, #244]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800591c:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	f023 021f 	bic.w	r2, r3, #31
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	3b01      	subs	r3, #1
 800592c:	4937      	ldr	r1, [pc, #220]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01d      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005946:	0e1b      	lsrs	r3, r3, #24
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800594e:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005954:	0f1b      	lsrs	r3, r3, #28
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	019a      	lsls	r2, r3, #6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	431a      	orrs	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	431a      	orrs	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	4925      	ldr	r1, [pc, #148]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d011      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	019a      	lsls	r2, r3, #6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	061b      	lsls	r3, r3, #24
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	071b      	lsls	r3, r3, #28
 80059a4:	4919      	ldr	r1, [pc, #100]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b8:	f7fc fddc 	bl	8002574 <HAL_GetTick>
 80059bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059c0:	f7fc fdd8 	bl	8002574 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0d7      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 80cd 	bne.w	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f2:	f7fc fdbf 	bl	8002574 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059fa:	f7fc fdbb 	bl	8002574 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b64      	cmp	r3, #100	; 0x64
 8005a06:	d903      	bls.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0ba      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a10:	4b5e      	ldr	r3, [pc, #376]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1c:	d0ed      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02e      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d12a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a46:	4b51      	ldr	r3, [pc, #324]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a54:	4b4d      	ldr	r3, [pc, #308]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	0f1b      	lsrs	r3, r3, #28
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	019a      	lsls	r2, r3, #6
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	071b      	lsls	r3, r3, #28
 8005a7a:	4944      	ldr	r1, [pc, #272]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a82:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	3b01      	subs	r3, #1
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	493d      	ldr	r1, [pc, #244]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d022      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d11d      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ac0:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	0f1b      	lsrs	r3, r3, #28
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	019a      	lsls	r2, r3, #6
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	061b      	lsls	r3, r3, #24
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	071b      	lsls	r3, r3, #28
 8005ae6:	4929      	ldr	r1, [pc, #164]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d028      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	0e1b      	lsrs	r3, r3, #24
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	019a      	lsls	r2, r3, #6
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	431a      	orrs	r2, r3
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	071b      	lsls	r3, r3, #28
 8005b2e:	4917      	ldr	r1, [pc, #92]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4911      	ldr	r1, [pc, #68]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0e      	ldr	r2, [pc, #56]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b58:	f7fc fd0c 	bl	8002574 <HAL_GetTick>
 8005b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b60:	f7fc fd08 	bl	8002574 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b64      	cmp	r3, #100	; 0x64
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e007      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7e:	d1ef      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800

08005b90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e025      	b.n	8005bf0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fc fc07 	bl	80023cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f001 f893 	bl	8006cfc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	f001 f8e7 	bl	8006db4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c0a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d101      	bne.n	8005c16 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e021      	b.n	8005c5a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d002      	beq.n	8005c22 <HAL_SDRAM_SendCommand+0x2a>
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d118      	bne.n	8005c54 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f928 	bl	8006e88 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d104      	bne.n	8005c4a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2205      	movs	r2, #5
 8005c44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c48:	e006      	b.n	8005c58 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c52:	e001      	b.n	8005c58 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d101      	bne.n	8005c7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e016      	b.n	8005caa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10f      	bne.n	8005ca8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 f91a 	bl	8006ed0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e09d      	b.n	8005e00 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d108      	bne.n	8005cde <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd4:	d009      	beq.n	8005cea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	61da      	str	r2, [r3, #28]
 8005cdc:	e005      	b.n	8005cea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fc fa2d 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d2a:	d902      	bls.n	8005d32 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e002      	b.n	8005d38 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d40:	d007      	beq.n	8005d52 <HAL_SPI_Init+0xa0>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	f003 0204 	and.w	r2, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dce:	ea42 0103 	orr.w	r1, r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_SPI_Transmit+0x22>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e15f      	b.n	80060ea <HAL_SPI_Transmit+0x2e2>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e32:	f7fc fb9f 	bl	8002574 <HAL_GetTick>
 8005e36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d002      	beq.n	8005e4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e4c:	e148      	b.n	80060e0 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_SPI_Transmit+0x52>
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e5e:	e13f      	b.n	80060e0 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2203      	movs	r2, #3
 8005e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d10f      	bne.n	8005ecc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d007      	beq.n	8005eea <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef2:	d94f      	bls.n	8005f94 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Transmit+0xfa>
 8005efc:	8afb      	ldrh	r3, [r7, #22]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d142      	bne.n	8005f88 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	1c9a      	adds	r2, r3, #2
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f26:	e02f      	b.n	8005f88 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d112      	bne.n	8005f5c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f5a:	e015      	b.n	8005f88 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5c:	f7fc fb0a 	bl	8002574 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d803      	bhi.n	8005f74 <HAL_SPI_Transmit+0x16c>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Transmit+0x172>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005f86:	e0ab      	b.n	80060e0 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ca      	bne.n	8005f28 <HAL_SPI_Transmit+0x120>
 8005f92:	e080      	b.n	8006096 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_Transmit+0x19a>
 8005f9c:	8afb      	ldrh	r3, [r7, #22]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d174      	bne.n	800608c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d912      	bls.n	8005fd2 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b02      	subs	r3, #2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd0:	e05c      	b.n	800608c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ff8:	e048      	b.n	800608c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d12b      	bne.n	8006060 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d912      	bls.n	8006038 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b02      	subs	r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006036:	e029      	b.n	800608c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605e:	e015      	b.n	800608c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006060:	f7fc fa88 	bl	8002574 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d803      	bhi.n	8006078 <HAL_SPI_Transmit+0x270>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d102      	bne.n	800607e <HAL_SPI_Transmit+0x276>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800608a:	e029      	b.n	80060e0 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1b1      	bne.n	8005ffa <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f948 	bl	8006330 <SPI_EndRxTxTransaction>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e003      	b.n	80060e0 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006104:	f7fc fa36 	bl	8002574 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4413      	add	r3, r2
 8006112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006114:	f7fc fa2e 	bl	8002574 <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	015b      	lsls	r3, r3, #5
 8006120:	0d1b      	lsrs	r3, r3, #20
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612a:	e054      	b.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	d050      	beq.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006134:	f7fc fa1e 	bl	8002574 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	429a      	cmp	r2, r3
 8006142:	d902      	bls.n	800614a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13d      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006162:	d111      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616c:	d004      	beq.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006176:	d107      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006190:	d10f      	bne.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e017      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d19b      	bne.n	800612c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000000 	.word	0x20000000

08006204 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006216:	f7fc f9ad 	bl	8002574 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	4413      	add	r3, r2
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006226:	f7fc f9a5 	bl	8002574 <HAL_GetTick>
 800622a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006234:	4b3d      	ldr	r3, [pc, #244]	; (800632c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00da      	lsls	r2, r3, #3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	0d1b      	lsrs	r3, r3, #20
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800624c:	e060      	b.n	8006310 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006254:	d107      	bne.n	8006266 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006264:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d050      	beq.n	8006310 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800626e:	f7fc f981 	bl	8002574 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	429a      	cmp	r2, r3
 800627c:	d902      	bls.n	8006284 <SPI_WaitFifoStateUntilTimeout+0x80>
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d13d      	bne.n	8006300 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006292:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629c:	d111      	bne.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d004      	beq.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d107      	bne.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	d10f      	bne.n	80062ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e010      	b.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3b01      	subs	r3, #1
 800630e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d196      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000000 	.word	0x20000000

08006330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ff5b 	bl	8006204 <SPI_WaitFifoStateUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e046      	b.n	80063f2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <SPI_EndRxTxTransaction+0xcc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a25      	ldr	r2, [pc, #148]	; (8006400 <SPI_EndRxTxTransaction+0xd0>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	0d5b      	lsrs	r3, r3, #21
 8006370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006382:	d112      	bne.n	80063aa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff feb0 	bl	80060f4 <SPI_WaitFlagStateUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e023      	b.n	80063f2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	d0f2      	beq.n	80063aa <SPI_EndRxTxTransaction+0x7a>
 80063c4:	e000      	b.n	80063c8 <SPI_EndRxTxTransaction+0x98>
        break;
 80063c6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff15 	bl	8006204 <SPI_WaitFifoStateUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e000      	b.n	80063f2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000000 	.word	0x20000000
 8006400:	165e9f81 	.word	0x165e9f81

08006404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e040      	b.n	8006498 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fb fee0 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa8c 	bl	8006968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f825 	bl	80064a0 <UART_SetConfig>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e01b      	b.n	8006498 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800646e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800647e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fb0b 	bl	8006aac <UART_CheckIdleState>
 8006496:	4603      	mov	r3, r0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4ba6      	ldr	r3, [pc, #664]	; (8006764 <UART_SetConfig+0x2c4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a94      	ldr	r2, [pc, #592]	; (8006768 <UART_SetConfig+0x2c8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d120      	bne.n	800655e <UART_SetConfig+0xbe>
 800651c:	4b93      	ldr	r3, [pc, #588]	; (800676c <UART_SetConfig+0x2cc>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d816      	bhi.n	8006558 <UART_SetConfig+0xb8>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x90>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006541 	.word	0x08006541
 8006534:	0800654d 	.word	0x0800654d
 8006538:	08006547 	.word	0x08006547
 800653c:	08006553 	.word	0x08006553
 8006540:	2301      	movs	r3, #1
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e150      	b.n	80067e8 <UART_SetConfig+0x348>
 8006546:	2302      	movs	r3, #2
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e14d      	b.n	80067e8 <UART_SetConfig+0x348>
 800654c:	2304      	movs	r3, #4
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e14a      	b.n	80067e8 <UART_SetConfig+0x348>
 8006552:	2308      	movs	r3, #8
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e147      	b.n	80067e8 <UART_SetConfig+0x348>
 8006558:	2310      	movs	r3, #16
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e144      	b.n	80067e8 <UART_SetConfig+0x348>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a83      	ldr	r2, [pc, #524]	; (8006770 <UART_SetConfig+0x2d0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d132      	bne.n	80065ce <UART_SetConfig+0x12e>
 8006568:	4b80      	ldr	r3, [pc, #512]	; (800676c <UART_SetConfig+0x2cc>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	f003 030c 	and.w	r3, r3, #12
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d828      	bhi.n	80065c8 <UART_SetConfig+0x128>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0xdc>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065b7 	.word	0x080065b7
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065c3 	.word	0x080065c3
 80065b0:	2300      	movs	r3, #0
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e118      	b.n	80067e8 <UART_SetConfig+0x348>
 80065b6:	2302      	movs	r3, #2
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e115      	b.n	80067e8 <UART_SetConfig+0x348>
 80065bc:	2304      	movs	r3, #4
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e112      	b.n	80067e8 <UART_SetConfig+0x348>
 80065c2:	2308      	movs	r3, #8
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e10f      	b.n	80067e8 <UART_SetConfig+0x348>
 80065c8:	2310      	movs	r3, #16
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e10c      	b.n	80067e8 <UART_SetConfig+0x348>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a68      	ldr	r2, [pc, #416]	; (8006774 <UART_SetConfig+0x2d4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d120      	bne.n	800661a <UART_SetConfig+0x17a>
 80065d8:	4b64      	ldr	r3, [pc, #400]	; (800676c <UART_SetConfig+0x2cc>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d013      	beq.n	800660e <UART_SetConfig+0x16e>
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	d814      	bhi.n	8006614 <UART_SetConfig+0x174>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d009      	beq.n	8006602 <UART_SetConfig+0x162>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d810      	bhi.n	8006614 <UART_SetConfig+0x174>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <UART_SetConfig+0x15c>
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d006      	beq.n	8006608 <UART_SetConfig+0x168>
 80065fa:	e00b      	b.n	8006614 <UART_SetConfig+0x174>
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e0f2      	b.n	80067e8 <UART_SetConfig+0x348>
 8006602:	2302      	movs	r3, #2
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e0ef      	b.n	80067e8 <UART_SetConfig+0x348>
 8006608:	2304      	movs	r3, #4
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e0ec      	b.n	80067e8 <UART_SetConfig+0x348>
 800660e:	2308      	movs	r3, #8
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e0e9      	b.n	80067e8 <UART_SetConfig+0x348>
 8006614:	2310      	movs	r3, #16
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e0e6      	b.n	80067e8 <UART_SetConfig+0x348>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a56      	ldr	r2, [pc, #344]	; (8006778 <UART_SetConfig+0x2d8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d120      	bne.n	8006666 <UART_SetConfig+0x1c6>
 8006624:	4b51      	ldr	r3, [pc, #324]	; (800676c <UART_SetConfig+0x2cc>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800662e:	2bc0      	cmp	r3, #192	; 0xc0
 8006630:	d013      	beq.n	800665a <UART_SetConfig+0x1ba>
 8006632:	2bc0      	cmp	r3, #192	; 0xc0
 8006634:	d814      	bhi.n	8006660 <UART_SetConfig+0x1c0>
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d009      	beq.n	800664e <UART_SetConfig+0x1ae>
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d810      	bhi.n	8006660 <UART_SetConfig+0x1c0>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <UART_SetConfig+0x1a8>
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d006      	beq.n	8006654 <UART_SetConfig+0x1b4>
 8006646:	e00b      	b.n	8006660 <UART_SetConfig+0x1c0>
 8006648:	2300      	movs	r3, #0
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0cc      	b.n	80067e8 <UART_SetConfig+0x348>
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e0c9      	b.n	80067e8 <UART_SetConfig+0x348>
 8006654:	2304      	movs	r3, #4
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0c6      	b.n	80067e8 <UART_SetConfig+0x348>
 800665a:	2308      	movs	r3, #8
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e0c3      	b.n	80067e8 <UART_SetConfig+0x348>
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e0c0      	b.n	80067e8 <UART_SetConfig+0x348>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a44      	ldr	r2, [pc, #272]	; (800677c <UART_SetConfig+0x2dc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0x21c>
 8006670:	4b3e      	ldr	r3, [pc, #248]	; (800676c <UART_SetConfig+0x2cc>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d017      	beq.n	80066b0 <UART_SetConfig+0x210>
 8006680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006684:	d817      	bhi.n	80066b6 <UART_SetConfig+0x216>
 8006686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668a:	d00b      	beq.n	80066a4 <UART_SetConfig+0x204>
 800668c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006690:	d811      	bhi.n	80066b6 <UART_SetConfig+0x216>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <UART_SetConfig+0x1fe>
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d006      	beq.n	80066aa <UART_SetConfig+0x20a>
 800669c:	e00b      	b.n	80066b6 <UART_SetConfig+0x216>
 800669e:	2300      	movs	r3, #0
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e0a1      	b.n	80067e8 <UART_SetConfig+0x348>
 80066a4:	2302      	movs	r3, #2
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e09e      	b.n	80067e8 <UART_SetConfig+0x348>
 80066aa:	2304      	movs	r3, #4
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e09b      	b.n	80067e8 <UART_SetConfig+0x348>
 80066b0:	2308      	movs	r3, #8
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e098      	b.n	80067e8 <UART_SetConfig+0x348>
 80066b6:	2310      	movs	r3, #16
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e095      	b.n	80067e8 <UART_SetConfig+0x348>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <UART_SetConfig+0x2e0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d125      	bne.n	8006712 <UART_SetConfig+0x272>
 80066c6:	4b29      	ldr	r3, [pc, #164]	; (800676c <UART_SetConfig+0x2cc>)
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d4:	d017      	beq.n	8006706 <UART_SetConfig+0x266>
 80066d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066da:	d817      	bhi.n	800670c <UART_SetConfig+0x26c>
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	d00b      	beq.n	80066fa <UART_SetConfig+0x25a>
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d811      	bhi.n	800670c <UART_SetConfig+0x26c>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <UART_SetConfig+0x254>
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d006      	beq.n	8006700 <UART_SetConfig+0x260>
 80066f2:	e00b      	b.n	800670c <UART_SetConfig+0x26c>
 80066f4:	2301      	movs	r3, #1
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e076      	b.n	80067e8 <UART_SetConfig+0x348>
 80066fa:	2302      	movs	r3, #2
 80066fc:	77fb      	strb	r3, [r7, #31]
 80066fe:	e073      	b.n	80067e8 <UART_SetConfig+0x348>
 8006700:	2304      	movs	r3, #4
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e070      	b.n	80067e8 <UART_SetConfig+0x348>
 8006706:	2308      	movs	r3, #8
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e06d      	b.n	80067e8 <UART_SetConfig+0x348>
 800670c:	2310      	movs	r3, #16
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e06a      	b.n	80067e8 <UART_SetConfig+0x348>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <UART_SetConfig+0x2e4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d138      	bne.n	800678e <UART_SetConfig+0x2ee>
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <UART_SetConfig+0x2cc>)
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006722:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800672a:	d017      	beq.n	800675c <UART_SetConfig+0x2bc>
 800672c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006730:	d82a      	bhi.n	8006788 <UART_SetConfig+0x2e8>
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d00b      	beq.n	8006750 <UART_SetConfig+0x2b0>
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673c:	d824      	bhi.n	8006788 <UART_SetConfig+0x2e8>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <UART_SetConfig+0x2aa>
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006746:	d006      	beq.n	8006756 <UART_SetConfig+0x2b6>
 8006748:	e01e      	b.n	8006788 <UART_SetConfig+0x2e8>
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e04b      	b.n	80067e8 <UART_SetConfig+0x348>
 8006750:	2302      	movs	r3, #2
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e048      	b.n	80067e8 <UART_SetConfig+0x348>
 8006756:	2304      	movs	r3, #4
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e045      	b.n	80067e8 <UART_SetConfig+0x348>
 800675c:	2308      	movs	r3, #8
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e042      	b.n	80067e8 <UART_SetConfig+0x348>
 8006762:	bf00      	nop
 8006764:	efff69f3 	.word	0xefff69f3
 8006768:	40011000 	.word	0x40011000
 800676c:	40023800 	.word	0x40023800
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	40004c00 	.word	0x40004c00
 800677c:	40005000 	.word	0x40005000
 8006780:	40011400 	.word	0x40011400
 8006784:	40007800 	.word	0x40007800
 8006788:	2310      	movs	r3, #16
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e02c      	b.n	80067e8 <UART_SetConfig+0x348>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a72      	ldr	r2, [pc, #456]	; (800695c <UART_SetConfig+0x4bc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d125      	bne.n	80067e4 <UART_SetConfig+0x344>
 8006798:	4b71      	ldr	r3, [pc, #452]	; (8006960 <UART_SetConfig+0x4c0>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067a6:	d017      	beq.n	80067d8 <UART_SetConfig+0x338>
 80067a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ac:	d817      	bhi.n	80067de <UART_SetConfig+0x33e>
 80067ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b2:	d00b      	beq.n	80067cc <UART_SetConfig+0x32c>
 80067b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b8:	d811      	bhi.n	80067de <UART_SetConfig+0x33e>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <UART_SetConfig+0x326>
 80067be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c2:	d006      	beq.n	80067d2 <UART_SetConfig+0x332>
 80067c4:	e00b      	b.n	80067de <UART_SetConfig+0x33e>
 80067c6:	2300      	movs	r3, #0
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e00d      	b.n	80067e8 <UART_SetConfig+0x348>
 80067cc:	2302      	movs	r3, #2
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e00a      	b.n	80067e8 <UART_SetConfig+0x348>
 80067d2:	2304      	movs	r3, #4
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e007      	b.n	80067e8 <UART_SetConfig+0x348>
 80067d8:	2308      	movs	r3, #8
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e004      	b.n	80067e8 <UART_SetConfig+0x348>
 80067de:	2310      	movs	r3, #16
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e001      	b.n	80067e8 <UART_SetConfig+0x348>
 80067e4:	2310      	movs	r3, #16
 80067e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	d15b      	bne.n	80068aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067f2:	7ffb      	ldrb	r3, [r7, #31]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d828      	bhi.n	800684a <UART_SetConfig+0x3aa>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x360>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006825 	.word	0x08006825
 8006804:	0800682d 	.word	0x0800682d
 8006808:	08006835 	.word	0x08006835
 800680c:	0800684b 	.word	0x0800684b
 8006810:	0800683b 	.word	0x0800683b
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800684b 	.word	0x0800684b
 800681c:	0800684b 	.word	0x0800684b
 8006820:	08006843 	.word	0x08006843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006824:	f7fe fd9c 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006828:	61b8      	str	r0, [r7, #24]
        break;
 800682a:	e013      	b.n	8006854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682c:	f7fe fdac 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8006830:	61b8      	str	r0, [r7, #24]
        break;
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006834:	4b4b      	ldr	r3, [pc, #300]	; (8006964 <UART_SetConfig+0x4c4>)
 8006836:	61bb      	str	r3, [r7, #24]
        break;
 8006838:	e00c      	b.n	8006854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683a:	f7fe fc81 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800683e:	61b8      	str	r0, [r7, #24]
        break;
 8006840:	e008      	b.n	8006854 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e004      	b.n	8006854 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	77bb      	strb	r3, [r7, #30]
        break;
 8006852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d074      	beq.n	8006944 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	005a      	lsls	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d916      	bls.n	80068a4 <UART_SetConfig+0x404>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687c:	d212      	bcs.n	80068a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f023 030f 	bic.w	r3, r3, #15
 8006886:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	b29a      	uxth	r2, r3
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	4313      	orrs	r3, r2
 8006898:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	89fa      	ldrh	r2, [r7, #14]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e04f      	b.n	8006944 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	77bb      	strb	r3, [r7, #30]
 80068a8:	e04c      	b.n	8006944 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d828      	bhi.n	8006902 <UART_SetConfig+0x462>
 80068b0:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <UART_SetConfig+0x418>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068e5 	.word	0x080068e5
 80068c0:	080068ed 	.word	0x080068ed
 80068c4:	08006903 	.word	0x08006903
 80068c8:	080068f3 	.word	0x080068f3
 80068cc:	08006903 	.word	0x08006903
 80068d0:	08006903 	.word	0x08006903
 80068d4:	08006903 	.word	0x08006903
 80068d8:	080068fb 	.word	0x080068fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7fe fd40 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80068e0:	61b8      	str	r0, [r7, #24]
        break;
 80068e2:	e013      	b.n	800690c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e4:	f7fe fd50 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80068e8:	61b8      	str	r0, [r7, #24]
        break;
 80068ea:	e00f      	b.n	800690c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <UART_SetConfig+0x4c4>)
 80068ee:	61bb      	str	r3, [r7, #24]
        break;
 80068f0:	e00c      	b.n	800690c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f2:	f7fe fc25 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80068f6:	61b8      	str	r0, [r7, #24]
        break;
 80068f8:	e008      	b.n	800690c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fe:	61bb      	str	r3, [r7, #24]
        break;
 8006900:	e004      	b.n	800690c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	77bb      	strb	r3, [r7, #30]
        break;
 800690a:	bf00      	nop
    }

    if (pclk != 0U)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	085a      	lsrs	r2, r3, #1
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	441a      	add	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	d909      	bls.n	8006940 <UART_SetConfig+0x4a0>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006932:	d205      	bcs.n	8006940 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	e001      	b.n	8006944 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006950:	7fbb      	ldrb	r3, [r7, #30]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40007c00 	.word	0x40007c00
 8006960:	40023800 	.word	0x40023800
 8006964:	00f42400 	.word	0x00f42400

08006968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01a      	beq.n	8006a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a66:	d10a      	bne.n	8006a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	605a      	str	r2, [r3, #4]
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006abc:	f7fb fd5a 	bl	8002574 <HAL_GetTick>
 8006ac0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d12e      	bne.n	8006b2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f83b 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d021      	beq.n	8006b2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e011      	b.n	8006b52 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	e04f      	b.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d04b      	beq.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b74:	f7fb fcfe 	bl	8002574 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d302      	bcc.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e04e      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d037      	beq.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d034      	beq.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d031      	beq.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d110      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2208      	movs	r2, #8
 8006bbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f838 	bl	8006c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e029      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be6:	d111      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f81e 	bl	8006c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e00f      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4013      	ands	r3, r2
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d0a0      	beq.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b095      	sub	sp, #84	; 0x54
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e6      	bne.n	8006c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e5      	bne.n	8006c6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d118      	bne.n	8006cdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0310 	bic.w	r3, r3, #16
 8006cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6979      	ldr	r1, [r7, #20]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cf0:	bf00      	nop
 8006cf2:	3754      	adds	r7, #84	; 0x54
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d121      	bne.n	8006d52 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <FMC_SDRAM_Init+0xb4>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	6851      	ldr	r1, [r2, #4]
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	6892      	ldr	r2, [r2, #8]
 8006d1e:	4311      	orrs	r1, r2
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68d2      	ldr	r2, [r2, #12]
 8006d24:	4311      	orrs	r1, r2
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	6912      	ldr	r2, [r2, #16]
 8006d2a:	4311      	orrs	r1, r2
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	6952      	ldr	r2, [r2, #20]
 8006d30:	4311      	orrs	r1, r2
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	6992      	ldr	r2, [r2, #24]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	69d2      	ldr	r2, [r2, #28]
 8006d3c:	4311      	orrs	r1, r2
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	6a12      	ldr	r2, [r2, #32]
 8006d42:	4311      	orrs	r1, r2
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e026      	b.n	8006da0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	69d9      	ldr	r1, [r3, #28]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	4319      	orrs	r1, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <FMC_SDRAM_Init+0xb4>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	6851      	ldr	r1, [r2, #4]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	6892      	ldr	r2, [r2, #8]
 8006d80:	4311      	orrs	r1, r2
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	68d2      	ldr	r2, [r2, #12]
 8006d86:	4311      	orrs	r1, r2
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	6912      	ldr	r2, [r2, #16]
 8006d8c:	4311      	orrs	r1, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	6952      	ldr	r2, [r2, #20]
 8006d92:	4311      	orrs	r1, r2
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	6992      	ldr	r2, [r2, #24]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	ffff8000 	.word	0xffff8000

08006db4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d128      	bne.n	8006e18 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	1e59      	subs	r1, r3, #1
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	4319      	orrs	r1, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	4319      	orrs	r1, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	031b      	lsls	r3, r3, #12
 8006df0:	4319      	orrs	r1, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	4319      	orrs	r1, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	051b      	lsls	r3, r3, #20
 8006e04:	4319      	orrs	r1, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	061b      	lsls	r3, r3, #24
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	431a      	orrs	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	e02d      	b.n	8006e74 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <FMC_SDRAM_Timing_Init+0xd0>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68d2      	ldr	r2, [r2, #12]
 8006e24:	3a01      	subs	r2, #1
 8006e26:	0311      	lsls	r1, r2, #12
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	6952      	ldr	r2, [r2, #20]
 8006e2c:	3a01      	subs	r2, #1
 8006e2e:	0512      	lsls	r2, r2, #20
 8006e30:	430a      	orrs	r2, r1
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	1e59      	subs	r1, r3, #1
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	4319      	orrs	r1, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	4319      	orrs	r1, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	4319      	orrs	r1, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	061b      	lsls	r3, r3, #24
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	ff0f0fff 	.word	0xff0f0fff

08006e88 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <FMC_SDRAM_SendCommand+0x44>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	6811      	ldr	r1, [r2, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	6852      	ldr	r2, [r2, #4]
 8006ea4:	4311      	orrs	r1, r2
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	6892      	ldr	r2, [r2, #8]
 8006eaa:	3a01      	subs	r2, #1
 8006eac:	0152      	lsls	r2, r2, #5
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	68d2      	ldr	r2, [r2, #12]
 8006eb4:	0252      	lsls	r2, r2, #9
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	ffc00000 	.word	0xffc00000

08006ed0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	0052      	lsls	r2, r2, #1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	ffffc001 	.word	0xffffc001

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	; (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	; (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	; (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	; (8006f44 <__libc_init_array+0x44>)
 8006f14:	f000 f820 	bl	8006f58 <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	08006f9c 	.word	0x08006f9c
 8006f3c:	08006f9c 	.word	0x08006f9c
 8006f40:	08006f9c 	.word	0x08006f9c
 8006f44:	08006fa0 	.word	0x08006fa0

08006f48 <memset>:
 8006f48:	4402      	add	r2, r0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d100      	bne.n	8006f52 <memset+0xa>
 8006f50:	4770      	bx	lr
 8006f52:	f803 1b01 	strb.w	r1, [r3], #1
 8006f56:	e7f9      	b.n	8006f4c <memset+0x4>

08006f58 <_init>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr

08006f64 <_fini>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr
