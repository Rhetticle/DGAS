
DGAS Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000551c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056fc  080056fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005704  08005704  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000000c  08005718  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005718  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc43  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb2  00000000  00000000  0003bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0003eb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000403d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035ec  00000000  00000000  00041b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d35b  00000000  00000000  0004512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101536  00000000  00000000  00062487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001639bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b54  00000000  00000000  00163a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080056cc 	.word	0x080056cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080056cc 	.word	0x080056cc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 f94d 	bl	80017ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f818 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fb72 	bl	8000c00 <MX_GPIO_Init>
  MX_CAN1_Init();
 800051c:	f000 f8d2 	bl	80006c4 <MX_CAN1_Init>
  MX_FMC_Init();
 8000520:	f000 fb20 	bl	8000b64 <MX_FMC_Init>
  MX_LTDC_Init();
 8000524:	f000 f978 	bl	8000818 <MX_LTDC_Init>
  MX_SPI1_Init();
 8000528:	f000 fa54 	bl	80009d4 <MX_SPI1_Init>
  MX_I2C4_Init();
 800052c:	f000 f934 	bl	8000798 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000530:	f000 fa24 	bl	800097c <MX_QUADSPI_Init>
  MX_UART4_Init();
 8000534:	f000 fae6 	bl	8000b04 <MX_UART4_Init>
  MX_TIM2_Init();
 8000538:	f000 fa8a 	bl	8000a50 <MX_TIM2_Init>
  MX_CAN2_Init();
 800053c:	f000 f8f8 	bl	8000730 <MX_CAN2_Init>
  MX_ADC1_Init();
 8000540:	f000 f86e 	bl	8000620 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x38>
	...

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 f8b0 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a29      	ldr	r2, [pc, #164]	; (8000618 <SystemClock_Config+0xd0>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a24      	ldr	r2, [pc, #144]	; (800061c <SystemClock_Config+0xd4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005b4:	23d8      	movs	r3, #216	; 0xd8
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fc79 	bl	8002ebc <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d0:	f000 fbac 	bl	8000d2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d4:	f002 fb60 	bl	8002c98 <HAL_PWREx_EnableOverDrive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 fba5 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2107      	movs	r1, #7
 8000600:	4618      	mov	r0, r3
 8000602:	f002 feff 	bl	8003404 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800060c:	f000 fb8e 	bl	8000d2c <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0x98>)
 800063a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xa0>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000682:	f001 f8f1 	bl	8001868 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 fb4e 	bl	8000d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000690:	2302      	movs	r3, #2
 8000692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0x98>)
 80006a2:	f001 f925 	bl	80018f0 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 fb3e 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40012000 	.word	0x40012000
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_CAN1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_CAN1_Init+0x64>)
 80006e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_CAN1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_CAN1_Init+0x64>)
 8000716:	f001 fb3b 	bl	8001d90 <HAL_CAN_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 fb04 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000070 	.word	0x20000070
 800072c:	40006400 	.word	0x40006400

08000730 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_CAN2_Init+0x60>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_CAN2_Init+0x64>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 32;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_CAN2_Init+0x60>)
 800073c:	2220      	movs	r2, #32
 800073e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_CAN2_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_CAN2_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_CAN2_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_CAN2_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_CAN2_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_CAN2_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_CAN2_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_CAN2_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_CAN2_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CAN2_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_CAN2_Init+0x60>)
 800077e:	f001 fb07 	bl	8001d90 <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 fad0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000098 	.word	0x20000098
 8000794:	40006800 	.word	0x40006800

08000798 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_I2C4_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_I2C4_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_I2C4_Init+0x74>)
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <MX_I2C4_Init+0x7c>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_I2C4_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_I2C4_Init+0x74>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_I2C4_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_I2C4_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C4_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C4_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C4_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_I2C4_Init+0x74>)
 80007d4:	f001 fe84 	bl	80024e0 <HAL_I2C_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80007de:	f000 faa5 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_I2C4_Init+0x74>)
 80007e6:	f001 ff17 	bl	8002618 <HAL_I2CEx_ConfigAnalogFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 fa9c 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2C4_Init+0x74>)
 80007f8:	f001 ff59 	bl	80026ae <HAL_I2CEx_ConfigDigitalFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 fa93 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000c0 	.word	0x200000c0
 8000810:	40006000 	.word	0x40006000
 8000814:	20404768 	.word	0x20404768

08000818 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09a      	sub	sp, #104	; 0x68
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800081e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 ff48 	bl	80056bc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f004 ff42 	bl	80056bc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000838:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <MX_LTDC_Init+0x15c>)
 800083a:	4a4f      	ldr	r2, [pc, #316]	; (8000978 <MX_LTDC_Init+0x160>)
 800083c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800083e:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800084a:	4b4a      	ldr	r3, [pc, #296]	; (8000974 <MX_LTDC_Init+0x15c>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000850:	4b48      	ldr	r3, [pc, #288]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000856:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000858:	2207      	movs	r2, #7
 800085a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800085c:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_LTDC_Init+0x15c>)
 800085e:	2203      	movs	r2, #3
 8000860:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000864:	220e      	movs	r2, #14
 8000866:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000868:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_LTDC_Init+0x15c>)
 800086a:	2205      	movs	r2, #5
 800086c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000870:	f240 228e 	movw	r2, #654	; 0x28e
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000878:	f240 12e5 	movw	r2, #485	; 0x1e5
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000880:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000888:	f240 12e7 	movw	r2, #487	; 0x1e7
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <MX_LTDC_Init+0x15c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008a6:	4833      	ldr	r0, [pc, #204]	; (8000974 <MX_LTDC_Init+0x15c>)
 80008a8:	f001 ff4e 	bl	8002748 <HAL_LTDC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008b2:	f000 fa3b 	bl	8000d2c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008c6:	2300      	movs	r3, #0
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008d8:	2305      	movs	r3, #5
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_LTDC_Init+0x15c>)
 8000904:	f001 fff0 	bl	80028e8 <HAL_LTDC_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800090e:	f000 fa0d 	bl	8000d2c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000934:	2305      	movs	r3, #5
 8000936:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_LTDC_Init+0x15c>)
 800095e:	f001 ffc3 	bl	80028e8 <HAL_LTDC_ConfigLayer>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000968:	f000 f9e0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3768      	adds	r7, #104	; 0x68
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000114 	.word	0x20000114
 8000978:	40016800 	.word	0x40016800

0800097c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_QUADSPI_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_QUADSPI_Init+0x50>)
 800098e:	2201      	movs	r2, #1
 8000990:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_QUADSPI_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_QUADSPI_Init+0x50>)
 800099a:	2201      	movs	r2, #1
 800099c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_QUADSPI_Init+0x50>)
 80009b8:	f002 f9be 	bl	8002d38 <HAL_QSPI_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 f9b3 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200001bc 	.word	0x200001bc
 80009d0:	a0001000 	.word	0xa0001000

080009d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_SPI1_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a30:	2208      	movs	r2, #8
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_SPI1_Init+0x74>)
 8000a36:	f003 fb2d 	bl	8004094 <HAL_SPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000a40:	f000 f974 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000208 	.word	0x20000208
 8000a4c:	40013000 	.word	0x40013000

08000a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9c:	4818      	ldr	r0, [pc, #96]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000a9e:	f003 fba4 	bl	80041ea <HAL_TIM_PWM_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000aa8:	f000 f940 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000abc:	f004 f80a 	bl	8004ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ac6:	f000 f931 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aca:	2360      	movs	r3, #96	; 0x60
 8000acc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000ae2:	f003 fbd9 	bl	8004298 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000aec:	f000 f91e 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM2_Init+0xb0>)
 8000af2:	f000 fcc7 	bl	8001484 <HAL_TIM_MspPostInit>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000026c 	.word	0x2000026c

08000b04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <MX_UART4_Init+0x58>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_UART4_Init+0x5c>)
 8000b12:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b28:	220c      	movs	r2, #12
 8000b2a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_UART4_Init+0x54>)
 8000b46:	f004 f853 	bl	8004bf0 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART4_Init+0x50>
  {
    Error_Handler();
 8000b50:	f000 f8ec 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200002b8 	.word	0x200002b8
 8000b5c:	40004c00 	.word	0x40004c00
 8000b60:	0007a120 	.word	0x0007a120

08000b64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b96:	2210      	movs	r2, #16
 8000b98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_FMC_Init+0x94>)
 8000be0:	f003 fa24 	bl	800402c <HAL_SDRAM_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000bea:	f000 f89f 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000340 	.word	0x20000340
 8000bfc:	a0000140 	.word	0xa0000140

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a41      	ldr	r2, [pc, #260]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a3b      	ldr	r2, [pc, #236]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0x120>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_NRST_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2190      	movs	r1, #144	; 0x90
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000cdc:	f001 fbe6 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOST_SENSE_Pin */
  GPIO_InitStruct.Pin = HOST_SENSE_Pin;
 8000ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HOST_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x128>)
 8000cf6:	f001 fa2d 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_NRST_Pin;
 8000cfa:	2390      	movs	r3, #144	; 0x90
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000d12:	f001 fa1f 	bl	8002154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <HAL_ADC_MspInit+0x74>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d123      	bne.n	8000dea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_ADC_MspInit+0x7c>)
 8000de6:	f001 f9b5 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40012000 	.word	0x40012000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <HAL_CAN_MspInit+0x118>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d132      	bne.n	8000e88 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10b      	bne.n	8000e4c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e76:	2309      	movs	r3, #9
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4828      	ldr	r0, [pc, #160]	; (8000f24 <HAL_CAN_MspInit+0x124>)
 8000e82:	f001 f967 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e86:	e042      	b.n	8000f0e <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_CAN_MspInit+0x128>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d13d      	bne.n	8000f0e <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000eb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_CAN_MspInit+0x11c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d10b      	bne.n	8000ed4 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_CAN_MspInit+0x120>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000efe:	2309      	movs	r3, #9
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <HAL_CAN_MspInit+0x12c>)
 8000f0a:	f001 f923 	bl	8002154 <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40006400 	.word	0x40006400
 8000f1c:	20000374 	.word	0x20000374
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40006800 	.word	0x40006800
 8000f2c:	40020400 	.word	0x40020400

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0aa      	sub	sp, #168	; 0xa8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2284      	movs	r2, #132	; 0x84
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fbb3 	bl	80056bc <memset>
  if(hi2c->Instance==I2C4)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13d      	bne.n	8000fdc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fc6b 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f7c:	f7ff fed6 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000fc0:	f001 f8c8 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	37a8      	adds	r7, #168	; 0xa8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40006000 	.word	0x40006000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0b0      	sub	sp, #192	; 0xc0
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	2284      	movs	r2, #132	; 0x84
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fb53 	bl	80056bc <memset>
  if(hltdc->Instance==LTDC)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a90      	ldr	r2, [pc, #576]	; (800125c <HAL_LTDC_MspInit+0x26c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	f040 8118 	bne.w	8001252 <HAL_LTDC_MspInit+0x262>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001022:	2308      	movs	r3, #8
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001026:	2332      	movs	r3, #50	; 0x32
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800102a:	2302      	movs	r3, #2
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001032:	2300      	movs	r3, #0
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800103a:	2300      	movs	r3, #0
 800103c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fc02 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800104e:	f7ff fe6d 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001052:	4b83      	ldr	r3, [pc, #524]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a82      	ldr	r2, [pc, #520]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b80      	ldr	r3, [pc, #512]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a7c      	ldr	r2, [pc, #496]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b77      	ldr	r3, [pc, #476]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a76      	ldr	r2, [pc, #472]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b74      	ldr	r3, [pc, #464]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b71      	ldr	r3, [pc, #452]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a70      	ldr	r2, [pc, #448]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b6e      	ldr	r3, [pc, #440]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a6a      	ldr	r2, [pc, #424]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b68      	ldr	r3, [pc, #416]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a64      	ldr	r2, [pc, #400]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a5e      	ldr	r2, [pc, #376]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <HAL_LTDC_MspInit+0x270>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001114:	230e      	movs	r3, #14
 8001116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800111a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800111e:	4619      	mov	r1, r3
 8001120:	4850      	ldr	r0, [pc, #320]	; (8001264 <HAL_LTDC_MspInit+0x274>)
 8001122:	f001 f817 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001126:	23c1      	movs	r3, #193	; 0xc1
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113e:	230e      	movs	r3, #14
 8001140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001148:	4619      	mov	r1, r3
 800114a:	4847      	ldr	r0, [pc, #284]	; (8001268 <HAL_LTDC_MspInit+0x278>)
 800114c:	f001 f802 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001150:	237a      	movs	r3, #122	; 0x7a
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001168:	230e      	movs	r3, #14
 800116a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001172:	4619      	mov	r1, r3
 8001174:	483d      	ldr	r0, [pc, #244]	; (800126c <HAL_LTDC_MspInit+0x27c>)
 8001176:	f000 ffed 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001192:	2309      	movs	r3, #9
 8001194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800119c:	4619      	mov	r1, r3
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <HAL_LTDC_MspInit+0x280>)
 80011a0:	f000 ffd8 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80011a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011be:	230e      	movs	r3, #14
 80011c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c8:	4619      	mov	r1, r3
 80011ca:	4829      	ldr	r0, [pc, #164]	; (8001270 <HAL_LTDC_MspInit+0x280>)
 80011cc:	f000 ffc2 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80011d0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ea:	230e      	movs	r3, #14
 80011ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011f4:	4619      	mov	r1, r3
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <HAL_LTDC_MspInit+0x284>)
 80011f8:	f000 ffac 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80011fc:	2348      	movs	r3, #72	; 0x48
 80011fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001214:	230e      	movs	r3, #14
 8001216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800121e:	4619      	mov	r1, r3
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <HAL_LTDC_MspInit+0x288>)
 8001222:	f000 ff97 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001226:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001240:	2309      	movs	r3, #9
 8001242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001246:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800124a:	4619      	mov	r1, r3
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <HAL_LTDC_MspInit+0x284>)
 800124e:	f000 ff81 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	37c0      	adds	r7, #192	; 0xc0
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40016800 	.word	0x40016800
 8001260:	40023800 	.word	0x40023800
 8001264:	40021400 	.word	0x40021400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800
 8001278:	40020c00 	.word	0x40020c00

0800127c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a44      	ldr	r2, [pc, #272]	; (80013ac <HAL_QSPI_MspInit+0x130>)
 800129a:	4293      	cmp	r3, r2
 800129c:	f040 8081 	bne.w	80013a2 <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012a0:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38
 80012ac:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b8:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d0:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <HAL_QSPI_MspInit+0x134>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001300:	2304      	movs	r3, #4
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001310:	2309      	movs	r3, #9
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4826      	ldr	r0, [pc, #152]	; (80013b4 <HAL_QSPI_MspInit+0x138>)
 800131c:	f000 ff1a 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001330:	2309      	movs	r3, #9
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <HAL_QSPI_MspInit+0x13c>)
 800133c:	f000 ff0a 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001352:	230a      	movs	r3, #10
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <HAL_QSPI_MspInit+0x13c>)
 800135e:	f000 fef9 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001362:	2304      	movs	r3, #4
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001372:	2309      	movs	r3, #9
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_QSPI_MspInit+0x140>)
 800137e:	f000 fee9 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001392:	230a      	movs	r3, #10
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <HAL_QSPI_MspInit+0x140>)
 800139e:	f000 fed9 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	a0001000 	.word	0xa0001000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_SPI_MspInit+0x7c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d127      	bne.n	8001432 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a16      	ldr	r2, [pc, #88]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_SPI_MspInit+0x80>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_SPI_MspInit+0x80>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_SPI_MspInit+0x80>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001412:	2328      	movs	r3, #40	; 0x28
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_SPI_MspInit+0x84>)
 800142e:	f000 fe91 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013000 	.word	0x40013000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d10b      	bne.n	8001472 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_TIM_PWM_MspInit+0x38>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_TIM_PWM_MspInit+0x38>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_TIM_PWM_MspInit+0x38>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a4:	d11c      	bne.n	80014e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_TIM_MspPostInit+0x64>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_TIM_MspPostInit+0x64>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_TIM_MspPostInit+0x64>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 80014be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <HAL_TIM_MspPostInit+0x68>)
 80014dc:	f000 fe3a 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0aa      	sub	sp, #168	; 0xa8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2284      	movs	r2, #132	; 0x84
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f004 f8d3 	bl	80056bc <memset>
  if(huart->Instance==UART4)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_UART_MspInit+0xb4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13c      	bne.n	800159a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f002 f98c 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153a:	f7ff fbf7 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 8001544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_UART_MspInit+0xb8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800156e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001588:	2308      	movs	r3, #8
 800158a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_UART_MspInit+0xbc>)
 8001596:	f000 fddd 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	37a8      	adds	r7, #168	; 0xa8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40004c00 	.word	0x40004c00
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800

080015b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_FMC_MspInit+0x100>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d16d      	bne.n	80016a8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_FMC_MspInit+0x100>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_FMC_MspInit+0x104>)
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	4a37      	ldr	r2, [pc, #220]	; (80016b4 <HAL_FMC_MspInit+0x104>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6393      	str	r3, [r2, #56]	; 0x38
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_FMC_MspInit+0x104>)
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015fc:	230c      	movs	r3, #12
 80015fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	482c      	ldr	r0, [pc, #176]	; (80016b8 <HAL_FMC_MspInit+0x108>)
 8001606:	f000 fda5 	bl	8002154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160a:	230c      	movs	r3, #12
 800160c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800161a:	230c      	movs	r3, #12
 800161c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <HAL_FMC_MspInit+0x10c>)
 8001624:	f000 fd96 	bl	8002154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001638:	230c      	movs	r3, #12
 800163a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <HAL_FMC_MspInit+0x110>)
 8001642:	f000 fd87 	bl	8002154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001646:	f248 1311 	movw	r3, #33041	; 0x8111
 800164a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001658:	230c      	movs	r3, #12
 800165a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4818      	ldr	r0, [pc, #96]	; (80016c4 <HAL_FMC_MspInit+0x114>)
 8001662:	f000 fd77 	bl	8002154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001666:	f64f 7383 	movw	r3, #65411	; 0xff83
 800166a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001678:	230c      	movs	r3, #12
 800167a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <HAL_FMC_MspInit+0x118>)
 8001682:	f000 fd67 	bl	8002154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001686:	f24c 7303 	movw	r3, #50947	; 0xc703
 800168a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001698:	230c      	movs	r3, #12
 800169a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <HAL_FMC_MspInit+0x11c>)
 80016a2:	f000 fd57 	bl	8002154 <HAL_GPIO_Init>
 80016a6:	e000      	b.n	80016aa <HAL_FMC_MspInit+0xfa>
    return;
 80016a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000378 	.word	0x20000378
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40020c00 	.word	0x40020c00

080016d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016d8:	f7ff ff6a 	bl	80015b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f87a 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001760:	f7ff ffea 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800178a:	f003 ff73 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7fe febd 	bl	800050c <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017a0:	0800570c 	.word	0x0800570c
  ldr r2, =_sbss
 80017a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017a8:	20000380 	.word	0x20000380

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>

080017ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f000 fc9a 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b8:	200f      	movs	r0, #15
 80017ba:	f000 f805 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017be:	f7ff fabb 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fca7 	bl	800213a <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 fc7d 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	2000037c 	.word	0x2000037c

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000037c 	.word	0x2000037c

08001868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e031      	b.n	80018e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fa7a 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_ADC_Init+0x84>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f970 	bl	8001b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	ffffeefd 	.word	0xffffeefd

080018f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1c>
 8001908:	2302      	movs	r3, #2
 800190a:	e136      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x28a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d93a      	bls.n	8001992 <HAL_ADC_ConfigChannel+0xa2>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001924:	d035      	beq.n	8001992 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68d9      	ldr	r1, [r3, #12]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	3b1e      	subs	r3, #30
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a8d      	ldr	r2, [pc, #564]	; (8001b88 <HAL_ADC_ConfigChannel+0x298>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10a      	bne.n	800196c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68d9      	ldr	r1, [r3, #12]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	061a      	lsls	r2, r3, #24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196a:	e035      	b.n	80019d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68d9      	ldr	r1, [r3, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	4603      	mov	r3, r0
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4403      	add	r3, r0
 8001984:	3b1e      	subs	r3, #30
 8001986:	409a      	lsls	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001990:	e022      	b.n	80019d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6919      	ldr	r1, [r3, #16]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43da      	mvns	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	400a      	ands	r2, r1
 80019b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4403      	add	r3, r0
 80019ce:	409a      	lsls	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d824      	bhi.n	8001a2a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3b05      	subs	r3, #5
 80019f2:	221f      	movs	r2, #31
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43da      	mvns	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	400a      	ands	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b05      	subs	r3, #5
 8001a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34
 8001a28:	e04c      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d824      	bhi.n	8001a7c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	3b23      	subs	r3, #35	; 0x23
 8001a44:	221f      	movs	r2, #31
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	400a      	ands	r2, r1
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b23      	subs	r3, #35	; 0x23
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	e023      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b41      	subs	r3, #65	; 0x41
 8001a8e:	221f      	movs	r2, #31
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43da      	mvns	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b41      	subs	r3, #65	; 0x41
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a30      	ldr	r2, [pc, #192]	; (8001b8c <HAL_ADC_ConfigChannel+0x29c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10a      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1f4>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a2c      	ldr	r2, [pc, #176]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ade:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ae2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_ADC_ConfigChannel+0x29c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10f      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x21e>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d10b      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_ADC_ConfigChannel+0x29c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d12b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x280>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_ADC_ConfigChannel+0x298>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x23a>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b11      	cmp	r3, #17
 8001b28:	d122      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_ADC_ConfigChannel+0x298>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9a      	lsrs	r2, r3, #18
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b62:	e002      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	10000012 	.word	0x10000012
 8001b8c:	40012000 	.word	0x40012000
 8001b90:	40012300 	.word	0x40012300
 8001b94:	20000000 	.word	0x20000000
 8001b98:	431bde83 	.word	0x431bde83

08001b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ba4:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <ADC_Init+0x1ec>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <ADC_Init+0x1ec>)
 8001baa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bb0:	4b75      	ldr	r3, [pc, #468]	; (8001d88 <ADC_Init+0x1ec>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4973      	ldr	r1, [pc, #460]	; (8001d88 <ADC_Init+0x1ec>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	021a      	lsls	r2, r3, #8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <ADC_Init+0x1f0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d022      	beq.n	8001c76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6899      	ldr	r1, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e00f      	b.n	8001c96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0202 	bic.w	r2, r2, #2
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	005a      	lsls	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	035a      	lsls	r2, r3, #13
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	e007      	b.n	8001d0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	051a      	lsls	r2, r3, #20
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d4e:	025a      	lsls	r2, r3, #9
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	029a      	lsls	r2, r3, #10
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40012300 	.word	0x40012300
 8001d8c:	0f000001 	.word	0x0f000001

08001d90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0ed      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f826 	bl	8000e00 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff fd44 	bl	8001850 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff fd40 	bl	8001850 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0c5      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0e5      	beq.n	8001dcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0202 	bic.w	r2, r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff fd1e 	bl	8001850 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e16:	e012      	b.n	8001e3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff fd1a 	bl	8001850 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d90b      	bls.n	8001e3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e09f      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e5b      	ldrb	r3, [r3, #25]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e9b      	ldrb	r3, [r3, #26]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7edb      	ldrb	r3, [r3, #27]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0210 	bic.w	r2, r2, #16
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7f1b      	ldrb	r3, [r3, #28]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7f5b      	ldrb	r3, [r3, #29]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	ea42 0103 	orr.w	r1, r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	05fa0000 	.word	0x05fa0000

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <__NVIC_SetPriority+0x50>)
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
         );
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff8e 	bl	8001fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff47 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff5c 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff8e 	bl	8002040 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff5d 	bl	8001fec <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffb0 	bl	80020a8 <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e175      	b.n	8002460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8164 	bne.w	800245a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x56>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80be 	beq.w	800245a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022f6:	4a61      	ldr	r2, [pc, #388]	; (800247c <HAL_GPIO_Init+0x328>)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_GPIO_Init+0x32c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d037      	beq.n	8002392 <HAL_GPIO_Init+0x23e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a57      	ldr	r2, [pc, #348]	; (8002484 <HAL_GPIO_Init+0x330>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d031      	beq.n	800238e <HAL_GPIO_Init+0x23a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_GPIO_Init+0x334>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x236>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_GPIO_Init+0x338>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x232>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_GPIO_Init+0x33c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x22e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a53      	ldr	r2, [pc, #332]	; (8002494 <HAL_GPIO_Init+0x340>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x22a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_GPIO_Init+0x344>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x226>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a51      	ldr	r2, [pc, #324]	; (800249c <HAL_GPIO_Init+0x348>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <HAL_GPIO_Init+0x34c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4f      	ldr	r2, [pc, #316]	; (80024a4 <HAL_GPIO_Init+0x350>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x21a>
 800236a:	2309      	movs	r3, #9
 800236c:	e012      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800236e:	230a      	movs	r3, #10
 8002370:	e010      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002372:	2308      	movs	r3, #8
 8002374:	e00e      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002376:	2307      	movs	r3, #7
 8002378:	e00c      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800237a:	2306      	movs	r3, #6
 800237c:	e00a      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800237e:	2305      	movs	r3, #5
 8002380:	e008      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002382:	2304      	movs	r3, #4
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002386:	2303      	movs	r3, #3
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002392:	2300      	movs	r3, #0
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023a4:	4935      	ldr	r1, [pc, #212]	; (800247c <HAL_GPIO_Init+0x328>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	f67f ae86 	bls.w	8002174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40013800 	.word	0x40013800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40021c00 	.word	0x40021c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40022400 	.word	0x40022400
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e08b      	b.n	800260a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fd12 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002530:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002540:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e006      	b.n	8002568 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002566:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d108      	bne.n	8002582 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	e007      	b.n	8002592 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_I2C_Init+0x134>)
 800259e:	430b      	orrs	r3, r1
 80025a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69d9      	ldr	r1, [r3, #28]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	02008000 	.word	0x02008000

08002618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	d138      	bne.n	80026a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002638:	2302      	movs	r3, #2
 800263a:	e032      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800266a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d139      	bne.n	8002738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e033      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2224      	movs	r2, #36	; 0x24
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0bf      	b.n	80028da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fc3e 	bl	8000ff0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800278a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_LTDC_Init+0x19c>)
 80027bc:	400b      	ands	r3, r1
 80027be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68d9      	ldr	r1, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_LTDC_Init+0x19c>)
 80027ea:	400b      	ands	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6919      	ldr	r1, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_LTDC_Init+0x19c>)
 8002818:	400b      	ands	r3, r1
 800281a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6919      	ldr	r1, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6959      	ldr	r1, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_LTDC_Init+0x19c>)
 8002846:	400b      	ands	r3, r1
 8002848:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6959      	ldr	r1, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0206 	orr.w	r2, r2, #6
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	f000f800 	.word	0xf000f800

080028e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_LTDC_ConfigLayer+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e02c      	b.n	800295c <HAL_LTDC_ConfigLayer+0x74>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2134      	movs	r1, #52	; 0x34
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f811 	bl	8002964 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bdb0      	pop	{r4, r5, r7, pc}

08002964 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	4413      	add	r3, r2
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	01db      	lsls	r3, r3, #7
 8002990:	4413      	add	r3, r2
 8002992:	3384      	adds	r3, #132	; 0x84
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	4611      	mov	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	01d2      	lsls	r2, r2, #7
 80029a0:	440a      	add	r2, r1
 80029a2:	3284      	adds	r2, #132	; 0x84
 80029a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029ba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029bc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	01db      	lsls	r3, r3, #7
 80029c8:	440b      	add	r3, r1
 80029ca:	3384      	adds	r3, #132	; 0x84
 80029cc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	4413      	add	r3, r2
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	01db      	lsls	r3, r3, #7
 80029f2:	4413      	add	r3, r2
 80029f4:	3384      	adds	r3, #132	; 0x84
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4611      	mov	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	01d2      	lsls	r2, r2, #7
 8002a02:	440a      	add	r2, r1
 8002a04:	3284      	adds	r2, #132	; 0x84
 8002a06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1a:	4413      	add	r3, r2
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	440b      	add	r3, r1
 8002a2a:	3384      	adds	r3, #132	; 0x84
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	01db      	lsls	r3, r3, #7
 8002a3e:	4413      	add	r3, r2
 8002a40:	3384      	adds	r3, #132	; 0x84
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	01d2      	lsls	r2, r2, #7
 8002a4e:	440a      	add	r2, r1
 8002a50:	3284      	adds	r2, #132	; 0x84
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	01db      	lsls	r3, r3, #7
 8002a62:	4413      	add	r3, r2
 8002a64:	3384      	adds	r3, #132	; 0x84
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	01db      	lsls	r3, r3, #7
 8002a94:	4413      	add	r3, r2
 8002a96:	3384      	adds	r3, #132	; 0x84
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	01db      	lsls	r3, r3, #7
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3384      	adds	r3, #132	; 0x84
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	01db      	lsls	r3, r3, #7
 8002ac8:	440b      	add	r3, r1
 8002aca:	3384      	adds	r3, #132	; 0x84
 8002acc:	4619      	mov	r1, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	01db      	lsls	r3, r3, #7
 8002ade:	4413      	add	r3, r2
 8002ae0:	3384      	adds	r3, #132	; 0x84
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	01d2      	lsls	r2, r2, #7
 8002aee:	440a      	add	r2, r1
 8002af0:	3284      	adds	r2, #132	; 0x84
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4413      	add	r3, r2
 8002b04:	3384      	adds	r3, #132	; 0x84
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	01db      	lsls	r3, r3, #7
 8002b18:	4413      	add	r3, r2
 8002b1a:	3384      	adds	r3, #132	; 0x84
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	01db      	lsls	r3, r3, #7
 8002b28:	440b      	add	r3, r1
 8002b2a:	3384      	adds	r3, #132	; 0x84
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <LTDC_SetConfig+0x32c>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4608      	mov	r0, r1
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	01c9      	lsls	r1, r1, #7
 8002b46:	4401      	add	r1, r0
 8002b48:	3184      	adds	r1, #132	; 0x84
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	01db      	lsls	r3, r3, #7
 8002b58:	4413      	add	r3, r2
 8002b5a:	3384      	adds	r3, #132	; 0x84
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	4413      	add	r3, r2
 8002b6a:	3384      	adds	r3, #132	; 0x84
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3384      	adds	r3, #132	; 0x84
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b90:	2304      	movs	r3, #4
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e01b      	b.n	8002bce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e014      	b.n	8002bce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d00b      	beq.n	8002bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d007      	beq.n	8002bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d102      	bne.n	8002bca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e001      	b.n	8002bce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	4413      	add	r3, r2
 8002bda:	3384      	adds	r3, #132	; 0x84
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4611      	mov	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	01d2      	lsls	r2, r2, #7
 8002be8:	440a      	add	r2, r1
 8002bea:	3284      	adds	r2, #132	; 0x84
 8002bec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	1acb      	subs	r3, r1, r3
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	6809      	ldr	r1, [r1, #0]
 8002c14:	4608      	mov	r0, r1
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	01c9      	lsls	r1, r1, #7
 8002c1a:	4401      	add	r1, r0
 8002c1c:	3184      	adds	r1, #132	; 0x84
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3384      	adds	r3, #132	; 0x84
 8002c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	01db      	lsls	r3, r3, #7
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3384      	adds	r3, #132	; 0x84
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <LTDC_SetConfig+0x330>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	01db      	lsls	r3, r3, #7
 8002c52:	4413      	add	r3, r2
 8002c54:	3384      	adds	r3, #132	; 0x84
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	4413      	add	r3, r2
 8002c6a:	3384      	adds	r3, #132	; 0x84
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4611      	mov	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	01d2      	lsls	r2, r2, #7
 8002c78:	440a      	add	r2, r1
 8002c7a:	3284      	adds	r2, #132	; 0x84
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6013      	str	r3, [r2, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	fffff8f8 	.word	0xfffff8f8
 8002c94:	fffff800 	.word	0xfffff800

08002c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc6:	f7fe fdc3 	bl	8001850 <HAL_GetTick>
 8002cca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ccc:	e009      	b.n	8002ce2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cce:	f7fe fdbf 	bl	8001850 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cdc:	d901      	bls.n	8002ce2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e022      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d1ee      	bne.n	8002cce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfc:	f7fe fda8 	bl	8001850 <HAL_GetTick>
 8002d00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d02:	e009      	b.n	8002d18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d04:	f7fe fda4 	bl	8001850 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d12:	d901      	bls.n	8002d18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e007      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d24:	d1ee      	bne.n	8002d04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000

08002d38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7fe fd86 	bl	8001850 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e067      	b.n	8002e20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fa89 	bl	800127c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f85e 	bl	8002e30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	021a      	lsls	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2120      	movs	r1, #32
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f856 	bl	8002e4c <QSPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d135      	bne.n	8002e16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_QSPI_Init+0xf0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6852      	ldr	r2, [r2, #4]
 8002db8:	0611      	lsls	r1, r2, #24
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	69d2      	ldr	r2, [r2, #28]
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6a12      	ldr	r2, [r2, #32]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_QSPI_Init+0xf4>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6912      	ldr	r2, [r2, #16]
 8002de2:	0411      	lsls	r1, r2, #16
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6952      	ldr	r2, [r2, #20]
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6992      	ldr	r2, [r2, #24]
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	00ffff2f 	.word	0x00ffff2f
 8002e2c:	ffe0f8fe 	.word	0xffe0f8fe

08002e30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e5c:	e01a      	b.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d016      	beq.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fcf3 	bl	8001850 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e00e      	b.n	8002eb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1d6      	bne.n	8002e5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e291      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
 8002ef8:	4b90      	ldr	r3, [pc, #576]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b8d      	ldr	r3, [pc, #564]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x130>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e26b      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x7a>
 8002f28:	4b84      	ldr	r3, [pc, #528]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a83      	ldr	r2, [pc, #524]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x9c>
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7e      	ldr	r2, [pc, #504]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b7c      	ldr	r3, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a72      	ldr	r2, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fc58 	bl	8001850 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fc54 	bl	8001850 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e21f      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fc44 	bl	8001850 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fc40 	bl	8001850 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e20b      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x110>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d069      	beq.n	80030ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1df      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e040      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fbf6 	bl	8001850 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe fbf2 	bl	8001850 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1bd      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4929      	ldr	r1, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fbd2 	bl	8001850 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe fbce 	bl	8001850 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e199      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d038      	beq.n	800314c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fbaf 	bl	8001850 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fbab 	bl	8001850 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e176      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x23a>
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe fb95 	bl	8001850 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe fb91 	bl	8001850 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d903      	bls.n	8003140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e15c      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
 800313c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	4b91      	ldr	r3, [pc, #580]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ee      	bne.n	800312a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a4 	beq.w	80032a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b8b      	ldr	r3, [pc, #556]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a87      	ldr	r2, [pc, #540]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b82      	ldr	r3, [pc, #520]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fe fb59 	bl	8001850 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fe fb55 	bl	8001850 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e120      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4b75      	ldr	r3, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x31a>
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	e02d      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x33c>
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a69      	ldr	r2, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a66      	ldr	r2, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	e01c      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x35e>
 8003200:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a60      	ldr	r2, [pc, #384]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a5d      	ldr	r2, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5a      	ldr	r2, [pc, #360]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b58      	ldr	r3, [pc, #352]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a57      	ldr	r2, [pc, #348]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe fb09 	bl	8001850 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fb05 	bl	8001850 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0ce      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCC_OscConfig+0x386>
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe faf3 	bl	8001850 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe faef 	bl	8001850 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a4 	beq.w	80033f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d06b      	beq.n	8003390 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d149      	bne.n	8003354 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a30      	ldr	r2, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fac0 	bl	8001850 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fabc 	bl	8001850 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e087      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	4313      	orrs	r3, r2
 8003318:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800331e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fa90 	bl	8001850 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fa8c 	bl	8001850 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e057      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x478>
 8003352:	e04f      	b.n	80033f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fa76 	bl	8001850 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe fa72 	bl	8001850 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e03d      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x4ac>
 8003386:	e035      	b.n	80033f4 <HAL_RCC_OscConfig+0x538>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x544>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d028      	beq.n	80033f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d121      	bne.n	80033f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d111      	bne.n	80033f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	4965      	ldr	r1, [pc, #404]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800346e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fe f9aa 	bl	8001850 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe f9a6 	bl	8001850 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe f906 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023c00 	.word	0x40023c00
 80035cc:	40023800 	.word	0x40023800
 80035d0:	080056e4 	.word	0x080056e4
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e0:	b094      	sub	sp, #80	; 0x50
 80035e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	647b      	str	r3, [r7, #68]	; 0x44
 80035e8:	2300      	movs	r3, #0
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ec:	2300      	movs	r3, #0
 80035ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f4:	4b79      	ldr	r3, [pc, #484]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d00d      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x40>
 8003600:	2b08      	cmp	r3, #8
 8003602:	f200 80e1 	bhi.w	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x34>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x3a>
 800360e:	e0db      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003614:	e0db      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003616:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361a:	e0d8      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003624:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003626:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2200      	movs	r2, #0
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
 800363c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
 8003646:	2300      	movs	r3, #0
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800364e:	4622      	mov	r2, r4
 8003650:	462b      	mov	r3, r5
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	0159      	lsls	r1, r3, #5
 800365c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003660:	0150      	lsls	r0, r2, #5
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4621      	mov	r1, r4
 8003668:	1a51      	subs	r1, r2, r1
 800366a:	6139      	str	r1, [r7, #16]
 800366c:	4629      	mov	r1, r5
 800366e:	eb63 0301 	sbc.w	r3, r3, r1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003680:	4659      	mov	r1, fp
 8003682:	018b      	lsls	r3, r1, #6
 8003684:	4651      	mov	r1, sl
 8003686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368a:	4651      	mov	r1, sl
 800368c:	018a      	lsls	r2, r1, #6
 800368e:	4651      	mov	r1, sl
 8003690:	ebb2 0801 	subs.w	r8, r2, r1
 8003694:	4659      	mov	r1, fp
 8003696:	eb63 0901 	sbc.w	r9, r3, r1
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ae:	4690      	mov	r8, r2
 80036b0:	4699      	mov	r9, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	eb18 0303 	adds.w	r3, r8, r3
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	462b      	mov	r3, r5
 80036bc:	eb49 0303 	adc.w	r3, r9, r3
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ce:	4629      	mov	r1, r5
 80036d0:	028b      	lsls	r3, r1, #10
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d8:	4621      	mov	r1, r4
 80036da:	028a      	lsls	r2, r1, #10
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ec:	f7fc fd8c 	bl	8000208 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f8:	e058      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	2200      	movs	r2, #0
 8003702:	4618      	mov	r0, r3
 8003704:	4611      	mov	r1, r2
 8003706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	0159      	lsls	r1, r3, #5
 8003722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003726:	0150      	lsls	r0, r2, #5
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4641      	mov	r1, r8
 800372e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb63 0b01 	sbc.w	fp, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800374c:	ebb2 040a 	subs.w	r4, r2, sl
 8003750:	eb63 050b 	sbc.w	r5, r3, fp
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	00eb      	lsls	r3, r5, #3
 800375e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003762:	00e2      	lsls	r2, r4, #3
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4643      	mov	r3, r8
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	464b      	mov	r3, r9
 8003770:	eb45 0303 	adc.w	r3, r5, r3
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003782:	4629      	mov	r1, r5
 8003784:	028b      	lsls	r3, r1, #10
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800378c:	4621      	mov	r1, r4
 800378e:	028a      	lsls	r2, r1, #10
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	61fa      	str	r2, [r7, #28]
 800379c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a0:	f7fc fd32 	bl	8000208 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3750      	adds	r7, #80	; 0x50
 80037d4:	46bd      	mov	sp, r7
 80037d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400

080037e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003800:	f7ff fff0 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0a9b      	lsrs	r3, r3, #10
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4903      	ldr	r1, [pc, #12]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	080056f4 	.word	0x080056f4

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003828:	f7ff ffdc 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0b5b      	lsrs	r3, r3, #13
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	080056f4 	.word	0x080056f4

0800384c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003874:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a68      	ldr	r2, [pc, #416]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800387e:	6093      	str	r3, [r2, #8]
 8003880:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	4964      	ldr	r1, [pc, #400]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	4959      	ldr	r1, [pc, #356]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d017      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038e2:	4b4e      	ldr	r3, [pc, #312]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	494a      	ldr	r1, [pc, #296]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808b 	beq.w	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a39      	ldr	r2, [pc, #228]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
 800393c:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a34      	ldr	r2, [pc, #208]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fd ff7c 	bl	8001850 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395c:	f7fd ff78 	bl	8001850 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e357      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800397a:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d035      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d02e      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003998:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d114      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd ff40 	bl	8001850 <HAL_GetTick>
 80039d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	e00a      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fd ff3c 	bl	8001850 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e319      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ee      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a02:	d111      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a12:	400b      	ands	r3, r1
 8003a14:	4901      	ldr	r1, [pc, #4]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40007000 	.word	0x40007000
 8003a24:	0ffffcff 	.word	0x0ffffcff
 8003a28:	4baa      	ldr	r3, [pc, #680]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4aa9      	ldr	r2, [pc, #676]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	4ba7      	ldr	r3, [pc, #668]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	49a4      	ldr	r1, [pc, #656]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a52:	4ba0      	ldr	r3, [pc, #640]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	4a9e      	ldr	r2, [pc, #632]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a62:	4b9c      	ldr	r3, [pc, #624]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	4999      	ldr	r1, [pc, #612]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a80:	4b94      	ldr	r3, [pc, #592]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	4991      	ldr	r1, [pc, #580]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa2:	4b8c      	ldr	r3, [pc, #560]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab0:	4988      	ldr	r1, [pc, #544]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac4:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	4980      	ldr	r1, [pc, #512]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae6:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4977      	ldr	r1, [pc, #476]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b08:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	496f      	ldr	r1, [pc, #444]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f023 020c 	bic.w	r2, r3, #12
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b38:	4966      	ldr	r1, [pc, #408]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	495e      	ldr	r1, [pc, #376]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6e:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7c:	4955      	ldr	r1, [pc, #340]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bb2:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4944      	ldr	r1, [pc, #272]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bd4:	4b3f      	ldr	r3, [pc, #252]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	493c      	ldr	r1, [pc, #240]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	4933      	ldr	r1, [pc, #204]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c26:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d011      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c48:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c58:	d101      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cac:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d006      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80d9 	beq.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cc8:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a01      	ldr	r2, [pc, #4]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd fdb9 	bl	8001850 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce2:	f7fd fdb5 	bl	8001850 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	; 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e194      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d021      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d14:	4b64      	ldr	r3, [pc, #400]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d28:	0e1b      	lsrs	r3, r3, #24
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	019a      	lsls	r2, r3, #6
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	071b      	lsls	r3, r3, #28
 8003d48:	4957      	ldr	r1, [pc, #348]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02e      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d129      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	0f1b      	lsrs	r3, r3, #28
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	019a      	lsls	r2, r3, #6
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	071b      	lsls	r3, r3, #28
 8003db0:	493d      	ldr	r1, [pc, #244]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dbe:	f023 021f 	bic.w	r2, r3, #31
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	4937      	ldr	r1, [pc, #220]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	0e1b      	lsrs	r3, r3, #24
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dea:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df0:	0f1b      	lsrs	r3, r3, #28
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	019a      	lsls	r2, r3, #6
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	071b      	lsls	r3, r3, #28
 8003e10:	4925      	ldr	r1, [pc, #148]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	019a      	lsls	r2, r3, #6
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	4919      	ldr	r1, [pc, #100]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fd fcfc 	bl	8001850 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e5c:	f7fd fcf8 	bl	8001850 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0d7      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 80cd 	bne.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fd fcdf 	bl	8001850 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e96:	f7fd fcdb 	bl	8001850 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d903      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0ba      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ea8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb8:	d0ed      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d12a      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ef0:	4b4d      	ldr	r3, [pc, #308]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	0f1b      	lsrs	r3, r3, #28
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	019a      	lsls	r2, r3, #6
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	4944      	ldr	r1, [pc, #272]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	493d      	ldr	r1, [pc, #244]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d022      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4c:	d11d      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	0f1b      	lsrs	r3, r3, #28
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	019a      	lsls	r2, r3, #6
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	4929      	ldr	r1, [pc, #164]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d028      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	4911      	ldr	r1, [pc, #68]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fc2c 	bl	8001850 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ffc:	f7fd fc28 	bl	8001850 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e007      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401a:	d1ef      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e025      	b.n	800408c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fd fb3b 	bl	80016d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f001 fa3b 	bl	80054e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	461a      	mov	r2, r3
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	f001 fa8f 	bl	80055a0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e09d      	b.n	80041e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b6:	d009      	beq.n	80040cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
 80040be:	e005      	b.n	80040cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd f96a 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004102:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800410c:	d902      	bls.n	8004114 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e002      	b.n	800411a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004118:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004122:	d007      	beq.n	8004134 <HAL_SPI_Init+0xa0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412c:	d002      	beq.n	8004134 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	ea42 0103 	orr.w	r1, r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 0204 	and.w	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041b0:	ea42 0103 	orr.w	r1, r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e049      	b.n	8004290 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fd f919 	bl	8001448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 f949 	bl	80044c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0ff      	b.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b14      	cmp	r3, #20
 80042c2:	f200 80f0 	bhi.w	80044a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004321 	.word	0x08004321
 80042d0:	080044a7 	.word	0x080044a7
 80042d4:	080044a7 	.word	0x080044a7
 80042d8:	080044a7 	.word	0x080044a7
 80042dc:	08004361 	.word	0x08004361
 80042e0:	080044a7 	.word	0x080044a7
 80042e4:	080044a7 	.word	0x080044a7
 80042e8:	080044a7 	.word	0x080044a7
 80042ec:	080043a3 	.word	0x080043a3
 80042f0:	080044a7 	.word	0x080044a7
 80042f4:	080044a7 	.word	0x080044a7
 80042f8:	080044a7 	.word	0x080044a7
 80042fc:	080043e3 	.word	0x080043e3
 8004300:	080044a7 	.word	0x080044a7
 8004304:	080044a7 	.word	0x080044a7
 8004308:	080044a7 	.word	0x080044a7
 800430c:	08004425 	.word	0x08004425
 8004310:	080044a7 	.word	0x080044a7
 8004314:	080044a7 	.word	0x080044a7
 8004318:	080044a7 	.word	0x080044a7
 800431c:	08004465 	.word	0x08004465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f976 	bl	8004618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0208 	orr.w	r2, r2, #8
 800433a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6999      	ldr	r1, [r3, #24]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	619a      	str	r2, [r3, #24]
      break;
 800435e:	e0a5      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f9c8 	bl	80046fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6999      	ldr	r1, [r3, #24]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	021a      	lsls	r2, r3, #8
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	619a      	str	r2, [r3, #24]
      break;
 80043a0:	e084      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fa1f 	bl	80047ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0208 	orr.w	r2, r2, #8
 80043bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0204 	bic.w	r2, r2, #4
 80043cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	61da      	str	r2, [r3, #28]
      break;
 80043e0:	e064      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fa75 	bl	80048d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	61da      	str	r2, [r3, #28]
      break;
 8004422:	e043      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 faac 	bl	8004988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004462:	e023      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fade 	bl	8004a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044a4:	e002      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
      break;
 80044aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a46      	ldr	r2, [pc, #280]	; (80045ec <TIM_Base_SetConfig+0x12c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d00f      	beq.n	8004500 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a43      	ldr	r2, [pc, #268]	; (80045f0 <TIM_Base_SetConfig+0x130>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00b      	beq.n	8004500 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a42      	ldr	r2, [pc, #264]	; (80045f4 <TIM_Base_SetConfig+0x134>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a41      	ldr	r2, [pc, #260]	; (80045f8 <TIM_Base_SetConfig+0x138>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a40      	ldr	r2, [pc, #256]	; (80045fc <TIM_Base_SetConfig+0x13c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d108      	bne.n	8004512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a35      	ldr	r2, [pc, #212]	; (80045ec <TIM_Base_SetConfig+0x12c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02b      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d027      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <TIM_Base_SetConfig+0x130>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d023      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <TIM_Base_SetConfig+0x134>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01f      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a30      	ldr	r2, [pc, #192]	; (80045f8 <TIM_Base_SetConfig+0x138>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01b      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <TIM_Base_SetConfig+0x13c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d017      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <TIM_Base_SetConfig+0x140>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <TIM_Base_SetConfig+0x144>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <TIM_Base_SetConfig+0x148>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2b      	ldr	r2, [pc, #172]	; (800460c <TIM_Base_SetConfig+0x14c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <TIM_Base_SetConfig+0x150>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a29      	ldr	r2, [pc, #164]	; (8004614 <TIM_Base_SetConfig+0x154>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <TIM_Base_SetConfig+0x12c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0xf8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <TIM_Base_SetConfig+0x13c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d103      	bne.n	80045c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	611a      	str	r2, [r3, #16]
  }
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40010400 	.word	0x40010400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800
 800460c:	40001800 	.word	0x40001800
 8004610:	40001c00 	.word	0x40001c00
 8004614:	40002000 	.word	0x40002000

08004618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f023 0201 	bic.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <TIM_OC1_SetConfig+0xd8>)
 8004644:	4013      	ands	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0302 	bic.w	r3, r3, #2
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <TIM_OC1_SetConfig+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_OC1_SetConfig+0x64>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <TIM_OC1_SetConfig+0xe0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d10c      	bne.n	8004696 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0308 	bic.w	r3, r3, #8
 8004682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <TIM_OC1_SetConfig+0xdc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_OC1_SetConfig+0x8e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <TIM_OC1_SetConfig+0xe0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	fffeff8f 	.word	0xfffeff8f
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40010400 	.word	0x40010400

080046fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f023 0210 	bic.w	r2, r3, #16
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <TIM_OC2_SetConfig+0xe4>)
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0320 	bic.w	r3, r3, #32
 8004746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <TIM_OC2_SetConfig+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC2_SetConfig+0x68>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <TIM_OC2_SetConfig+0xec>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10d      	bne.n	8004780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <TIM_OC2_SetConfig+0xe8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_OC2_SetConfig+0x94>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <TIM_OC2_SetConfig+0xec>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d113      	bne.n	80047b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	feff8fff 	.word	0xfeff8fff
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400

080047ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <TIM_OC3_SetConfig+0xe0>)
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <TIM_OC3_SetConfig+0xe4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC3_SetConfig+0x66>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <TIM_OC3_SetConfig+0xe8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <TIM_OC3_SetConfig+0xe4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x92>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <TIM_OC3_SetConfig+0xe8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d113      	bne.n	80048a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	fffeff8f 	.word	0xfffeff8f
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010400 	.word	0x40010400

080048d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <TIM_OC4_SetConfig+0xa4>)
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	031b      	lsls	r3, r3, #12
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <TIM_OC4_SetConfig+0xa8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC4_SetConfig+0x68>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <TIM_OC4_SetConfig+0xac>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	feff8fff 	.word	0xfeff8fff
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400

08004988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <TIM_OC5_SetConfig+0x98>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <TIM_OC5_SetConfig+0x9c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC5_SetConfig+0x5e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <TIM_OC5_SetConfig+0xa0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d109      	bne.n	80049fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	fffeff8f 	.word	0xfffeff8f
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40010400 	.word	0x40010400

08004a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <TIM_OC6_SetConfig+0x9c>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	051b      	lsls	r3, r3, #20
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <TIM_OC6_SetConfig+0xa0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC6_SetConfig+0x60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <TIM_OC6_SetConfig+0xa4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	029b      	lsls	r3, r3, #10
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	feff8fff 	.word	0xfeff8fff
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e06d      	b.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d022      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d01d      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d018      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d009      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40001800 	.word	0x40001800

08004bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e040      	b.n	8004c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fc6c 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa8c 	bl	8005154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f825 	bl	8004c8c <UART_SetConfig>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e01b      	b.n	8004c84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fb0b 	bl	8005298 <UART_CheckIdleState>
 8004c82:	4603      	mov	r3, r0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4ba6      	ldr	r3, [pc, #664]	; (8004f50 <UART_SetConfig+0x2c4>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a94      	ldr	r2, [pc, #592]	; (8004f54 <UART_SetConfig+0x2c8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d120      	bne.n	8004d4a <UART_SetConfig+0xbe>
 8004d08:	4b93      	ldr	r3, [pc, #588]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d816      	bhi.n	8004d44 <UART_SetConfig+0xb8>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x90>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d33 	.word	0x08004d33
 8004d28:	08004d3f 	.word	0x08004d3f
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e150      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004d32:	2302      	movs	r3, #2
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e14d      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e14a      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e147      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004d44:	2310      	movs	r3, #16
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e144      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a83      	ldr	r2, [pc, #524]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d132      	bne.n	8004dba <UART_SetConfig+0x12e>
 8004d54:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d828      	bhi.n	8004db4 <UART_SetConfig+0x128>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <UART_SetConfig+0xdc>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004db5 	.word	0x08004db5
 8004d70:	08004db5 	.word	0x08004db5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004db5 	.word	0x08004db5
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004db5 	.word	0x08004db5
 8004d88:	08004da3 	.word	0x08004da3
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004db5 	.word	0x08004db5
 8004d98:	08004daf 	.word	0x08004daf
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e118      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e115      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e112      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e10f      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e10c      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a68      	ldr	r2, [pc, #416]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d120      	bne.n	8004e06 <UART_SetConfig+0x17a>
 8004dc4:	4b64      	ldr	r3, [pc, #400]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d013      	beq.n	8004dfa <UART_SetConfig+0x16e>
 8004dd2:	2b30      	cmp	r3, #48	; 0x30
 8004dd4:	d814      	bhi.n	8004e00 <UART_SetConfig+0x174>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d009      	beq.n	8004dee <UART_SetConfig+0x162>
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d810      	bhi.n	8004e00 <UART_SetConfig+0x174>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <UART_SetConfig+0x15c>
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d006      	beq.n	8004df4 <UART_SetConfig+0x168>
 8004de6:	e00b      	b.n	8004e00 <UART_SetConfig+0x174>
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0f2      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004dee:	2302      	movs	r3, #2
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e0ef      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004df4:	2304      	movs	r3, #4
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0ec      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0e9      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0e6      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a56      	ldr	r2, [pc, #344]	; (8004f64 <UART_SetConfig+0x2d8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d120      	bne.n	8004e52 <UART_SetConfig+0x1c6>
 8004e10:	4b51      	ldr	r3, [pc, #324]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d013      	beq.n	8004e46 <UART_SetConfig+0x1ba>
 8004e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e20:	d814      	bhi.n	8004e4c <UART_SetConfig+0x1c0>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d009      	beq.n	8004e3a <UART_SetConfig+0x1ae>
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d810      	bhi.n	8004e4c <UART_SetConfig+0x1c0>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x1a8>
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d006      	beq.n	8004e40 <UART_SetConfig+0x1b4>
 8004e32:	e00b      	b.n	8004e4c <UART_SetConfig+0x1c0>
 8004e34:	2300      	movs	r3, #0
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0cc      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e0c9      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e40:	2304      	movs	r3, #4
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0c6      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e46:	2308      	movs	r3, #8
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e0c3      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e0c0      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a44      	ldr	r2, [pc, #272]	; (8004f68 <UART_SetConfig+0x2dc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d125      	bne.n	8004ea8 <UART_SetConfig+0x21c>
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6a:	d017      	beq.n	8004e9c <UART_SetConfig+0x210>
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d817      	bhi.n	8004ea2 <UART_SetConfig+0x216>
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e76:	d00b      	beq.n	8004e90 <UART_SetConfig+0x204>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d811      	bhi.n	8004ea2 <UART_SetConfig+0x216>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <UART_SetConfig+0x1fe>
 8004e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e86:	d006      	beq.n	8004e96 <UART_SetConfig+0x20a>
 8004e88:	e00b      	b.n	8004ea2 <UART_SetConfig+0x216>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e0a1      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e09e      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e96:	2304      	movs	r3, #4
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e09b      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e098      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e095      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <UART_SetConfig+0x2e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d125      	bne.n	8004efe <UART_SetConfig+0x272>
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec0:	d017      	beq.n	8004ef2 <UART_SetConfig+0x266>
 8004ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec6:	d817      	bhi.n	8004ef8 <UART_SetConfig+0x26c>
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ecc:	d00b      	beq.n	8004ee6 <UART_SetConfig+0x25a>
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d811      	bhi.n	8004ef8 <UART_SetConfig+0x26c>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x254>
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x260>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x26c>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e076      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e073      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e070      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e06d      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e06a      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <UART_SetConfig+0x2e4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d138      	bne.n	8004f7a <UART_SetConfig+0x2ee>
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f16:	d017      	beq.n	8004f48 <UART_SetConfig+0x2bc>
 8004f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f1c:	d82a      	bhi.n	8004f74 <UART_SetConfig+0x2e8>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d00b      	beq.n	8004f3c <UART_SetConfig+0x2b0>
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d824      	bhi.n	8004f74 <UART_SetConfig+0x2e8>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <UART_SetConfig+0x2aa>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d006      	beq.n	8004f42 <UART_SetConfig+0x2b6>
 8004f34:	e01e      	b.n	8004f74 <UART_SetConfig+0x2e8>
 8004f36:	2300      	movs	r3, #0
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e04b      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e048      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004f42:	2304      	movs	r3, #4
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e045      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e042      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004f4e:	bf00      	nop
 8004f50:	efff69f3 	.word	0xefff69f3
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40004400 	.word	0x40004400
 8004f60:	40004800 	.word	0x40004800
 8004f64:	40004c00 	.word	0x40004c00
 8004f68:	40005000 	.word	0x40005000
 8004f6c:	40011400 	.word	0x40011400
 8004f70:	40007800 	.word	0x40007800
 8004f74:	2310      	movs	r3, #16
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e02c      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a72      	ldr	r2, [pc, #456]	; (8005148 <UART_SetConfig+0x4bc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d125      	bne.n	8004fd0 <UART_SetConfig+0x344>
 8004f84:	4b71      	ldr	r3, [pc, #452]	; (800514c <UART_SetConfig+0x4c0>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f92:	d017      	beq.n	8004fc4 <UART_SetConfig+0x338>
 8004f94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f98:	d817      	bhi.n	8004fca <UART_SetConfig+0x33e>
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d00b      	beq.n	8004fb8 <UART_SetConfig+0x32c>
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa4:	d811      	bhi.n	8004fca <UART_SetConfig+0x33e>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <UART_SetConfig+0x326>
 8004faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fae:	d006      	beq.n	8004fbe <UART_SetConfig+0x332>
 8004fb0:	e00b      	b.n	8004fca <UART_SetConfig+0x33e>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e00d      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e00a      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e007      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e004      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e001      	b.n	8004fd4 <UART_SetConfig+0x348>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d15b      	bne.n	8005096 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fde:	7ffb      	ldrb	r3, [r7, #31]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d828      	bhi.n	8005036 <UART_SetConfig+0x3aa>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x360>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005037 	.word	0x08005037
 8004ffc:	08005027 	.word	0x08005027
 8005000:	08005037 	.word	0x08005037
 8005004:	08005037 	.word	0x08005037
 8005008:	08005037 	.word	0x08005037
 800500c:	0800502f 	.word	0x0800502f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fe fbf4 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005014:	61b8      	str	r0, [r7, #24]
        break;
 8005016:	e013      	b.n	8005040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005018:	f7fe fc04 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 800501c:	61b8      	str	r0, [r7, #24]
        break;
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <UART_SetConfig+0x4c4>)
 8005022:	61bb      	str	r3, [r7, #24]
        break;
 8005024:	e00c      	b.n	8005040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7fe fad9 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800502a:	61b8      	str	r0, [r7, #24]
        break;
 800502c:	e008      	b.n	8005040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e004      	b.n	8005040 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	77bb      	strb	r3, [r7, #30]
        break;
 800503e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d074      	beq.n	8005130 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	005a      	lsls	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d916      	bls.n	8005090 <UART_SetConfig+0x404>
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d212      	bcs.n	8005090 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f023 030f 	bic.w	r3, r3, #15
 8005072:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	b29a      	uxth	r2, r3
 8005080:	89fb      	ldrh	r3, [r7, #14]
 8005082:	4313      	orrs	r3, r2
 8005084:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	89fa      	ldrh	r2, [r7, #14]
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e04f      	b.n	8005130 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	77bb      	strb	r3, [r7, #30]
 8005094:	e04c      	b.n	8005130 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005096:	7ffb      	ldrb	r3, [r7, #31]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d828      	bhi.n	80050ee <UART_SetConfig+0x462>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0x418>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050df 	.word	0x080050df
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050ef 	.word	0x080050ef
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe fb98 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 80050cc:	61b8      	str	r0, [r7, #24]
        break;
 80050ce:	e013      	b.n	80050f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fe fba8 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 80050d4:	61b8      	str	r0, [r7, #24]
        break;
 80050d6:	e00f      	b.n	80050f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <UART_SetConfig+0x4c4>)
 80050da:	61bb      	str	r3, [r7, #24]
        break;
 80050dc:	e00c      	b.n	80050f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fe fa7d 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 80050e2:	61b8      	str	r0, [r7, #24]
        break;
 80050e4:	e008      	b.n	80050f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	61bb      	str	r3, [r7, #24]
        break;
 80050ec:	e004      	b.n	80050f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	77bb      	strb	r3, [r7, #30]
        break;
 80050f6:	bf00      	nop
    }

    if (pclk != 0U)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	085a      	lsrs	r2, r3, #1
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	441a      	add	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b0f      	cmp	r3, #15
 8005116:	d909      	bls.n	800512c <UART_SetConfig+0x4a0>
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511e:	d205      	bcs.n	800512c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	e001      	b.n	8005130 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800513c:	7fbb      	ldrb	r3, [r7, #30]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40007c00 	.word	0x40007c00
 800514c:	40023800 	.word	0x40023800
 8005150:	00f42400 	.word	0x00f42400

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005252:	d10a      	bne.n	800526a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a8:	f7fc fad2 	bl	8001850 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d12e      	bne.n	800531a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f83b 	bl	8005346 <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	69b9      	ldr	r1, [r7, #24]
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	617b      	str	r3, [r7, #20]
   return(result);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e011      	b.n	800533e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	e04f      	b.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d04b      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005360:	f7fc fa76 	bl	8001850 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <UART_WaitOnFlagUntilTimeout+0x30>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e04e      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d037      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d034      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d031      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d110      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2208      	movs	r2, #8
 80053a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f838 	bl	8005420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2208      	movs	r2, #8
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e029      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d2:	d111      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f81e 	bl	8005420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e00f      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	429a      	cmp	r2, r3
 8005414:	d0a0      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b095      	sub	sp, #84	; 0x54
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005446:	643b      	str	r3, [r7, #64]	; 0x40
 8005448:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800544c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	61fb      	str	r3, [r7, #28]
   return(result);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	64bb      	str	r3, [r7, #72]	; 0x48
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005492:	2b01      	cmp	r3, #1
 8005494:	d118      	bne.n	80054c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6979      	ldr	r1, [r7, #20]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	613b      	str	r3, [r7, #16]
   return(result);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e6      	bne.n	8005496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054dc:	bf00      	nop
 80054de:	3754      	adds	r7, #84	; 0x54
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d121      	bne.n	800553e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b27      	ldr	r3, [pc, #156]	; (800559c <FMC_SDRAM_Init+0xb4>)
 8005500:	4013      	ands	r3, r2
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6851      	ldr	r1, [r2, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	6892      	ldr	r2, [r2, #8]
 800550a:	4311      	orrs	r1, r2
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	68d2      	ldr	r2, [r2, #12]
 8005510:	4311      	orrs	r1, r2
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	6912      	ldr	r2, [r2, #16]
 8005516:	4311      	orrs	r1, r2
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	6952      	ldr	r2, [r2, #20]
 800551c:	4311      	orrs	r1, r2
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	6992      	ldr	r2, [r2, #24]
 8005522:	4311      	orrs	r1, r2
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	69d2      	ldr	r2, [r2, #28]
 8005528:	4311      	orrs	r1, r2
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	6a12      	ldr	r2, [r2, #32]
 800552e:	4311      	orrs	r1, r2
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005534:	430a      	orrs	r2, r1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e026      	b.n	800558c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	69d9      	ldr	r1, [r3, #28]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	4319      	orrs	r1, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	430b      	orrs	r3, r1
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4b0e      	ldr	r3, [pc, #56]	; (800559c <FMC_SDRAM_Init+0xb4>)
 8005562:	4013      	ands	r3, r2
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	6851      	ldr	r1, [r2, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	6892      	ldr	r2, [r2, #8]
 800556c:	4311      	orrs	r1, r2
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	4311      	orrs	r1, r2
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	6912      	ldr	r2, [r2, #16]
 8005578:	4311      	orrs	r1, r2
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	6952      	ldr	r2, [r2, #20]
 800557e:	4311      	orrs	r1, r2
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	6992      	ldr	r2, [r2, #24]
 8005584:	430a      	orrs	r2, r1
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	ffff8000 	.word	0xffff8000

080055a0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d128      	bne.n	8005604 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	1e59      	subs	r1, r3, #1
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4319      	orrs	r1, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	4319      	orrs	r1, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	3b01      	subs	r3, #1
 80055da:	031b      	lsls	r3, r3, #12
 80055dc:	4319      	orrs	r1, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	4319      	orrs	r1, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	051b      	lsls	r3, r3, #20
 80055f0:	4319      	orrs	r1, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	430b      	orrs	r3, r1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	609a      	str	r2, [r3, #8]
 8005602:	e02d      	b.n	8005660 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	4b19      	ldr	r3, [pc, #100]	; (8005670 <FMC_SDRAM_Timing_Init+0xd0>)
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68d2      	ldr	r2, [r2, #12]
 8005610:	3a01      	subs	r2, #1
 8005612:	0311      	lsls	r1, r2, #12
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	6952      	ldr	r2, [r2, #20]
 8005618:	3a01      	subs	r2, #1
 800561a:	0512      	lsls	r2, r2, #20
 800561c:	430a      	orrs	r2, r1
 800561e:	431a      	orrs	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1e59      	subs	r1, r3, #1
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	3b01      	subs	r3, #1
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4319      	orrs	r1, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	3b01      	subs	r3, #1
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	4319      	orrs	r1, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	3b01      	subs	r3, #1
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	4319      	orrs	r1, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	3b01      	subs	r3, #1
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	430b      	orrs	r3, r1
 800565a:	431a      	orrs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	ff0f0fff 	.word	0xff0f0fff

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	; (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	; (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	; (80056b8 <__libc_init_array+0x44>)
 8005688:	f000 f820 	bl	80056cc <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08005704 	.word	0x08005704
 80056b0:	08005704 	.word	0x08005704
 80056b4:	08005704 	.word	0x08005704
 80056b8:	08005708 	.word	0x08005708

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
