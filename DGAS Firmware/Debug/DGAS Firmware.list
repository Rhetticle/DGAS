
DGAS Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce8  08004ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf0  08004cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08004d04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004d04  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fa3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c8  00000000  00000000  00036fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000399a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f93  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175e7  00000000  00000000  0003ee83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51df  00000000  00000000  0005646a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  0014b69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004cb8 	.word	0x08004cb8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004cb8 	.word	0x08004cb8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000510:	f000 fbb4 	bl	8000c7c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 f8cb 	bl	80016ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f816 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fb18 	bl	8000b50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000520:	f000 f87e 	bl	8000620 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000524:	f000 f8ce 	bl	80006c4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000528:	f000 f902 	bl	8000730 <MX_CAN2_Init>
  MX_FMC_Init();
 800052c:	f000 fac2 	bl	8000ab4 <MX_FMC_Init>
  MX_I2C4_Init();
 8000530:	f000 f934 	bl	800079c <MX_I2C4_Init>
  MX_LTDC_Init();
 8000534:	f000 f972 	bl	800081c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000538:	f000 fa22 	bl	8000980 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 800053c:	f000 fa4c 	bl	80009d8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000540:	f000 fa88 	bl	8000a54 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x38>
	...

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fba6 	bl	8004ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a29      	ldr	r2, [pc, #164]	; (8000618 <SystemClock_Config+0xd0>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a24      	ldr	r2, [pc, #144]	; (800061c <SystemClock_Config+0xd4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005b4:	23d8      	movs	r3, #216	; 0xd8
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fc71 	bl	8002eac <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d0:	f000 fb80 	bl	8000cd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d4:	f002 fb58 	bl	8002c88 <HAL_PWREx_EnableOverDrive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 fb79 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2107      	movs	r1, #7
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fef7 	bl	80033f4 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800060c:	f000 fb62 	bl	8000cd4 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0x98>)
 800063a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xa0>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000682:	f001 f871 	bl	8001768 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 fb22 	bl	8000cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000690:	2302      	movs	r3, #2
 8000692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0x98>)
 80006a2:	f001 f8a5 	bl	80017f0 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 fb12 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40012000 	.word	0x40012000
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_CAN1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_CAN1_Init+0x64>)
 80006e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_CAN1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_CAN1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CAN1_Init+0x64>)
 8000714:	f001 fabc 	bl	8001c90 <HAL_CAN_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800071e:	f000 fad9 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000070 	.word	0x20000070
 800072c:	40006400 	.word	0x40006400

08000730 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_CAN2_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_CAN2_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN2_Init+0x64>)
 800073c:	2210      	movs	r2, #16
 800073e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_CAN2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_CAN2_Init+0x64>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_CAN2_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN2_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_CAN2_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_CAN2_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN2_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_CAN2_Init+0x64>)
 8000780:	f001 fa86 	bl	8001c90 <HAL_CAN_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 faa3 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000098 	.word	0x20000098
 8000798:	40006800 	.word	0x40006800

0800079c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C4_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C4_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C4_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C4_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C4_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C4_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C4_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C4_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C4_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C4_Init+0x74>)
 80007d8:	f001 fe7a 	bl	80024d0 <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 fa77 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C4_Init+0x74>)
 80007ea:	f001 ff0d 	bl	8002608 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 fa6e 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C4_Init+0x74>)
 80007fc:	f001 ff4f 	bl	800269e <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fa65 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000c0 	.word	0x200000c0
 8000814:	40006000 	.word	0x40006000
 8000818:	20404768 	.word	0x20404768

0800081c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	; 0x68
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000826:	2234      	movs	r2, #52	; 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fa3c 	bl	8004ca8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2234      	movs	r2, #52	; 0x34
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fa36 	bl	8004ca8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800083c:	4b4e      	ldr	r3, [pc, #312]	; (8000978 <MX_LTDC_Init+0x15c>)
 800083e:	4a4f      	ldr	r2, [pc, #316]	; (800097c <MX_LTDC_Init+0x160>)
 8000840:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000848:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <MX_LTDC_Init+0x15c>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800084e:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800085a:	4b47      	ldr	r3, [pc, #284]	; (8000978 <MX_LTDC_Init+0x15c>)
 800085c:	2207      	movs	r2, #7
 800085e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000860:	4b45      	ldr	r3, [pc, #276]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000862:	2203      	movs	r2, #3
 8000864:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000868:	220e      	movs	r2, #14
 800086a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <MX_LTDC_Init+0x15c>)
 800086e:	2205      	movs	r2, #5
 8000870:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000874:	f240 228e 	movw	r2, #654	; 0x28e
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <MX_LTDC_Init+0x15c>)
 800087c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000884:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_LTDC_Init+0x15c>)
 800088c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000892:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_LTDC_Init+0x15c>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <MX_LTDC_Init+0x15c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008aa:	4833      	ldr	r0, [pc, #204]	; (8000978 <MX_LTDC_Init+0x15c>)
 80008ac:	f001 ff44 	bl	8002738 <HAL_LTDC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008b6:	f000 fa0d 	bl	8000cd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008ca:	2300      	movs	r3, #0
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008dc:	2305      	movs	r3, #5
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000908:	f001 ffe6 	bl	80028d8 <HAL_LTDC_ConfigLayer>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000912:	f000 f9df 	bl	8000cd4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000938:	2305      	movs	r3, #5
 800093a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_LTDC_Init+0x15c>)
 8000962:	f001 ffb9 	bl	80028d8 <HAL_LTDC_ConfigLayer>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800096c:	f000 f9b2 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3768      	adds	r7, #104	; 0x68
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000114 	.word	0x20000114
 800097c:	40016800 	.word	0x40016800

08000980 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_QUADSPI_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 800098c:	22ff      	movs	r2, #255	; 0xff
 800098e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 8000992:	2201      	movs	r2, #1
 8000994:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 800099e:	2201      	movs	r2, #1
 80009a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_QUADSPI_Init+0x50>)
 80009bc:	f002 f9b4 	bl	8002d28 <HAL_QSPI_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 f985 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001bc 	.word	0x200001bc
 80009d4:	a0001000 	.word	0xa0001000

080009d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_SPI1_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_SPI1_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_SPI1_Init+0x74>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_SPI1_Init+0x74>)
 80009ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_SPI1_Init+0x74>)
 80009f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a34:	2208      	movs	r2, #8
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_SPI1_Init+0x74>)
 8000a3a:	f003 fb23 	bl	8004084 <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000a44:	f000 f946 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000208 	.word	0x20000208
 8000a50:	40013000 	.word	0x40013000

08000a54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_UART4_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_UART4_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_UART4_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_UART4_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_UART4_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_UART4_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_UART4_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_UART4_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_UART4_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_UART4_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_UART4_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_UART4_Init+0x58>)
 8000a98:	f003 fb9f 	bl	80041da <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f917 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000026c 	.word	0x2000026c
 8000ab0:	40004c00 	.word	0x40004c00

08000ab4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_FMC_Init+0x94>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <MX_FMC_Init+0x98>)
 8000ad0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_FMC_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_FMC_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_FMC_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_FMC_Init+0x94>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_FMC_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_FMC_Init+0x94>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_FMC_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_FMC_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_FMC_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_FMC_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000b12:	2310      	movs	r3, #16
 8000b14:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000b16:	2310      	movs	r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000b22:	2310      	movs	r3, #16
 8000b24:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000b26:	2310      	movs	r3, #16
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_FMC_Init+0x94>)
 8000b30:	f003 fa74 	bl	800401c <HAL_SDRAM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000b3a:	f000 f8cb 	bl	8000cd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200002f4 	.word	0x200002f4
 8000b4c:	a0000140 	.word	0xa0000140

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a41      	ldr	r2, [pc, #260]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_GPIO_Init+0x120>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_NRST_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2190      	movs	r1, #144	; 0x90
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_GPIO_Init+0x124>)
 8000c2c:	f001 fc36 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOST_SENSE_Pin */
  GPIO_InitStruct.Pin = HOST_SENSE_Pin;
 8000c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HOST_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_GPIO_Init+0x128>)
 8000c46:	f001 fa7d 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_NRST_Pin;
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_GPIO_Init+0x124>)
 8000c62:	f001 fa6f 	bl	8002144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c8e:	f001 f9e1 	bl	8002054 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c9e:	231f      	movs	r3, #31
 8000ca0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ca2:	2387      	movs	r3, #135	; 0x87
 8000ca4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000caa:	2300      	movs	r3, #0
 8000cac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 f9ff 	bl	80020c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f001 f9dc 	bl	8002084 <HAL_MPU_Enable>

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_ADC_MspInit+0x74>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d123      	bne.n	8000d92 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_ADC_MspInit+0x78>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_ADC_MspInit+0x7c>)
 8000d8e:	f001 f9d9 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a3e      	ldr	r2, [pc, #248]	; (8000ec0 <HAL_CAN_MspInit+0x118>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d132      	bne.n	8000e30 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a3c      	ldr	r2, [pc, #240]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a39      	ldr	r2, [pc, #228]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a33      	ldr	r2, [pc, #204]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e1e:	2309      	movs	r3, #9
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4828      	ldr	r0, [pc, #160]	; (8000ecc <HAL_CAN_MspInit+0x124>)
 8000e2a:	f001 f98b 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e2e:	e042      	b.n	8000eb6 <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <HAL_CAN_MspInit+0x128>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d13d      	bne.n	8000eb6 <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000e5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_CAN_MspInit+0x11c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10b      	bne.n	8000e7c <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_CAN_MspInit+0x120>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_CAN_MspInit+0x12c>)
 8000eb2:	f001 f947 	bl	8002144 <HAL_GPIO_Init>
}
 8000eb6:	bf00      	nop
 8000eb8:	3730      	adds	r7, #48	; 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40006400 	.word	0x40006400
 8000ec4:	20000328 	.word	0x20000328
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40006800 	.word	0x40006800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0aa      	sub	sp, #168	; 0xa8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2284      	movs	r2, #132	; 0x84
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fed5 	bl	8004ca8 <memset>
  if(hi2c->Instance==I2C4)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <HAL_I2C_MspInit+0xb4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d13d      	bne.n	8000f84 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fc8f 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f24:	f7ff fed6 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f48:	2312      	movs	r3, #18
 8000f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_I2C_MspInit+0xbc>)
 8000f68:	f001 f8ec 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_I2C_MspInit+0xb8>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	37a8      	adds	r7, #168	; 0xa8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40006000 	.word	0x40006000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0b0      	sub	sp, #192	; 0xc0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	2284      	movs	r2, #132	; 0x84
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fe75 	bl	8004ca8 <memset>
  if(hltdc->Instance==LTDC)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a90      	ldr	r2, [pc, #576]	; (8001204 <HAL_LTDC_MspInit+0x26c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f040 8118 	bne.w	80011fa <HAL_LTDC_MspInit+0x262>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fce:	2332      	movs	r3, #50	; 0x32
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fc26 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8000ff6:	f7ff fe6d 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ffa:	4b83      	ldr	r3, [pc, #524]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a82      	ldr	r2, [pc, #520]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b80      	ldr	r3, [pc, #512]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a7c      	ldr	r2, [pc, #496]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b77      	ldr	r3, [pc, #476]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a76      	ldr	r2, [pc, #472]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b74      	ldr	r3, [pc, #464]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b71      	ldr	r3, [pc, #452]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a70      	ldr	r2, [pc, #448]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a6a      	ldr	r2, [pc, #424]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	4b65      	ldr	r3, [pc, #404]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a64      	ldr	r2, [pc, #400]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b62      	ldr	r3, [pc, #392]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HAL_LTDC_MspInit+0x270>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010bc:	230e      	movs	r3, #14
 80010be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010c6:	4619      	mov	r1, r3
 80010c8:	4850      	ldr	r0, [pc, #320]	; (800120c <HAL_LTDC_MspInit+0x274>)
 80010ca:	f001 f83b 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80010ce:	23c1      	movs	r3, #193	; 0xc1
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e6:	230e      	movs	r3, #14
 80010e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010f0:	4619      	mov	r1, r3
 80010f2:	4847      	ldr	r0, [pc, #284]	; (8001210 <HAL_LTDC_MspInit+0x278>)
 80010f4:	f001 f826 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010f8:	237a      	movs	r3, #122	; 0x7a
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001110:	230e      	movs	r3, #14
 8001112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800111a:	4619      	mov	r1, r3
 800111c:	483d      	ldr	r0, [pc, #244]	; (8001214 <HAL_LTDC_MspInit+0x27c>)
 800111e:	f001 f811 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001122:	2303      	movs	r3, #3
 8001124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001144:	4619      	mov	r1, r3
 8001146:	4834      	ldr	r0, [pc, #208]	; (8001218 <HAL_LTDC_MspInit+0x280>)
 8001148:	f000 fffc 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800114c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001166:	230e      	movs	r3, #14
 8001168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001170:	4619      	mov	r1, r3
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <HAL_LTDC_MspInit+0x280>)
 8001174:	f000 ffe6 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001178:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800117c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001192:	230e      	movs	r3, #14
 8001194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001198:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800119c:	4619      	mov	r1, r3
 800119e:	481f      	ldr	r0, [pc, #124]	; (800121c <HAL_LTDC_MspInit+0x284>)
 80011a0:	f000 ffd0 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80011a4:	2348      	movs	r3, #72	; 0x48
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011bc:	230e      	movs	r3, #14
 80011be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c6:	4619      	mov	r1, r3
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <HAL_LTDC_MspInit+0x288>)
 80011ca:	f000 ffbb 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80011ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e8:	2309      	movs	r3, #9
 80011ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011f2:	4619      	mov	r1, r3
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_LTDC_MspInit+0x284>)
 80011f6:	f000 ffa5 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	37c0      	adds	r7, #192	; 0xc0
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40016800 	.word	0x40016800
 8001208:	40023800 	.word	0x40023800
 800120c:	40021400 	.word	0x40021400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40021800 	.word	0x40021800
 8001220:	40020c00 	.word	0x40020c00

08001224 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a44      	ldr	r2, [pc, #272]	; (8001354 <HAL_QSPI_MspInit+0x130>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 8081 	bne.w	800134a <HAL_QSPI_MspInit+0x126>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	4a42      	ldr	r2, [pc, #264]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6393      	str	r3, [r2, #56]	; 0x38
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001260:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a3c      	ldr	r2, [pc, #240]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001278:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a36      	ldr	r2, [pc, #216]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_QSPI_MspInit+0x134>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a8:	2304      	movs	r3, #4
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012b8:	2309      	movs	r3, #9
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4826      	ldr	r0, [pc, #152]	; (800135c <HAL_QSPI_MspInit+0x138>)
 80012c4:	f000 ff3e 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c8:	2340      	movs	r3, #64	; 0x40
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d8:	2309      	movs	r3, #9
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	481f      	ldr	r0, [pc, #124]	; (8001360 <HAL_QSPI_MspInit+0x13c>)
 80012e4:	f000 ff2e 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012fa:	230a      	movs	r3, #10
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4816      	ldr	r0, [pc, #88]	; (8001360 <HAL_QSPI_MspInit+0x13c>)
 8001306:	f000 ff1d 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130a:	2304      	movs	r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131a:	2309      	movs	r3, #9
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <HAL_QSPI_MspInit+0x140>)
 8001326:	f000 ff0d 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800133a:	230a      	movs	r3, #10
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <HAL_QSPI_MspInit+0x140>)
 8001346:	f000 fefd 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	a0001000 	.word	0xa0001000
 8001358:	40023800 	.word	0x40023800
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40020400 	.word	0x40020400

08001368 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_SPI_MspInit+0x7c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d127      	bne.n	80013da <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_SPI_MspInit+0x80>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013ba:	2328      	movs	r3, #40	; 0x28
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ca:	2305      	movs	r3, #5
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_SPI_MspInit+0x84>)
 80013d6:	f000 feb5 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40013000 	.word	0x40013000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0aa      	sub	sp, #168	; 0xa8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2284      	movs	r2, #132	; 0x84
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fc49 	bl	8004ca8 <memset>
  if(huart->Instance==UART4)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d13c      	bne.n	800149a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fa04 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff fc4b 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001488:	2308      	movs	r3, #8
 800148a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_UART_MspInit+0xbc>)
 8001496:	f000 fe55 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37a8      	adds	r7, #168	; 0xa8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004c00 	.word	0x40004c00
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_FMC_MspInit+0x100>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d16d      	bne.n	80015a8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_FMC_MspInit+0x100>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	482c      	ldr	r0, [pc, #176]	; (80015b8 <HAL_FMC_MspInit+0x108>)
 8001506:	f000 fe1d 	bl	8002144 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230c      	movs	r3, #12
 800150c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151a:	230c      	movs	r3, #12
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4826      	ldr	r0, [pc, #152]	; (80015bc <HAL_FMC_MspInit+0x10c>)
 8001524:	f000 fe0e 	bl	8002144 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001538:	230c      	movs	r3, #12
 800153a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	481f      	ldr	r0, [pc, #124]	; (80015c0 <HAL_FMC_MspInit+0x110>)
 8001542:	f000 fdff 	bl	8002144 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001546:	f248 1311 	movw	r3, #33041	; 0x8111
 800154a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001558:	230c      	movs	r3, #12
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <HAL_FMC_MspInit+0x114>)
 8001562:	f000 fdef 	bl	8002144 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001566:	f64f 7383 	movw	r3, #65411	; 0xff83
 800156a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <HAL_FMC_MspInit+0x118>)
 8001582:	f000 fddf 	bl	8002144 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001586:	f24c 7303 	movw	r3, #50947	; 0xc703
 800158a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <HAL_FMC_MspInit+0x11c>)
 80015a2:	f000 fdcf 	bl	8002144 <HAL_GPIO_Init>
 80015a6:	e000      	b.n	80015aa <HAL_FMC_MspInit+0xfa>
    return;
 80015a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000032c 	.word	0x2000032c
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021400 	.word	0x40021400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40021800 	.word	0x40021800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40020c00 	.word	0x40020c00

080015d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015d8:	f7ff ff6a 	bl	80014b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f87a 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001660:	f7ff ffea 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800168a:	f003 fae9 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7fe ff3d 	bl	800050c <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016a0:	08004cf8 	.word	0x08004cf8
  ldr r2, =_sbss
 80016a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016a8:	20000334 	.word	0x20000334

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>

080016ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f000 fc9a 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b8:	200f      	movs	r0, #15
 80016ba:	f000 f805 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fb0f 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fca7 	bl	800203a <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 fc7d 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	20000330 	.word	0x20000330

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000330 	.word	0x20000330

08001768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e031      	b.n	80017e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff face 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_ADC_Init+0x84>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f970 	bl	8001a9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f023 0303 	bic.w	r3, r3, #3
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	ffffeefd 	.word	0xffffeefd

080017f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1c>
 8001808:	2302      	movs	r3, #2
 800180a:	e136      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x28a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d93a      	bls.n	8001892 <HAL_ADC_ConfigChannel+0xa2>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001824:	d035      	beq.n	8001892 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	3b1e      	subs	r3, #30
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a8d      	ldr	r2, [pc, #564]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68d9      	ldr	r1, [r3, #12]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186a:	e035      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	4603      	mov	r3, r0
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4403      	add	r3, r0
 8001884:	3b1e      	subs	r3, #30
 8001886:	409a      	lsls	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001890:	e022      	b.n	80018d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6919      	ldr	r1, [r3, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	2207      	movs	r2, #7
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43da      	mvns	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	400a      	ands	r2, r1
 80018b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6919      	ldr	r1, [r3, #16]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4403      	add	r3, r0
 80018ce:	409a      	lsls	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d824      	bhi.n	800192a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b05      	subs	r3, #5
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
 8001928:	e04c      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d824      	bhi.n	800197c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b23      	subs	r3, #35	; 0x23
 8001944:	221f      	movs	r2, #31
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b23      	subs	r3, #35	; 0x23
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
 800197a:	e023      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b41      	subs	r3, #65	; 0x41
 800198e:	221f      	movs	r2, #31
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43da      	mvns	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	400a      	ands	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b41      	subs	r3, #65	; 0x41
 80019b8:	fa00 f203 	lsl.w	r2, r0, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10a      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1f4>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10f      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d10b      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_ADC_ConfigChannel+0x29c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d12b      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_ADC_ConfigChannel+0x23a>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b11      	cmp	r3, #17
 8001a28:	d122      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_ADC_ConfigChannel+0x298>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9a      	lsrs	r2, r3, #18
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a62:	e002      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	10000012 	.word	0x10000012
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	40012300 	.word	0x40012300
 8001a94:	20000000 	.word	0x20000000
 8001a98:	431bde83 	.word	0x431bde83

08001a9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <ADC_Init+0x1ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <ADC_Init+0x1ec>)
 8001aaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001aae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <ADC_Init+0x1ec>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4973      	ldr	r1, [pc, #460]	; (8001c88 <ADC_Init+0x1ec>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <ADC_Init+0x1f0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e00f      	b.n	8001b96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0202 	bic.w	r2, r2, #2
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	005a      	lsls	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	035a      	lsls	r2, r3, #13
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	e007      	b.n	8001c0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	051a      	lsls	r2, r3, #20
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6899      	ldr	r1, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4e:	025a      	lsls	r2, r3, #9
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	029a      	lsls	r2, r3, #10
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	0f000001 	.word	0x0f000001

08001c90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0ed      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff f87a 	bl	8000da8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc4:	f7ff fd44 	bl	8001750 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cca:	e012      	b.n	8001cf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ccc:	f7ff fd40 	bl	8001750 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d90b      	bls.n	8001cf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2205      	movs	r2, #5
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0c5      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0e5      	beq.n	8001ccc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0202 	bic.w	r2, r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d10:	f7ff fd1e 	bl	8001750 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d16:	e012      	b.n	8001d3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d18:	f7ff fd1a 	bl	8001750 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d90b      	bls.n	8001d3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e09f      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e5      	bne.n	8001d18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e1b      	ldrb	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e5b      	ldrb	r3, [r3, #25]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e9b      	ldrb	r3, [r3, #26]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0220 	bic.w	r2, r2, #32
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7edb      	ldrb	r3, [r3, #27]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0210 	bic.w	r2, r2, #16
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e007      	b.n	8001df4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0210 	orr.w	r2, r2, #16
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7f1b      	ldrb	r3, [r3, #28]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d108      	bne.n	8001e0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7f5b      	ldrb	r3, [r3, #29]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0204 	orr.w	r2, r2, #4
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e007      	b.n	8001e48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	05fa0000 	.word	0x05fa0000

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff47 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff5c 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffb0 	bl	8001fa8 <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002058:	f3bf 8f5f 	dmb	sy
}
 800205c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_MPU_Disable+0x28>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_MPU_Disable+0x28>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_MPU_Disable+0x2c>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00
 8002080:	e000ed90 	.word	0xe000ed90

08002084 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_MPU_Enable+0x38>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_MPU_Enable+0x3c>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_MPU_Enable+0x3c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020a2:	f3bf 8f4f 	dsb	sy
}
 80020a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020a8:	f3bf 8f6f 	isb	sy
}
 80020ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed90 	.word	0xe000ed90
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	785a      	ldrb	r2, [r3, #1]
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_MPU_ConfigRegion+0x7c>)
 80020d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_MPU_ConfigRegion+0x7c>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_MPU_ConfigRegion+0x7c>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_MPU_ConfigRegion+0x7c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7b1b      	ldrb	r3, [r3, #12]
 80020ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7adb      	ldrb	r3, [r3, #11]
 80020f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7a9b      	ldrb	r3, [r3, #10]
 80020fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7b5b      	ldrb	r3, [r3, #13]
 8002102:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7b9b      	ldrb	r3, [r3, #14]
 800210a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800210c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7bdb      	ldrb	r3, [r3, #15]
 8002112:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7a5b      	ldrb	r3, [r3, #9]
 800211a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800211c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7a1b      	ldrb	r3, [r3, #8]
 8002122:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002124:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800212e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002130:	6113      	str	r3, [r2, #16]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed90 	.word	0xe000ed90

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e175      	b.n	8002450 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8164 	bne.w	800244a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x56>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80be 	beq.w	800244a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_GPIO_Init+0x324>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_GPIO_Init+0x324>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_GPIO_Init+0x324>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022e6:	4a61      	ldr	r2, [pc, #388]	; (800246c <HAL_GPIO_Init+0x328>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_GPIO_Init+0x32c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d037      	beq.n	8002382 <HAL_GPIO_Init+0x23e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x330>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_GPIO_Init+0x23a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a56      	ldr	r2, [pc, #344]	; (8002478 <HAL_GPIO_Init+0x334>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02b      	beq.n	800237a <HAL_GPIO_Init+0x236>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_GPIO_Init+0x338>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x232>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_GPIO_Init+0x33c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a53      	ldr	r2, [pc, #332]	; (8002484 <HAL_GPIO_Init+0x340>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x22a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_GPIO_Init+0x344>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a51      	ldr	r2, [pc, #324]	; (800248c <HAL_GPIO_Init+0x348>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_GPIO_Init+0x34c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	; (8002494 <HAL_GPIO_Init+0x350>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x21a>
 800235a:	2309      	movs	r3, #9
 800235c:	e012      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800235e:	230a      	movs	r3, #10
 8002360:	e010      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002362:	2308      	movs	r3, #8
 8002364:	e00e      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002366:	2307      	movs	r3, #7
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800236a:	2306      	movs	r3, #6
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x240>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x240>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	; (800246c <HAL_GPIO_Init+0x328>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_GPIO_Init+0x354>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_GPIO_Init+0x354>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_GPIO_Init+0x354>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <HAL_GPIO_Init+0x354>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_GPIO_Init+0x354>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_GPIO_Init+0x354>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_GPIO_Init+0x354>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <HAL_GPIO_Init+0x354>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae86 	bls.w	8002164 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40022000 	.word	0x40022000
 8002494:	40022400 	.word	0x40022400
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e08b      	b.n	80025fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fcee 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e006      	b.n	8002558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d108      	bne.n	8002572 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e007      	b.n	8002582 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_I2C_Init+0x134>)
 800258e:	430b      	orrs	r3, r1
 8002590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69d9      	ldr	r1, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	02008000 	.word	0x02008000

08002608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	d138      	bne.n	8002690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002628:	2302      	movs	r3, #2
 800262a:	e032      	b.n	8002692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800265a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d139      	bne.n	8002728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026be:	2302      	movs	r3, #2
 80026c0:	e033      	b.n	800272a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0bf      	b.n	80028ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fc1a 	bl	8000f98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800277a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6999      	ldr	r1, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002790:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <HAL_LTDC_Init+0x19c>)
 80027ac:	400b      	ands	r3, r1
 80027ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_LTDC_Init+0x19c>)
 80027da:	400b      	ands	r3, r1
 80027dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68d9      	ldr	r1, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6919      	ldr	r1, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_LTDC_Init+0x19c>)
 8002808:	400b      	ands	r3, r1
 800280a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6959      	ldr	r1, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_LTDC_Init+0x19c>)
 8002836:	400b      	ands	r3, r1
 8002838:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0206 	orr.w	r2, r2, #6
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	f000f800 	.word	0xf000f800

080028d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_LTDC_ConfigLayer+0x1a>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e02c      	b.n	800294c <HAL_LTDC_ConfigLayer+0x74>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2134      	movs	r1, #52	; 0x34
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
 8002918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800291a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800291e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f811 	bl	8002954 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bdb0      	pop	{r4, r5, r7, pc}

08002954 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	4413      	add	r3, r2
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	01db      	lsls	r3, r3, #7
 8002980:	4413      	add	r3, r2
 8002982:	3384      	adds	r3, #132	; 0x84
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	4611      	mov	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	01d2      	lsls	r2, r2, #7
 8002990:	440a      	add	r2, r1
 8002992:	3284      	adds	r2, #132	; 0x84
 8002994:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002998:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	01db      	lsls	r3, r3, #7
 80029b8:	440b      	add	r3, r1
 80029ba:	3384      	adds	r3, #132	; 0x84
 80029bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	4413      	add	r3, r2
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	01db      	lsls	r3, r3, #7
 80029e2:	4413      	add	r3, r2
 80029e4:	3384      	adds	r3, #132	; 0x84
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4611      	mov	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	01d2      	lsls	r2, r2, #7
 80029f2:	440a      	add	r2, r1
 80029f4:	3284      	adds	r2, #132	; 0x84
 80029f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	4413      	add	r3, r2
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	01db      	lsls	r3, r3, #7
 8002a18:	440b      	add	r3, r1
 8002a1a:	3384      	adds	r3, #132	; 0x84
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	01db      	lsls	r3, r3, #7
 8002a2e:	4413      	add	r3, r2
 8002a30:	3384      	adds	r3, #132	; 0x84
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	01d2      	lsls	r2, r2, #7
 8002a3e:	440a      	add	r2, r1
 8002a40:	3284      	adds	r2, #132	; 0x84
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	4413      	add	r3, r2
 8002a54:	3384      	adds	r3, #132	; 0x84
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	01db      	lsls	r3, r3, #7
 8002a84:	4413      	add	r3, r2
 8002a86:	3384      	adds	r3, #132	; 0x84
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	01db      	lsls	r3, r3, #7
 8002a94:	4413      	add	r3, r2
 8002a96:	3384      	adds	r3, #132	; 0x84
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	01db      	lsls	r3, r3, #7
 8002ab8:	440b      	add	r3, r1
 8002aba:	3384      	adds	r3, #132	; 0x84
 8002abc:	4619      	mov	r1, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	01db      	lsls	r3, r3, #7
 8002ace:	4413      	add	r3, r2
 8002ad0:	3384      	adds	r3, #132	; 0x84
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	01d2      	lsls	r2, r2, #7
 8002ade:	440a      	add	r2, r1
 8002ae0:	3284      	adds	r2, #132	; 0x84
 8002ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	01db      	lsls	r3, r3, #7
 8002af2:	4413      	add	r3, r2
 8002af4:	3384      	adds	r3, #132	; 0x84
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	01db      	lsls	r3, r3, #7
 8002b08:	4413      	add	r3, r2
 8002b0a:	3384      	adds	r3, #132	; 0x84
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	01db      	lsls	r3, r3, #7
 8002b18:	440b      	add	r3, r1
 8002b1a:	3384      	adds	r3, #132	; 0x84
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <LTDC_SetConfig+0x32c>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	6809      	ldr	r1, [r1, #0]
 8002b30:	4608      	mov	r0, r1
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	01c9      	lsls	r1, r1, #7
 8002b36:	4401      	add	r1, r0
 8002b38:	3184      	adds	r1, #132	; 0x84
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	01db      	lsls	r3, r3, #7
 8002b48:	4413      	add	r3, r2
 8002b4a:	3384      	adds	r3, #132	; 0x84
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	01db      	lsls	r3, r3, #7
 8002b58:	4413      	add	r3, r2
 8002b5a:	3384      	adds	r3, #132	; 0x84
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3384      	adds	r3, #132	; 0x84
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b80:	2304      	movs	r3, #4
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e01b      	b.n	8002bbe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e014      	b.n	8002bbe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d00b      	beq.n	8002bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d007      	beq.n	8002bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d102      	bne.n	8002bba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e001      	b.n	8002bbe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	01db      	lsls	r3, r3, #7
 8002bc8:	4413      	add	r3, r2
 8002bca:	3384      	adds	r3, #132	; 0x84
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	01d2      	lsls	r2, r2, #7
 8002bd8:	440a      	add	r2, r1
 8002bda:	3284      	adds	r2, #132	; 0x84
 8002bdc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002be0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	69f9      	ldr	r1, [r7, #28]
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4608      	mov	r0, r1
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	01c9      	lsls	r1, r1, #7
 8002c0a:	4401      	add	r1, r0
 8002c0c:	3184      	adds	r1, #132	; 0x84
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	01db      	lsls	r3, r3, #7
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3384      	adds	r3, #132	; 0x84
 8002c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4619      	mov	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3384      	adds	r3, #132	; 0x84
 8002c30:	4619      	mov	r1, r3
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <LTDC_SetConfig+0x330>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	01db      	lsls	r3, r3, #7
 8002c42:	4413      	add	r3, r2
 8002c44:	3384      	adds	r3, #132	; 0x84
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	4413      	add	r3, r2
 8002c5a:	3384      	adds	r3, #132	; 0x84
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4611      	mov	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	01d2      	lsls	r2, r2, #7
 8002c68:	440a      	add	r2, r1
 8002c6a:	3284      	adds	r2, #132	; 0x84
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	fffff8f8 	.word	0xfffff8f8
 8002c84:	fffff800 	.word	0xfffff800

08002c88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb6:	f7fe fd4b 	bl	8001750 <HAL_GetTick>
 8002cba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cbc:	e009      	b.n	8002cd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cbe:	f7fe fd47 	bl	8001750 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e022      	b.n	8002d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cde:	d1ee      	bne.n	8002cbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cec:	f7fe fd30 	bl	8001750 <HAL_GetTick>
 8002cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cf2:	e009      	b.n	8002d08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf4:	f7fe fd2c 	bl	8001750 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d02:	d901      	bls.n	8002d08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e007      	b.n	8002d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d14:	d1ee      	bne.n	8002cf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000

08002d28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7fe fd0e 	bl	8001750 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e067      	b.n	8002e10 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe fa65 	bl	8001224 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d5a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f85e 	bl	8002e20 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	2120      	movs	r1, #32
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f856 	bl	8002e3c <QSPI_WaitFlagStateUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d135      	bne.n	8002e06 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_QSPI_Init+0xf0>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	0611      	lsls	r1, r2, #24
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	69d2      	ldr	r2, [r2, #28]
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a12      	ldr	r2, [r2, #32]
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_QSPI_Init+0xf4>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6912      	ldr	r2, [r2, #16]
 8002dd2:	0411      	lsls	r1, r2, #16
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6952      	ldr	r2, [r2, #20]
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6992      	ldr	r2, [r2, #24]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00ffff2f 	.word	0x00ffff2f
 8002e1c:	ffe0f8fe 	.word	0xffe0f8fe

08002e20 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e4c:	e01a      	b.n	8002e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d016      	beq.n	8002e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fc7b 	bl	8001750 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e00e      	b.n	8002ea2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1d6      	bne.n	8002e4e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e291      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed0:	4b96      	ldr	r3, [pc, #600]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002edc:	4b93      	ldr	r3, [pc, #588]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d112      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62>
 8002ee8:	4b90      	ldr	r3, [pc, #576]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef4:	d10b      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d06c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x130>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d168      	bne.n	8002fdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e26b      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x7a>
 8002f18:	4b84      	ldr	r3, [pc, #528]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a83      	ldr	r2, [pc, #524]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e02e      	b.n	8002f84 <HAL_RCC_OscConfig+0xd8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x9c>
 8002f2e:	4b7f      	ldr	r3, [pc, #508]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7e      	ldr	r2, [pc, #504]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b7c      	ldr	r3, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7b      	ldr	r2, [pc, #492]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e01d      	b.n	8002f84 <HAL_RCC_OscConfig+0xd8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0xc0>
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a72      	ldr	r2, [pc, #456]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0xd8>
 8002f6c:	4b6f      	ldr	r3, [pc, #444]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6e      	ldr	r2, [pc, #440]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6b      	ldr	r2, [pc, #428]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fbe0 	bl	8001750 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe fbdc 	bl	8001750 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e21f      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b61      	ldr	r3, [pc, #388]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe8>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fbcc 	bl	8001750 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fbc8 	bl	8001750 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e20b      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x110>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d069      	beq.n	80030be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fea:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d11c      	bne.n	800303c <HAL_RCC_OscConfig+0x190>
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x17a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1df      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	493d      	ldr	r1, [pc, #244]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	e040      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a38      	ldr	r2, [pc, #224]	; (800312c <HAL_RCC_OscConfig+0x280>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fb7e 	bl	8001750 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fb7a 	bl	8001750 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1bd      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4929      	ldr	r1, [pc, #164]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
 800308a:	e018      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fb5a 	bl	8001750 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fb56 	bl	8001750 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e199      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d038      	beq.n	800313c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d019      	beq.n	8003106 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_RCC_OscConfig+0x280>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <HAL_RCC_OscConfig+0x280>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fb37 	bl	8001750 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe fb33 	bl	8001750 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e176      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_OscConfig+0x280>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x23a>
 8003104:	e01a      	b.n	800313c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x280>)
 8003108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_RCC_OscConfig+0x280>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe fb1d 	bl	8001750 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311a:	f7fe fb19 	bl	8001750 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d903      	bls.n	8003130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e15c      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
 800312c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b91      	ldr	r3, [pc, #580]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a4 	beq.w	8003292 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b8b      	ldr	r3, [pc, #556]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a87      	ldr	r2, [pc, #540]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003172:	4b82      	ldr	r3, [pc, #520]	; (800337c <HAL_RCC_OscConfig+0x4d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800317e:	4b7f      	ldr	r3, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x4d0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7e      	ldr	r2, [pc, #504]	; (800337c <HAL_RCC_OscConfig+0x4d0>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7fe fae1 	bl	8001750 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe fadd 	bl	8001750 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b64      	cmp	r3, #100	; 0x64
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e120      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x31a>
 80031b8:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_OscConfig+0x376>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x33c>
 80031ce:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b67      	ldr	r3, [pc, #412]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a66      	ldr	r2, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	e01c      	b.n	8003222 <HAL_RCC_OscConfig+0x376>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d10c      	bne.n	800320a <HAL_RCC_OscConfig+0x35e>
 80031f0:	4b61      	ldr	r3, [pc, #388]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	f043 0304 	orr.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	e00b      	b.n	8003222 <HAL_RCC_OscConfig+0x376>
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a5a      	ldr	r2, [pc, #360]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
 8003216:	4b58      	ldr	r3, [pc, #352]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a57      	ldr	r2, [pc, #348]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fa91 	bl	8001750 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fa8d 	bl	8001750 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0ce      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCC_OscConfig+0x386>
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fa7b 	bl	8001750 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fa77 	bl	8001750 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0b8      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ee      	bne.n	800325e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d105      	bne.n	8003292 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80a4 	beq.w	80033e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d06b      	beq.n	8003380 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d149      	bne.n	8003344 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80032b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fa48 	bl	8001750 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fa44 	bl	8001750 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e087      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	4313      	orrs	r3, r2
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800330e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fa18 	bl	8001750 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fa14 	bl	8001750 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e057      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x478>
 8003342:	e04f      	b.n	80033e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe f9fe 	bl	8001750 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe f9fa 	bl	8001750 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e03d      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x4ac>
 8003376:	e035      	b.n	80033e4 <HAL_RCC_OscConfig+0x538>
 8003378:	40023800 	.word	0x40023800
 800337c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x544>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d028      	beq.n	80033e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d121      	bne.n	80033e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d11a      	bne.n	80033e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d111      	bne.n	80033e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0d0      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d910      	bls.n	800343c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 020f 	bic.w	r2, r3, #15
 8003422:	4965      	ldr	r1, [pc, #404]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0b8      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003454:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a58      	ldr	r2, [pc, #352]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 800345a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800345e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800346c:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a52      	ldr	r2, [pc, #328]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003476:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	494d      	ldr	r1, [pc, #308]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d040      	beq.n	8003518 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d115      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e07f      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	4b41      	ldr	r3, [pc, #260]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e073      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06b      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b39      	ldr	r3, [pc, #228]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4936      	ldr	r1, [pc, #216]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fe f932 	bl	8001750 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fe f92e 	bl	8001750 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e053      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d210      	bcs.n	8003548 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 020f 	bic.w	r2, r3, #15
 800352e:	4922      	ldr	r1, [pc, #136]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e032      	b.n	80035ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4916      	ldr	r1, [pc, #88]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	490e      	ldr	r1, [pc, #56]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003586:	f000 f821 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 800358a:	4602      	mov	r2, r0
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	490a      	ldr	r1, [pc, #40]	; (80035c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003598:	5ccb      	ldrb	r3, [r1, r3]
 800359a:	fa22 f303 	lsr.w	r3, r2, r3
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1d0>)
 80035a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1d4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe f88e 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023c00 	.word	0x40023c00
 80035bc:	40023800 	.word	0x40023800
 80035c0:	08004cd0 	.word	0x08004cd0
 80035c4:	20000000 	.word	0x20000000
 80035c8:	20000004 	.word	0x20000004

080035cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b094      	sub	sp, #80	; 0x50
 80035d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
 80035d8:	2300      	movs	r3, #0
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	2300      	movs	r3, #0
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e4:	4b79      	ldr	r3, [pc, #484]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d00d      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x40>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	f200 80e1 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x34>
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x3a>
 80035fe:	e0db      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003604:	e0db      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003606:	4b72      	ldr	r3, [pc, #456]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360a:	e0d8      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	2200      	movs	r2, #0
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
 800362c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
 800363a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800363e:	4622      	mov	r2, r4
 8003640:	462b      	mov	r3, r5
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	0159      	lsls	r1, r3, #5
 800364c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003650:	0150      	lsls	r0, r2, #5
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4621      	mov	r1, r4
 8003658:	1a51      	subs	r1, r2, r1
 800365a:	6139      	str	r1, [r7, #16]
 800365c:	4629      	mov	r1, r5
 800365e:	eb63 0301 	sbc.w	r3, r3, r1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003670:	4659      	mov	r1, fp
 8003672:	018b      	lsls	r3, r1, #6
 8003674:	4651      	mov	r1, sl
 8003676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800367a:	4651      	mov	r1, sl
 800367c:	018a      	lsls	r2, r1, #6
 800367e:	4651      	mov	r1, sl
 8003680:	ebb2 0801 	subs.w	r8, r2, r1
 8003684:	4659      	mov	r1, fp
 8003686:	eb63 0901 	sbc.w	r9, r3, r1
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800369a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800369e:	4690      	mov	r8, r2
 80036a0:	4699      	mov	r9, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	eb18 0303 	adds.w	r3, r8, r3
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	462b      	mov	r3, r5
 80036ac:	eb49 0303 	adc.w	r3, r9, r3
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	2200      	movs	r2, #0
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036dc:	f7fc fd94 	bl	8000208 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e8:	e058      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	2200      	movs	r2, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	4611      	mov	r1, r2
 80036f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	f04f 0000 	mov.w	r0, #0
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	0159      	lsls	r1, r3, #5
 8003712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003716:	0150      	lsls	r0, r2, #5
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4641      	mov	r1, r8
 800371e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb63 0b01 	sbc.w	fp, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003738:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800373c:	ebb2 040a 	subs.w	r4, r2, sl
 8003740:	eb63 050b 	sbc.w	r5, r3, fp
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	00eb      	lsls	r3, r5, #3
 800374e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003752:	00e2      	lsls	r2, r4, #3
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4643      	mov	r3, r8
 800375a:	18e3      	adds	r3, r4, r3
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	464b      	mov	r3, r9
 8003760:	eb45 0303 	adc.w	r3, r5, r3
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003772:	4629      	mov	r1, r5
 8003774:	028b      	lsls	r3, r1, #10
 8003776:	4621      	mov	r1, r4
 8003778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800377c:	4621      	mov	r1, r4
 800377e:	028a      	lsls	r2, r1, #10
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003786:	2200      	movs	r2, #0
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	61fa      	str	r2, [r7, #28]
 800378c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003790:	f7fc fd3a 	bl	8000208 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0x200>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3750      	adds	r7, #80	; 0x50
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400

080037d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	08004ce0 	.word	0x08004ce0

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffdc 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0b5b      	lsrs	r3, r3, #13
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08004ce0 	.word	0x08004ce0

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003864:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	4964      	ldr	r1, [pc, #400]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d017      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003896:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	4959      	ldr	r1, [pc, #356]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b4:	d101      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d017      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038d2:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	494a      	ldr	r1, [pc, #296]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 808b 	beq.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a39      	ldr	r2, [pc, #228]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
 800392c:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fd ff04 	bl	8001750 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fd ff00 	bl	8001750 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e357      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800395e:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d035      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d02e      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003988:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d114      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fec8 	bl	8001750 <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fd fec4 	bl	8001750 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e319      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f2:	d111      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	4901      	ldr	r1, [pc, #4]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000
 8003a14:	0ffffcff 	.word	0x0ffffcff
 8003a18:	4baa      	ldr	r3, [pc, #680]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4aa9      	ldr	r2, [pc, #676]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a22:	6093      	str	r3, [r2, #8]
 8003a24:	4ba7      	ldr	r3, [pc, #668]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	49a4      	ldr	r1, [pc, #656]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a42:	4ba0      	ldr	r3, [pc, #640]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a48:	4a9e      	ldr	r2, [pc, #632]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a52:	4b9c      	ldr	r3, [pc, #624]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	4999      	ldr	r1, [pc, #612]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a70:	4b94      	ldr	r3, [pc, #592]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7e:	4991      	ldr	r1, [pc, #580]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a92:	4b8c      	ldr	r3, [pc, #560]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa0:	4988      	ldr	r1, [pc, #544]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab4:	4b83      	ldr	r3, [pc, #524]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac2:	4980      	ldr	r1, [pc, #512]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ad6:	4b7b      	ldr	r3, [pc, #492]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4977      	ldr	r1, [pc, #476]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af8:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	496f      	ldr	r1, [pc, #444]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f023 020c 	bic.w	r2, r3, #12
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b28:	4966      	ldr	r1, [pc, #408]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	495e      	ldr	r1, [pc, #376]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b5e:	4b59      	ldr	r3, [pc, #356]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	4955      	ldr	r1, [pc, #340]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b80:	4b50      	ldr	r3, [pc, #320]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	494d      	ldr	r1, [pc, #308]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ba2:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	4944      	ldr	r1, [pc, #272]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bc4:	4b3f      	ldr	r3, [pc, #252]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	493c      	ldr	r1, [pc, #240]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	4933      	ldr	r1, [pc, #204]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c08:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c16:	492b      	ldr	r1, [pc, #172]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d011      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c38:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c78:	4912      	ldr	r1, [pc, #72]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9c:	4909      	ldr	r1, [pc, #36]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d006      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80d9 	beq.w	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a01      	ldr	r2, [pc, #4]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd fd41 	bl	8001750 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd2:	f7fd fd3d 	bl	8001750 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e194      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d021      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11d      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d04:	4b64      	ldr	r3, [pc, #400]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d12:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	019a      	lsls	r2, r3, #6
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	071b      	lsls	r3, r3, #28
 8003d38:	4957      	ldr	r1, [pc, #348]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02e      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6a:	d129      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d80:	0f1b      	lsrs	r3, r3, #28
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	019a      	lsls	r2, r3, #6
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	071b      	lsls	r3, r3, #28
 8003da0:	493d      	ldr	r1, [pc, #244]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dae:	f023 021f 	bic.w	r2, r3, #31
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	3b01      	subs	r3, #1
 8003db8:	4937      	ldr	r1, [pc, #220]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	0e1b      	lsrs	r3, r3, #24
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de0:	0f1b      	lsrs	r3, r3, #28
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	019a      	lsls	r2, r3, #6
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	071b      	lsls	r3, r3, #28
 8003e00:	4925      	ldr	r1, [pc, #148]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d011      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	071b      	lsls	r3, r3, #28
 8003e30:	4919      	ldr	r1, [pc, #100]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fc84 	bl	8001750 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e4c:	f7fd fc80 	bl	8001750 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0d7      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	f040 80cd 	bne.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fc67 	bl	8001750 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e86:	f7fd fc63 	bl	8001750 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d903      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0ba      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d0ed      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d12a      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ee0:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	0f1b      	lsrs	r3, r3, #28
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	071b      	lsls	r3, r3, #28
 8003f06:	4944      	ldr	r1, [pc, #272]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f0e:	4b42      	ldr	r3, [pc, #264]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	493d      	ldr	r1, [pc, #244]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3c:	d11d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	0e1b      	lsrs	r3, r3, #24
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	0f1b      	lsrs	r3, r3, #28
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	019a      	lsls	r2, r3, #6
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	4929      	ldr	r1, [pc, #164]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	019a      	lsls	r2, r3, #6
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	071b      	lsls	r3, r3, #28
 8003fba:	4917      	ldr	r1, [pc, #92]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4911      	ldr	r1, [pc, #68]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fbb4 	bl	8001750 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fec:	f7fd fbb0 	bl	8001750 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e007      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800400a:	d1ef      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e025      	b.n	800407c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fd fac3 	bl	80015d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f000 fd39 	bl	8004ad4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	f000 fd8d 	bl	8004b8c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e09d      	b.n	80041d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a6:	d009      	beq.n	80040bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	e005      	b.n	80040bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd f946 	bl	8001368 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fc:	d902      	bls.n	8004104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e002      	b.n	800410a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004112:	d007      	beq.n	8004124 <HAL_SPI_Init+0xa0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	ea42 0103 	orr.w	r1, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	0c1b      	lsrs	r3, r3, #16
 8004180:	f003 0204 	and.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e040      	b.n	800426e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fd f8f7 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2224      	movs	r2, #36	; 0x24
 8004206:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa8d 	bl	8004740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f826 	bl	8004278 <UART_SetConfig>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e01b      	b.n	800426e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004244:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004254:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fb0c 	bl	8004884 <UART_CheckIdleState>
 800426c:	4603      	mov	r3, r0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4ba6      	ldr	r3, [pc, #664]	; (800453c <UART_SetConfig+0x2c4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a94      	ldr	r2, [pc, #592]	; (8004540 <UART_SetConfig+0x2c8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d120      	bne.n	8004336 <UART_SetConfig+0xbe>
 80042f4:	4b93      	ldr	r3, [pc, #588]	; (8004544 <UART_SetConfig+0x2cc>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d816      	bhi.n	8004330 <UART_SetConfig+0xb8>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0x90>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004325 	.word	0x08004325
 8004310:	0800431f 	.word	0x0800431f
 8004314:	0800432b 	.word	0x0800432b
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e150      	b.n	80045c0 <UART_SetConfig+0x348>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e14d      	b.n	80045c0 <UART_SetConfig+0x348>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e14a      	b.n	80045c0 <UART_SetConfig+0x348>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e147      	b.n	80045c0 <UART_SetConfig+0x348>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e144      	b.n	80045c0 <UART_SetConfig+0x348>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a83      	ldr	r2, [pc, #524]	; (8004548 <UART_SetConfig+0x2d0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d132      	bne.n	80043a6 <UART_SetConfig+0x12e>
 8004340:	4b80      	ldr	r3, [pc, #512]	; (8004544 <UART_SetConfig+0x2cc>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d828      	bhi.n	80043a0 <UART_SetConfig+0x128>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0xdc>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004389 	.word	0x08004389
 8004358:	080043a1 	.word	0x080043a1
 800435c:	080043a1 	.word	0x080043a1
 8004360:	080043a1 	.word	0x080043a1
 8004364:	08004395 	.word	0x08004395
 8004368:	080043a1 	.word	0x080043a1
 800436c:	080043a1 	.word	0x080043a1
 8004370:	080043a1 	.word	0x080043a1
 8004374:	0800438f 	.word	0x0800438f
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a1 	.word	0x080043a1
 8004384:	0800439b 	.word	0x0800439b
 8004388:	2300      	movs	r3, #0
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e118      	b.n	80045c0 <UART_SetConfig+0x348>
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e115      	b.n	80045c0 <UART_SetConfig+0x348>
 8004394:	2304      	movs	r3, #4
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e112      	b.n	80045c0 <UART_SetConfig+0x348>
 800439a:	2308      	movs	r3, #8
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e10f      	b.n	80045c0 <UART_SetConfig+0x348>
 80043a0:	2310      	movs	r3, #16
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e10c      	b.n	80045c0 <UART_SetConfig+0x348>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a68      	ldr	r2, [pc, #416]	; (800454c <UART_SetConfig+0x2d4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d120      	bne.n	80043f2 <UART_SetConfig+0x17a>
 80043b0:	4b64      	ldr	r3, [pc, #400]	; (8004544 <UART_SetConfig+0x2cc>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ba:	2b30      	cmp	r3, #48	; 0x30
 80043bc:	d013      	beq.n	80043e6 <UART_SetConfig+0x16e>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d814      	bhi.n	80043ec <UART_SetConfig+0x174>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d009      	beq.n	80043da <UART_SetConfig+0x162>
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d810      	bhi.n	80043ec <UART_SetConfig+0x174>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <UART_SetConfig+0x15c>
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d006      	beq.n	80043e0 <UART_SetConfig+0x168>
 80043d2:	e00b      	b.n	80043ec <UART_SetConfig+0x174>
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e0f2      	b.n	80045c0 <UART_SetConfig+0x348>
 80043da:	2302      	movs	r3, #2
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e0ef      	b.n	80045c0 <UART_SetConfig+0x348>
 80043e0:	2304      	movs	r3, #4
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e0ec      	b.n	80045c0 <UART_SetConfig+0x348>
 80043e6:	2308      	movs	r3, #8
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e0e9      	b.n	80045c0 <UART_SetConfig+0x348>
 80043ec:	2310      	movs	r3, #16
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e0e6      	b.n	80045c0 <UART_SetConfig+0x348>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a56      	ldr	r2, [pc, #344]	; (8004550 <UART_SetConfig+0x2d8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d120      	bne.n	800443e <UART_SetConfig+0x1c6>
 80043fc:	4b51      	ldr	r3, [pc, #324]	; (8004544 <UART_SetConfig+0x2cc>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004406:	2bc0      	cmp	r3, #192	; 0xc0
 8004408:	d013      	beq.n	8004432 <UART_SetConfig+0x1ba>
 800440a:	2bc0      	cmp	r3, #192	; 0xc0
 800440c:	d814      	bhi.n	8004438 <UART_SetConfig+0x1c0>
 800440e:	2b80      	cmp	r3, #128	; 0x80
 8004410:	d009      	beq.n	8004426 <UART_SetConfig+0x1ae>
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d810      	bhi.n	8004438 <UART_SetConfig+0x1c0>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <UART_SetConfig+0x1a8>
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d006      	beq.n	800442c <UART_SetConfig+0x1b4>
 800441e:	e00b      	b.n	8004438 <UART_SetConfig+0x1c0>
 8004420:	2300      	movs	r3, #0
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e0cc      	b.n	80045c0 <UART_SetConfig+0x348>
 8004426:	2302      	movs	r3, #2
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e0c9      	b.n	80045c0 <UART_SetConfig+0x348>
 800442c:	2304      	movs	r3, #4
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e0c6      	b.n	80045c0 <UART_SetConfig+0x348>
 8004432:	2308      	movs	r3, #8
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e0c3      	b.n	80045c0 <UART_SetConfig+0x348>
 8004438:	2310      	movs	r3, #16
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e0c0      	b.n	80045c0 <UART_SetConfig+0x348>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a44      	ldr	r2, [pc, #272]	; (8004554 <UART_SetConfig+0x2dc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d125      	bne.n	8004494 <UART_SetConfig+0x21c>
 8004448:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <UART_SetConfig+0x2cc>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004456:	d017      	beq.n	8004488 <UART_SetConfig+0x210>
 8004458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445c:	d817      	bhi.n	800448e <UART_SetConfig+0x216>
 800445e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004462:	d00b      	beq.n	800447c <UART_SetConfig+0x204>
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d811      	bhi.n	800448e <UART_SetConfig+0x216>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <UART_SetConfig+0x1fe>
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d006      	beq.n	8004482 <UART_SetConfig+0x20a>
 8004474:	e00b      	b.n	800448e <UART_SetConfig+0x216>
 8004476:	2300      	movs	r3, #0
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e0a1      	b.n	80045c0 <UART_SetConfig+0x348>
 800447c:	2302      	movs	r3, #2
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e09e      	b.n	80045c0 <UART_SetConfig+0x348>
 8004482:	2304      	movs	r3, #4
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e09b      	b.n	80045c0 <UART_SetConfig+0x348>
 8004488:	2308      	movs	r3, #8
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e098      	b.n	80045c0 <UART_SetConfig+0x348>
 800448e:	2310      	movs	r3, #16
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e095      	b.n	80045c0 <UART_SetConfig+0x348>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <UART_SetConfig+0x2e0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d125      	bne.n	80044ea <UART_SetConfig+0x272>
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <UART_SetConfig+0x2cc>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ac:	d017      	beq.n	80044de <UART_SetConfig+0x266>
 80044ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b2:	d817      	bhi.n	80044e4 <UART_SetConfig+0x26c>
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	d00b      	beq.n	80044d2 <UART_SetConfig+0x25a>
 80044ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044be:	d811      	bhi.n	80044e4 <UART_SetConfig+0x26c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <UART_SetConfig+0x254>
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c8:	d006      	beq.n	80044d8 <UART_SetConfig+0x260>
 80044ca:	e00b      	b.n	80044e4 <UART_SetConfig+0x26c>
 80044cc:	2301      	movs	r3, #1
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e076      	b.n	80045c0 <UART_SetConfig+0x348>
 80044d2:	2302      	movs	r3, #2
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e073      	b.n	80045c0 <UART_SetConfig+0x348>
 80044d8:	2304      	movs	r3, #4
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e070      	b.n	80045c0 <UART_SetConfig+0x348>
 80044de:	2308      	movs	r3, #8
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e06d      	b.n	80045c0 <UART_SetConfig+0x348>
 80044e4:	2310      	movs	r3, #16
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e06a      	b.n	80045c0 <UART_SetConfig+0x348>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <UART_SetConfig+0x2e4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d138      	bne.n	8004566 <UART_SetConfig+0x2ee>
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <UART_SetConfig+0x2cc>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004502:	d017      	beq.n	8004534 <UART_SetConfig+0x2bc>
 8004504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004508:	d82a      	bhi.n	8004560 <UART_SetConfig+0x2e8>
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	d00b      	beq.n	8004528 <UART_SetConfig+0x2b0>
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d824      	bhi.n	8004560 <UART_SetConfig+0x2e8>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <UART_SetConfig+0x2aa>
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451e:	d006      	beq.n	800452e <UART_SetConfig+0x2b6>
 8004520:	e01e      	b.n	8004560 <UART_SetConfig+0x2e8>
 8004522:	2300      	movs	r3, #0
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e04b      	b.n	80045c0 <UART_SetConfig+0x348>
 8004528:	2302      	movs	r3, #2
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e048      	b.n	80045c0 <UART_SetConfig+0x348>
 800452e:	2304      	movs	r3, #4
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e045      	b.n	80045c0 <UART_SetConfig+0x348>
 8004534:	2308      	movs	r3, #8
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e042      	b.n	80045c0 <UART_SetConfig+0x348>
 800453a:	bf00      	nop
 800453c:	efff69f3 	.word	0xefff69f3
 8004540:	40011000 	.word	0x40011000
 8004544:	40023800 	.word	0x40023800
 8004548:	40004400 	.word	0x40004400
 800454c:	40004800 	.word	0x40004800
 8004550:	40004c00 	.word	0x40004c00
 8004554:	40005000 	.word	0x40005000
 8004558:	40011400 	.word	0x40011400
 800455c:	40007800 	.word	0x40007800
 8004560:	2310      	movs	r3, #16
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e02c      	b.n	80045c0 <UART_SetConfig+0x348>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a72      	ldr	r2, [pc, #456]	; (8004734 <UART_SetConfig+0x4bc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d125      	bne.n	80045bc <UART_SetConfig+0x344>
 8004570:	4b71      	ldr	r3, [pc, #452]	; (8004738 <UART_SetConfig+0x4c0>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800457a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800457e:	d017      	beq.n	80045b0 <UART_SetConfig+0x338>
 8004580:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004584:	d817      	bhi.n	80045b6 <UART_SetConfig+0x33e>
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d00b      	beq.n	80045a4 <UART_SetConfig+0x32c>
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004590:	d811      	bhi.n	80045b6 <UART_SetConfig+0x33e>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <UART_SetConfig+0x326>
 8004596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459a:	d006      	beq.n	80045aa <UART_SetConfig+0x332>
 800459c:	e00b      	b.n	80045b6 <UART_SetConfig+0x33e>
 800459e:	2300      	movs	r3, #0
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e00d      	b.n	80045c0 <UART_SetConfig+0x348>
 80045a4:	2302      	movs	r3, #2
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e00a      	b.n	80045c0 <UART_SetConfig+0x348>
 80045aa:	2304      	movs	r3, #4
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e007      	b.n	80045c0 <UART_SetConfig+0x348>
 80045b0:	2308      	movs	r3, #8
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e004      	b.n	80045c0 <UART_SetConfig+0x348>
 80045b6:	2310      	movs	r3, #16
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e001      	b.n	80045c0 <UART_SetConfig+0x348>
 80045bc:	2310      	movs	r3, #16
 80045be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c8:	d15b      	bne.n	8004682 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045ca:	7ffb      	ldrb	r3, [r7, #31]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d828      	bhi.n	8004622 <UART_SetConfig+0x3aa>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x360>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7ff f8f6 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004600:	61b8      	str	r0, [r7, #24]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff f906 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <UART_SetConfig+0x4c4>)
 800460e:	61bb      	str	r3, [r7, #24]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe ffdb 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 8004616:	61b8      	str	r0, [r7, #24]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	77bb      	strb	r3, [r7, #30]
        break;
 800462a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d074      	beq.n	800471c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	005a      	lsls	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d916      	bls.n	800467c <UART_SetConfig+0x404>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d212      	bcs.n	800467c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f023 030f 	bic.w	r3, r3, #15
 800465e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	b29a      	uxth	r2, r3
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4313      	orrs	r3, r2
 8004670:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	89fa      	ldrh	r2, [r7, #14]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	e04f      	b.n	800471c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77bb      	strb	r3, [r7, #30]
 8004680:	e04c      	b.n	800471c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x462>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x418>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7ff f89a 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 80046b8:	61b8      	str	r0, [r7, #24]
        break;
 80046ba:	e013      	b.n	80046e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7ff f8aa 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61b8      	str	r0, [r7, #24]
        break;
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <UART_SetConfig+0x4c4>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00c      	b.n	80046e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe ff7f 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 80046ce:	61b8      	str	r0, [r7, #24]
        break;
 80046d0:	e008      	b.n	80046e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e004      	b.n	80046e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77bb      	strb	r3, [r7, #30]
        break;
 80046e2:	bf00      	nop
    }

    if (pclk != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d909      	bls.n	8004718 <UART_SetConfig+0x4a0>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d205      	bcs.n	8004718 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004728:	7fbb      	ldrb	r3, [r7, #30]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40007c00 	.word	0x40007c00
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400

08004740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01a      	beq.n	8004856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483e:	d10a      	bne.n	8004856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004894:	f7fc ff5c 	bl	8001750 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d12e      	bne.n	8004906 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	2200      	movs	r2, #0
 80048b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f83b 	bl	8004932 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d021      	beq.n	8004906 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	617b      	str	r3, [r7, #20]
   return(result);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e011      	b.n	800492a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3728      	adds	r7, #40	; 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004942:	e04f      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d04b      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494c:	f7fc ff00 	bl	8001750 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <UART_WaitOnFlagUntilTimeout+0x30>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e04e      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d037      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d034      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d031      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b08      	cmp	r3, #8
 800498c:	d110      	bne.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2208      	movs	r2, #8
 8004994:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f838 	bl	8004a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2208      	movs	r2, #8
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e029      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d111      	bne.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f81e 	bl	8004a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e00f      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d0a0      	beq.n	8004944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b095      	sub	sp, #84	; 0x54
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	643b      	str	r3, [r7, #64]	; 0x40
 8004a34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e6      	bne.n	8004a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d118      	bne.n	8004ab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0310 	bic.w	r3, r3, #16
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	613b      	str	r3, [r7, #16]
   return(result);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ac8:	bf00      	nop
 8004aca:	3754      	adds	r7, #84	; 0x54
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d121      	bne.n	8004b2a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <FMC_SDRAM_Init+0xb4>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	6851      	ldr	r1, [r2, #4]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6892      	ldr	r2, [r2, #8]
 8004af6:	4311      	orrs	r1, r2
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	68d2      	ldr	r2, [r2, #12]
 8004afc:	4311      	orrs	r1, r2
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	6912      	ldr	r2, [r2, #16]
 8004b02:	4311      	orrs	r1, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	6952      	ldr	r2, [r2, #20]
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	6992      	ldr	r2, [r2, #24]
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	69d2      	ldr	r2, [r2, #28]
 8004b14:	4311      	orrs	r1, r2
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	6a12      	ldr	r2, [r2, #32]
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b20:	430a      	orrs	r2, r1
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e026      	b.n	8004b78 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	69d9      	ldr	r1, [r3, #28]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	4319      	orrs	r1, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	430b      	orrs	r3, r1
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <FMC_SDRAM_Init+0xb4>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	6851      	ldr	r1, [r2, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	4311      	orrs	r1, r2
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	6912      	ldr	r2, [r2, #16]
 8004b64:	4311      	orrs	r1, r2
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	6952      	ldr	r2, [r2, #20]
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	6992      	ldr	r2, [r2, #24]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	ffff8000 	.word	0xffff8000

08004b8c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d128      	bne.n	8004bf0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	1e59      	subs	r1, r3, #1
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	4319      	orrs	r1, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4319      	orrs	r1, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4319      	orrs	r1, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	4319      	orrs	r1, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	051b      	lsls	r3, r3, #20
 8004bdc:	4319      	orrs	r1, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	430b      	orrs	r3, r1
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
 8004bee:	e02d      	b.n	8004c4c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <FMC_SDRAM_Timing_Init+0xd0>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	68d2      	ldr	r2, [r2, #12]
 8004bfc:	3a01      	subs	r2, #1
 8004bfe:	0311      	lsls	r1, r2, #12
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	6952      	ldr	r2, [r2, #20]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0512      	lsls	r2, r2, #20
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	1e59      	subs	r1, r3, #1
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	4319      	orrs	r1, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	4319      	orrs	r1, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	4319      	orrs	r1, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	430b      	orrs	r3, r1
 8004c46:	431a      	orrs	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	ff0f0fff 	.word	0xff0f0fff

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4d0d      	ldr	r5, [pc, #52]	; (8004c98 <__libc_init_array+0x38>)
 8004c64:	4c0d      	ldr	r4, [pc, #52]	; (8004c9c <__libc_init_array+0x3c>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	42a6      	cmp	r6, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	4d0b      	ldr	r5, [pc, #44]	; (8004ca0 <__libc_init_array+0x40>)
 8004c72:	4c0c      	ldr	r4, [pc, #48]	; (8004ca4 <__libc_init_array+0x44>)
 8004c74:	f000 f820 	bl	8004cb8 <_init>
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	42a6      	cmp	r6, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c88:	4798      	blx	r3
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c92:	4798      	blx	r3
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	08004cf0 	.word	0x08004cf0
 8004c9c:	08004cf0 	.word	0x08004cf0
 8004ca0:	08004cf0 	.word	0x08004cf0
 8004ca4:	08004cf4 	.word	0x08004cf4

08004ca8 <memset>:
 8004ca8:	4402      	add	r2, r0
 8004caa:	4603      	mov	r3, r0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d100      	bne.n	8004cb2 <memset+0xa>
 8004cb0:	4770      	bx	lr
 8004cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb6:	e7f9      	b.n	8004cac <memset+0x4>

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
